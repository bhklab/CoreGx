[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct for the CoreGx Project","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation CoreGx project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct for the CoreGx Project","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct for the CoreGx Project","text":"CoreGx project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. CoreGx project right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct for the CoreGx Project","text":"Code Conduct applies within CoreGx project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct for the CoreGx Project","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting CoreGx project team bhklab.research@gmail.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. CoreGx project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. CoreGx project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct for the CoreGx Project","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to CoreGx","title":"Contributing to CoreGx","text":"Thank taking time contribute CoreGx project.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to CoreGx","text":"Please review follow code conduct CoreGx Project.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"discussing-or-suggesting-a-new-feature","dir":"","previous_headings":"How Can I Contribute?","what":"Discussing or Suggesting a New Feature","title":"Contributing to CoreGx","text":"contributing CoreGx, please first discuss change wish make via Issues.","code":""},{"path":"/CONTRIBUTING.html","id":"reporting-bugs","dir":"","previous_headings":"How Can I Contribute?","what":"Reporting Bugs","title":"Contributing to CoreGx","text":"Ensure bug already reported searching GitHub Issues. unable find open issue addressing problem, open new one. sure include title clear description, much relevant information possible, code sample executable test case demonstrating expected behavior occurring.","code":""},{"path":"/CONTRIBUTING.html","id":"code-contribution","dir":"","previous_headings":"How Can I Contribute?","what":"Code Contribution","title":"Contributing to CoreGx","text":"Checkout development branch, add changes, ensure package builds, commit development branch. changes commited, make pull request master branch.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/TreatmentResponseExperiment.html","id":"why-do-we-need-a-new-class","dir":"Articles","previous_headings":"","what":"Why Do We Need A New Class?","title":"The TreatmentResponseExperiment Class","text":"current implementation @treatmentResponse slot PharmacoSet limitations. Firstly, natively support dose-response experiments multiple drugs /cancer cell lines. result able include data PharmacoSet thus far. Secondly, drug combination data potential scale high dimensionality. result need object highly performant ensure computations data can completed timely manner. resolve issues, designed implement TreamtentResponseExperiment (TRE short)!","code":""},{"path":"/articles/TreatmentResponseExperiment.html","id":"design-philosophy","dir":"Articles","previous_headings":"","what":"Design Philosophy","title":"The TreatmentResponseExperiment Class","text":"current use case supporting drug combinations experiments PharmacoGx, wanted create something flexible enough fit use cases. , used generic term ‘treatment’ refer experimental intervention one can conduct set samples. context PharmacoGx, treatment represents application one anti-cancer compounds cancer cell-line. resulting viability cell-line treatment response metric. hope implementation class general enough support use cases. example, TreatmentResponseExperiment class also adopted radiation dose-response experiments cancer cell-lines RadioGx well investigating compound toxicity healthy human rat cell-lines ToxicoGx. design takes aspects SummarizedExperiment MultiAssayExperiment classes implements using data.table package, provides R API rich set tools scalable, high performance data processing implemented C.","code":""},{"path":[]},{"path":"/articles/TreatmentResponseExperiment.html","id":"class-diagram","dir":"Articles","previous_headings":"Anatomy of a TreatmentResponseExperiment","what":"Class Diagram","title":"The TreatmentResponseExperiment Class","text":"borrowed directly SummarizedExperiment class rowData, colData, metadata assays slot names. also implemented SummarizedExperiment accessor methods TreatmentResponseExperiment. Therefore interface familiar users common Bioconductor packages.","code":""},{"path":"/articles/TreatmentResponseExperiment.html","id":"object-structure-and-cardinality","dir":"Articles","previous_headings":"Anatomy of a TreatmentResponseExperiment","what":"Object Structure and Cardinality","title":"The TreatmentResponseExperiment Class","text":", however, important differences make object flexible dealing high dimensional data.  Unlike SummarizedExperiment, three distinct subgroups columns rowData colData. first rowKey colKey implemented internally map assay observation associated treatments samples (rows columns); returned accessors default. second rowIDs colIDs, hold information necessary uniquely identify row column used generate rowKey colKey. Finally, rowMeta colMeta columns, store additional data treatments samples required uniquely identify row either table. Within TreatmentResponseExperiment, assayIndex stored @.intern slot maps unique combinations rowKey colKey experimental observations assay. relationship maintained using separate primary key assay, can map one rowKey colKey combination. assays containing raw experimental observations, generally assay row map one one combination rowKey colKey. However, metrics computed experimental observations, may desirable summarized rowID /colID columns. case, relationship summarized rows metadata stored rowData colData slots retained assayIndex, allowing Also worth noting cardinality rowData colData given assay within assays list. indicated lower connection tables assay, row column key may zero rows assay table. Conversely row assay may zero one key colData rowData. combined, rowKey colKey given row assay become composite key uniquely identify observation.","code":""},{"path":"/articles/TreatmentResponseExperiment.html","id":"constructing-a-treatmentresponseexperiment","dir":"Articles","previous_headings":"","what":"Constructing a TreatmentResponseExperiment","title":"The TreatmentResponseExperiment Class","text":"deal complex kinds experimental designs can stored LongTable, engineered new object help document validate way data mapped raw data files, single large data.frame data.table, various slots TreatmentResponseExperiment object.","code":""},{"path":"/articles/TreatmentResponseExperiment.html","id":"the-datamapper-class","dir":"Articles","previous_headings":"Constructing a TreatmentResponseExperiment","what":"The DataMapper Class","title":"The TreatmentResponseExperiment Class","text":"DataMapper abstract class, means instatiated. purpose provide description concept DataMapper define basic interface classes inheriting . DataMapper simply way map columns raw data file slots S4 class. similar schema SQL defines valid parts object (analogously SQL table), differs types specified enforced time. object important general users, may useful developers want map raw data S4 class. case, derived data mapper inherit DataMapper abstract class. one slot defined default, list List @rawdata slot. accessor method, rawdata(DataMapper), defined assign retrieve raw data mapper object.","code":""},{"path":"/articles/TreatmentResponseExperiment.html","id":"the-tredatamapper-class","dir":"Articles","previous_headings":"Constructing a TreatmentResponseExperiment","what":"The TREDataMapper Class","title":"The TreatmentResponseExperiment Class","text":"TREDataMapper class first concrete sub-class DataMapper. object defines go single data.frame data.table raw experimental data properly formatted valid TreatmentResponseExperiment object. accomplished defining various mappings, let user decide columns rawdata go slots object. slot mapping implemented list character vectors specifying column names rawdata assign slot. Additionally, helper method included, guessMapping, try determine columns TreatmentResponseExperiments rawdata assigned slots, therefore maps. get started making TreatmentResponseExperiment lets look rawdata subset data Oneil et al., 2016. full set rawdata available exploration download SynergxDB.ca, free open source web-app database publicly available drug combination sensitivity experiments created released (Seo et al., 2019). data generated part commercial activities pharmaceutical company Merck, thus named according. can see data related treatment response experiment contained within table. get idea TreatmentResponseExperiment data go, lets come guesses mappings. Since want TreatmentResponseExperiment drugs rows samples columns, see justDrug drugsAndDoses yield result. yet prefer one . Looking justCells cellsAndBatches, see one column maps therefore still preference. assay1 however, see columns mapped, assay2 maps many raw data columns. Since assays subset based rowKey colKey, know rowIDs must drugsAndDose colIDs must cellsAndBatches. Therefore, uniquely identify observation given assay need columns. can use information assign maps TREDataMapper. Looking mapped columns assay2, must decide want go one assay. , name item assayMap TREDataMapper specify list character vectors, one assay. Since viability raw experimental measurement final two columns summaries , assign two assays:sensitivity profiles.","code":"filePath <- system.file('extdata', 'merckLongTable.csv', package='CoreGx',   mustWork=TRUE) merckDT <- fread(filePath, na.strings=c('NULL')) colnames(merckDT) ##  [1] \"drug1id\"            \"drug2id\"            \"drug1dose\"          ##  [4] \"drug2dose\"          \"combination_name\"   \"cellid\"             ##  [7] \"batchid\"            \"viability1\"         \"viability2\"         ## [10] \"viability3\"         \"viability4\"         \"mu/muMax_published\" ## [13] \"X/X0_published\" # Our guesses of how we may identify rows, columns and assays groups <- list(   justDrugs=c('drug1id', 'drug2id'),   drugsAndDoses=c('drug1id', 'drug2id', 'drug1dose', 'drug2dose'),   justCells=c('cellid'),   cellsAndBatches=c('cellid', 'batchid'),   assays1=c('drug1id', 'drug2id', 'cellid'),   assays2=c('drug1id', 'drug2id', 'drug1dose', 'drug2dose', 'cellid', 'batchid') )  # Decide if we want to subset out mapped columns after each group subsets <- c(FALSE, TRUE, FALSE, TRUE, FALSE, TRUE)  # First we put our data in the `TRE` TREdataMapper <- TREDataMapper(rawdata=merckDT)  # Then we can test our hypotheses, subset=FALSE means we don't remove mapped #   columns after each group is mapped guess <- guessMapping(TREdataMapper, groups=groups, subset=subsets) ## [CoreGx::guessMapping,LongTableDataMapper-method] ##  Mapping for group justDrugs: drug1id, drug2id ## [CoreGx::guessMapping,LongTableDataMapper-method] ##  Mapping for group drugsAndDoses: drug1id, drug2id, drug1dose, drug2dose ## [CoreGx::guessMapping,LongTableDataMapper-method] ##  Mapping for group justCells: cellid ## [CoreGx::guessMapping,LongTableDataMapper-method] ##  Mapping for group cellsAndBatches: cellid, batchid ## [CoreGx::guessMapping,LongTableDataMapper-method] ##  Mapping for group assays1: drug1id, drug2id, cellid ## [CoreGx::guessMapping,LongTableDataMapper-method] ##  Mapping for group assays2: drug1id, drug2id, drug1dose, drug2dose, cellid, batchid guess ## $metadata ## $metadata$id_columns ## [1] NA ##  ## $metadata$mapped_columns ## character(0) ##  ##  ## $justDrugs ## $justDrugs$id_columns ## [1] \"drug1id\" \"drug2id\" ##  ## $justDrugs$mapped_columns ## [1] \"combination_name\" ##  ##  ## $drugsAndDoses ## $drugsAndDoses$id_columns ## [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\" ##  ## $drugsAndDoses$mapped_columns ## [1] \"combination_name\" ##  ##  ## $justCells ## $justCells$id_columns ## [1] \"cellid\" ##  ## $justCells$mapped_columns ## character(0) ##  ##  ## $cellsAndBatches ## $cellsAndBatches$id_columns ## [1] \"cellid\"  \"batchid\" ##  ## $cellsAndBatches$mapped_columns ## character(0) ##  ##  ## $assays1 ## $assays1$id_columns ## [1] \"drug1id\" \"drug2id\" \"cellid\"  ##  ## $assays1$mapped_columns ## character(0) ##  ##  ## $assays2 ## $assays2$id_columns ## [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\" \"cellid\"    \"batchid\"   ##  ## $assays2$mapped_columns ## [1] \"viability1\"         \"viability2\"         \"viability3\"         ## [4] \"viability4\"         \"mu/muMax_published\" \"X/X0_published\"     ##  ##  ## $unmapped ## character(0) rowDataMap(TREdataMapper) <- guess$drugsAndDose colDataMap(TREdataMapper) <- guess$cellsAndBatches assays <- list(   sensitivity=list(     guess$assays2[[1]],     guess$assays2[[2]][seq_len(4)]   ),   profiles=list(     guess$assays2[[1]],     guess$assays2[[2]][c(5, 6)]   ) ) assays ## $sensitivity ## $sensitivity[[1]] ## [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\" \"cellid\"    \"batchid\"   ##  ## $sensitivity[[2]] ## [1] \"viability1\" \"viability2\" \"viability3\" \"viability4\" ##  ##  ## $profiles ## $profiles[[1]] ## [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\" \"cellid\"    \"batchid\"   ##  ## $profiles[[2]] ## [1] \"mu/muMax_published\" \"X/X0_published\" assayMap(TREdataMapper) <- assays"},{"path":"/articles/TreatmentResponseExperiment.html","id":"metaconstruct-method","dir":"Articles","previous_headings":"Constructing a TreatmentResponseExperiment","what":"metaConstruct Method","title":"The TreatmentResponseExperiment Class","text":"metaConstruct method accepts DataMapper object argument, uses information DataMapper preprocess rawdata map appropriate slots S4 object. case, mapping merckDT data.table TreatmentResponseExperiment. minimum, TREDataMapper must specify rowDataMap, colDataMap, assayMap. Additional maps available, see ?TREDataMapper-class ?TREDataMapper-accessors details. configuration, creating object straight forward.","code":"tre <- metaConstruct(TREdataMapper) ## 2024-01-18 21:36:43 Building assay index... ## 2024-01-18 21:36:43 Joining rowData to assayIndex... ## 2024-01-18 21:36:44 Joining colData to assayIndex... ## 2024-01-18 21:36:44 Joining assays to assayIndex... ## 2024-01-18 21:36:45 Setting assayIndex key... ## 2024-01-18 21:36:46 Building LongTable... ##"},{"path":"/articles/TreatmentResponseExperiment.html","id":"treatmentresponseexperiment-object","dir":"Articles","previous_headings":"","what":"TreatmentResponseExperiment Object","title":"The TreatmentResponseExperiment Class","text":"mentioned previously, TreatmentResponseExperiment list table like behaviours. table like operations, given TreatmentResponseExperiment can thought rowKey colKey rectangular object. support data.frame like sub-setting object, constructor makes pseudo row column names, ID columns row rowData colData pasted together ‘:’. ordering columns preserved pseudo-dim names, sure arrange desirged creating TreatmentResponseExperiment.","code":""},{"path":"/articles/TreatmentResponseExperiment.html","id":"row-and-column-names","dir":"Articles","previous_headings":"TreatmentResponseExperiment Object","what":"Row and Column Names","title":"The TreatmentResponseExperiment Class","text":"see rownames Merck TreatmentResponseExperiment cell-line name pasted batch id. column names, similar pattern followed combining colID columns form ‘drug1:drug2:drug1dose:drug2dose’.","code":"head(rownames(tre)) ## [1] \"5-FU:Bortezomib:0.35:0.00045\" \"5-FU:Bortezomib:0.35:0.002\"   ## [3] \"5-FU:Bortezomib:0.35:0.009\"   \"5-FU:Bortezomib:0.35:0.04\"    ## [5] \"5-FU:L778123:0.35:0.325\"      \"5-FU:L778123:0.35:0.8\" head(colnames(tre)) ## [1] \"A2058:1\" \"A2058:3\" \"A2780:1\" \"A2780:2\" \"A375:1\"  \"A375:2\""},{"path":"/articles/TreatmentResponseExperiment.html","id":"data-frame-subsetting","dir":"Articles","previous_headings":"TreatmentResponseExperiment Object","what":"data.frame Subsetting","title":"The TreatmentResponseExperiment Class","text":"can subset TreatmentResponseExperiment using row column name syntax data.frame matrix.","code":"row <- rownames(tre)[1] columns <- colnames(tre)[1:2] tre[row, columns] ## <TreatmentResponseExperiment>  ##    dim:  1 1  ##    assays(2): sensitivity profiles  ##    rownames(1): 5-FU:Bortezomib:0.35:0.00045  ##    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  ##    colnames(1): A2058:1  ##    colData(2): cellid batchid  ##    metadata(0): none"},{"path":"/articles/TreatmentResponseExperiment.html","id":"regex-queries","dir":"Articles","previous_headings":"TreatmentResponseExperiment Object > data.frame Subsetting","what":"Regex Queries","title":"The TreatmentResponseExperiment Class","text":"However, unlike data.frame matrix subsetting also accepts partial row column names well regex queries. example, want get instance ‘5-FU’ drug: matched colnames 5-FU either drug1 drug2. want match drug1, several options: technicaly note, ‘*’ replaced ‘.*’ internally regex queries. implemented mimic linux shell style patten matching command-line users familiar .","code":"head(rowData(tre), 3) ##    drug1id    drug2id drug1dose drug2dose  combination_name ## 1:    5-FU Bortezomib      0.35   0.00045 5-FU & Bortezomib ## 2:    5-FU Bortezomib      0.35   0.00200 5-FU & Bortezomib ## 3:    5-FU Bortezomib      0.35   0.00900 5-FU & Bortezomib head(colData(tre), 3) ##    cellid batchid ## 1:  A2058       1 ## 2:  A2058       3 ## 3:  A2780       1 tre['5-FU', ] ## <TreatmentResponseExperiment>  ##    dim:  21 5  ##    assays(2): sensitivity profiles  ##    rownames(21): 5-FU:Bortezomib:0.35:0.00045 5-FU:Bortezomib:0.35:0.002 ... 5-FU:geldanamycin:0.35:2 MK-4541:5-FU:0.045:10  ##    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  ##    colnames(5): A2058:1 A2780:1 A375:1 A427:1 CAOV3:1  ##    colData(2): cellid batchid  ##    metadata(0): none all.equal(tre['5-FU:*:*:*', ], tre['^5-FU',  ]) ## [1] TRUE"},{"path":"/articles/TreatmentResponseExperiment.html","id":"data-table-subsetting","dir":"Articles","previous_headings":"TreatmentResponseExperiment Object","what":"data.table Subsetting","title":"The TreatmentResponseExperiment Class","text":"addition regex queries, TreatmentResponseExperiment object supports arbitrarily complex subset queries using data.table API. access API, need use . function, allows pass raw R expressions evaluated inside j arguments dataTable[, j]. example want subset rows cell line VCAP columns drug1 Temozolomide drug2 either Lapatinib Bortezomib: can also invert matches subset columns rowData colData: show works expected:","code":"tre[     # row query     .(drug1id == 'Temozolomide' & drug2id %in% c('Lapatinib', 'Bortezomib')),     .(cellid == 'CAOV3') # column query ] ## <TreatmentResponseExperiment>  ##    dim:  8 1  ##    assays(2): sensitivity profiles  ##    rownames(8): Temozolomide:Bortezomib:2.75:0.00045 Temozolomide:Bortezomib:2.75:0.002 ... Temozolomide:Lapatinib:2.75:1.1 Temozolomide:Lapatinib:2.75:5  ##    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  ##    colnames(1): CAOV3:1  ##    colData(2): cellid batchid  ##    metadata(0): none subTRE <- tre[   .(drug1id == 'Temozolomide' & drug2id != 'Lapatinib'),   .(batchid != 2) ] print(paste0('drug2id: ', paste0(unique(rowData(subTRE)$drug2id),     collapse=', '))) ## [1] \"drug2id: ABT-888, BEZ-235, Bortezomib, Dasatinib, Erlotinib, MK-2206, MK-5108, MK-8669, MK-8776, PD325901, SN-38, Sorafenib, geldanamycin\" print(paste0('batchid: ', paste0(unique(colData(subTRE)$batchid),     collapse=', '))) ## [1] \"batchid: 1\""},{"path":[]},{"path":"/articles/TreatmentResponseExperiment.html","id":"rowdata","dir":"Articles","previous_headings":"Accessor Methods","what":"rowData","title":"The TreatmentResponseExperiment Class","text":"","code":"head(rowData(tre), 3) ##    drug1id    drug2id drug1dose drug2dose  combination_name ## 1:    5-FU Bortezomib      0.35   0.00045 5-FU & Bortezomib ## 2:    5-FU Bortezomib      0.35   0.00200 5-FU & Bortezomib ## 3:    5-FU Bortezomib      0.35   0.00900 5-FU & Bortezomib head(rowData(tre, key=TRUE), 3) ##    drug1id    drug2id drug1dose drug2dose  combination_name rowKey ## 1:    5-FU Bortezomib      0.35   0.00045 5-FU & Bortezomib      1 ## 2:    5-FU Bortezomib      0.35   0.00200 5-FU & Bortezomib      2 ## 3:    5-FU Bortezomib      0.35   0.00900 5-FU & Bortezomib      3"},{"path":"/articles/TreatmentResponseExperiment.html","id":"coldata","dir":"Articles","previous_headings":"Accessor Methods","what":"colData","title":"The TreatmentResponseExperiment Class","text":"","code":"head(colData(tre), 3) ##    cellid batchid ## 1:  A2058       1 ## 2:  A2058       3 ## 3:  A2780       1 head(colData(tre, key=TRUE), 3) ##    cellid batchid colKey ## 1:  A2058       1      1 ## 2:  A2058       3      2 ## 3:  A2780       1      3"},{"path":"/articles/TreatmentResponseExperiment.html","id":"assays","dir":"Articles","previous_headings":"Accessor Methods","what":"assays","title":"The TreatmentResponseExperiment Class","text":"Using names can access specific assays within TreatmentResponseExperiment.","code":"assays <- assays(tre) assays[[1]] ##            drug1id    drug2id drug1dose drug2dose cellid batchid ##    1:         5-FU Bortezomib    0.3500   0.00045  A2058       1 ##    2:         5-FU Bortezomib    0.3500   0.00045  A2780       1 ##    3:         5-FU Bortezomib    0.3500   0.00045   A375       1 ##    4:         5-FU Bortezomib    0.3500   0.00045   A427       1 ##    5:         5-FU Bortezomib    0.3500   0.00045  CAOV3       1 ##   ---                                                            ## 3796: geldanamycin  Topotecan    0.0223   0.07750  A2058       1 ## 3797: geldanamycin  Topotecan    0.0223   0.07750  A2780       1 ## 3798: geldanamycin  Topotecan    0.0223   0.07750   A375       1 ## 3799: geldanamycin  Topotecan    0.0223   0.07750   A427       1 ## 3800: geldanamycin  Topotecan    0.0223   0.07750  CAOV3       1 ##               combination_name viability1 viability2 viability3 viability4 ##    1:        5-FU & Bortezomib      0.814      0.754      0.765      0.849 ##    2:        5-FU & Bortezomib      0.214      0.195      0.186      0.223 ##    3:        5-FU & Bortezomib      1.064      1.080      1.082      1.009 ##    4:        5-FU & Bortezomib      0.675      0.582      0.482      0.516 ##    5:        5-FU & Bortezomib      0.845      0.799      0.799      0.759 ##   ---                                                                      ## 3796: geldanamycin & Topotecan      0.090      0.043      0.112      0.103 ## 3797: geldanamycin & Topotecan      0.025      0.022      0.029      0.023 ## 3798: geldanamycin & Topotecan      0.151      0.146      0.144      0.171 ## 3799: geldanamycin & Topotecan      0.142      0.166      0.124      0.175 ## 3800: geldanamycin & Topotecan      0.091      0.084      0.134      0.119 assays[[2]] ##            drug1id    drug2id drug1dose drug2dose cellid batchid ##    1:         5-FU Bortezomib    0.3500   0.00045  A2058       1 ##    2:         5-FU Bortezomib    0.3500   0.00045  A2780       1 ##    3:         5-FU Bortezomib    0.3500   0.00045   A375       1 ##    4:         5-FU Bortezomib    0.3500   0.00045   A427       1 ##    5:         5-FU Bortezomib    0.3500   0.00045  CAOV3       1 ##   ---                                                            ## 3796: geldanamycin  Topotecan    0.0223   0.07750  A2058       1 ## 3797: geldanamycin  Topotecan    0.0223   0.07750  A2780       1 ## 3798: geldanamycin  Topotecan    0.0223   0.07750   A375       1 ## 3799: geldanamycin  Topotecan    0.0223   0.07750   A427       1 ## 3800: geldanamycin  Topotecan    0.0223   0.07750  CAOV3       1 ##               combination_name mu/muMax_published X/X0_published ##    1:        5-FU & Bortezomib              0.880          0.847 ##    2:        5-FU & Bortezomib              0.384          0.426 ##    3:        5-FU & Bortezomib              1.033          1.047 ##    4:        5-FU & Bortezomib              0.676          0.638 ##    5:        5-FU & Bortezomib              0.708          0.667 ##   ---                                                            ## 3796: geldanamycin & Topotecan             -0.187          0.193 ## 3797: geldanamycin & Topotecan             -0.445          0.135 ## 3798: geldanamycin & Topotecan              0.090          0.283 ## 3799: geldanamycin & Topotecan             -0.012          0.246 ## 3800: geldanamycin & Topotecan             -1.935          0.017 assays <- assays(tre, withDimnames=TRUE) colnames(assays[[1]]) ##  [1] \"drug1id\"          \"drug2id\"          \"drug1dose\"        \"drug2dose\"        ##  [5] \"cellid\"           \"batchid\"          \"combination_name\" \"viability1\"       ##  [9] \"viability2\"       \"viability3\"       \"viability4\" assays <- assays(tre, withDimnames=TRUE, metadata=TRUE) colnames(assays[[2]]) ## [1] \"drug1id\"            \"drug2id\"            \"drug1dose\"          ## [4] \"drug2dose\"          \"cellid\"             \"batchid\"            ## [7] \"combination_name\"   \"mu/muMax_published\" \"X/X0_published\" assayNames(tre) ## [1] \"sensitivity\" \"profiles\""},{"path":"/articles/TreatmentResponseExperiment.html","id":"assay","dir":"Articles","previous_headings":"Accessor Methods","what":"assay","title":"The TreatmentResponseExperiment Class","text":"","code":"colnames(assay(tre, 'sensitivity')) ##  [1] \"drug1id\"          \"drug2id\"          \"drug1dose\"        \"drug2dose\"        ##  [5] \"cellid\"           \"batchid\"          \"combination_name\" \"viability1\"       ##  [9] \"viability2\"       \"viability3\"       \"viability4\" assay(tre, 'sensitivity') ##            drug1id    drug2id drug1dose drug2dose cellid batchid ##    1:         5-FU Bortezomib    0.3500   0.00045  A2058       1 ##    2:         5-FU Bortezomib    0.3500   0.00045  A2780       1 ##    3:         5-FU Bortezomib    0.3500   0.00045   A375       1 ##    4:         5-FU Bortezomib    0.3500   0.00045   A427       1 ##    5:         5-FU Bortezomib    0.3500   0.00045  CAOV3       1 ##   ---                                                            ## 3796: geldanamycin  Topotecan    0.0223   0.07750  A2058       1 ## 3797: geldanamycin  Topotecan    0.0223   0.07750  A2780       1 ## 3798: geldanamycin  Topotecan    0.0223   0.07750   A375       1 ## 3799: geldanamycin  Topotecan    0.0223   0.07750   A427       1 ## 3800: geldanamycin  Topotecan    0.0223   0.07750  CAOV3       1 ##               combination_name viability1 viability2 viability3 viability4 ##    1:        5-FU & Bortezomib      0.814      0.754      0.765      0.849 ##    2:        5-FU & Bortezomib      0.214      0.195      0.186      0.223 ##    3:        5-FU & Bortezomib      1.064      1.080      1.082      1.009 ##    4:        5-FU & Bortezomib      0.675      0.582      0.482      0.516 ##    5:        5-FU & Bortezomib      0.845      0.799      0.799      0.759 ##   ---                                                                      ## 3796: geldanamycin & Topotecan      0.090      0.043      0.112      0.103 ## 3797: geldanamycin & Topotecan      0.025      0.022      0.029      0.023 ## 3798: geldanamycin & Topotecan      0.151      0.146      0.144      0.171 ## 3799: geldanamycin & Topotecan      0.142      0.166      0.124      0.175 ## 3800: geldanamycin & Topotecan      0.091      0.084      0.134      0.119 colnames(assay(tre, 'sensitivity', withDimnames=TRUE)) ##  [1] \"drug1id\"          \"drug2id\"          \"drug1dose\"        \"drug2dose\"        ##  [5] \"cellid\"           \"batchid\"          \"combination_name\" \"viability1\"       ##  [9] \"viability2\"       \"viability3\"       \"viability4\" assay(tre, 'sensitivity', withDimnames=TRUE) ##            drug1id    drug2id drug1dose drug2dose cellid batchid ##    1:         5-FU Bortezomib    0.3500   0.00045  A2058       1 ##    2:         5-FU Bortezomib    0.3500   0.00045  A2780       1 ##    3:         5-FU Bortezomib    0.3500   0.00045   A375       1 ##    4:         5-FU Bortezomib    0.3500   0.00045   A427       1 ##    5:         5-FU Bortezomib    0.3500   0.00045  CAOV3       1 ##   ---                                                            ## 3796: geldanamycin  Topotecan    0.0223   0.07750  A2058       1 ## 3797: geldanamycin  Topotecan    0.0223   0.07750  A2780       1 ## 3798: geldanamycin  Topotecan    0.0223   0.07750   A375       1 ## 3799: geldanamycin  Topotecan    0.0223   0.07750   A427       1 ## 3800: geldanamycin  Topotecan    0.0223   0.07750  CAOV3       1 ##               combination_name viability1 viability2 viability3 viability4 ##    1:        5-FU & Bortezomib      0.814      0.754      0.765      0.849 ##    2:        5-FU & Bortezomib      0.214      0.195      0.186      0.223 ##    3:        5-FU & Bortezomib      1.064      1.080      1.082      1.009 ##    4:        5-FU & Bortezomib      0.675      0.582      0.482      0.516 ##    5:        5-FU & Bortezomib      0.845      0.799      0.799      0.759 ##   ---                                                                      ## 3796: geldanamycin & Topotecan      0.090      0.043      0.112      0.103 ## 3797: geldanamycin & Topotecan      0.025      0.022      0.029      0.023 ## 3798: geldanamycin & Topotecan      0.151      0.146      0.144      0.171 ## 3799: geldanamycin & Topotecan      0.142      0.166      0.124      0.175 ## 3800: geldanamycin & Topotecan      0.091      0.084      0.134      0.119"},{"path":"/articles/TreatmentResponseExperiment.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"The TreatmentResponseExperiment Class","text":"O’Neil J, Benita Y, Feldman , Chenard M, Roberts B, Liu Y, Li J, Kral , Lejnine S, Loboda , Arthur W, Cristescu R, Haines BB, Winter C, Zhang T, Bloecher , Shumway SD. Unbiased Oncology Compound Screen Identify Novel Combination Strategies. Mol Cancer Ther. 2016 Jun;15(6):1155-62. doi: 10.1158/1535-7163.MCT-15-0843. Epub 2016 Mar 16. PMID: 26983881. Heewon Seo, Denis Tkachuk, Chantal Ho, Anthony Mammoliti, Aria Rezaie, Seyed Ali Madani Tonekaboni, Benjamin Haibe-Kains, SYNERGxDB: integrative pharmacogenomic portal identify synergistic drug combinations precision oncology, Nucleic Acids Research, Volume 48, Issue W1, 02 July 2020, Pages W494–W501, https://doi.org/10.1093/nar/gkaa421","code":""},{"path":"/articles/TreatmentResponseExperiment.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo","title":"The TreatmentResponseExperiment Class","text":"","code":"## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] data.table_1.14.10          CoreGx_2.7.2                ##  [3] SummarizedExperiment_1.32.0 Biobase_2.62.0              ##  [5] GenomicRanges_1.54.1        GenomeInfoDb_1.38.5         ##  [7] IRanges_2.36.0              S4Vectors_0.40.2            ##  [9] MatrixGenerics_1.14.0       matrixStats_1.2.0           ## [11] BiocGenerics_0.48.1         formatR_1.14                ## [13] BiocStyle_2.30.0            ##  ## loaded via a namespace (and not attached): ##   [1] bitops_1.0-7                rlang_1.1.3                 ##   [3] magrittr_2.0.3              shinydashboard_0.7.2        ##   [5] compiler_4.3.2              systemfonts_1.0.5           ##   [7] vctrs_0.6.5                 relations_0.6-13            ##   [9] stringr_1.5.1               pkgconfig_2.0.3             ##  [11] crayon_1.5.2                fastmap_1.1.1               ##  [13] backports_1.4.1             XVector_0.42.0              ##  [15] ellipsis_0.3.2              caTools_1.18.2              ##  [17] utf8_1.2.4                  promises_1.2.1              ##  [19] rmarkdown_2.25              ragg_1.2.7                  ##  [21] purrr_1.0.2                 xfun_0.41                   ##  [23] MultiAssayExperiment_1.28.0 zlibbioc_1.48.0             ##  [25] cachem_1.0.8                jsonlite_1.8.8              ##  [27] highr_0.10                  SnowballC_0.7.1             ##  [29] later_1.3.2                 DelayedArray_0.28.0         ##  [31] BiocParallel_1.36.0         parallel_4.3.2              ##  [33] sets_1.0-25                 cluster_2.1.4               ##  [35] R6_2.5.1                    bslib_0.6.1                 ##  [37] stringi_1.8.3               limma_3.58.1                ##  [39] jquerylib_0.1.4             Rcpp_1.0.12                 ##  [41] bookdown_0.37               knitr_1.45                  ##  [43] httpuv_1.6.13               Matrix_1.6-1.1              ##  [45] igraph_1.6.0                tidyselect_1.2.0            ##  [47] abind_1.4-5                 yaml_2.3.8                  ##  [49] gplots_3.1.3                codetools_0.2-19            ##  [51] lattice_0.21-9              tibble_3.2.1                ##  [53] shiny_1.8.0                 BumpyMatrix_1.10.0          ##  [55] evaluate_0.23               desc_1.4.3                  ##  [57] bench_1.1.3                 pillar_1.9.0                ##  [59] lsa_0.73.3                  BiocManager_1.30.22         ##  [61] KernSmooth_2.23-22          DT_0.31                     ##  [63] checkmate_2.3.1             shinyjs_2.1.0               ##  [65] piano_2.18.0                generics_0.1.3              ##  [67] RCurl_1.98-1.14             ggplot2_3.4.4               ##  [69] munsell_0.5.0               scales_1.3.0                ##  [71] gtools_3.9.5                xtable_1.8-4                ##  [73] marray_1.80.0               glue_1.7.0                  ##  [75] slam_0.1-50                 tools_4.3.2                 ##  [77] fgsea_1.28.0                visNetwork_2.1.2            ##  [79] fs_1.6.3                    fastmatch_1.1-4             ##  [81] cowplot_1.1.2               grid_4.3.2                  ##  [83] colorspace_2.1-0            GenomeInfoDbData_1.2.11     ##  [85] cli_3.6.2                   textshaping_0.3.7           ##  [87] fansi_1.0.6                 S4Arrays_1.2.0              ##  [89] dplyr_1.1.4                 gtable_0.3.4                ##  [91] sass_0.4.8                  digest_0.6.34               ##  [93] SparseArray_1.2.3           htmlwidgets_1.6.4           ##  [95] memoise_2.0.1               htmltools_0.5.7             ##  [97] pkgdown_2.0.7               lifecycle_1.0.4             ##  [99] statmod_1.5.0               mime_0.12"},{"path":"/articles/coreGx.html","id":"coregx","dir":"Articles","previous_headings":"","what":"CoreGx","title":"CoreGx: Class and Function Abstractions for PharmacoGx, RadioGx and ToxicoGx","text":"package provides foundation PharmacoGx, RadioGx ToxicoGx packages. intended standalone use, dependency aforementioned software. existence allows abstracting generic definitions, method definitions class structures common three Gx suite packages.","code":""},{"path":"/articles/coreGx.html","id":"importing-and-using-coregx","dir":"Articles","previous_headings":"CoreGx","what":"Importing and Using CoreGx","title":"CoreGx: Class and Function Abstractions for PharmacoGx, RadioGx and ToxicoGx","text":"Load pacakge:","code":"library(CoreGx) library(Biobase) library(SummarizedExperiment)"},{"path":"/articles/coreGx.html","id":"the-coreset-class","dir":"Articles","previous_headings":"CoreGx","what":"The CoreSet Class","title":"CoreGx: Class and Function Abstractions for PharmacoGx, RadioGx and ToxicoGx","text":"CoreSet class intended general purpose data structure storing multiomic treatment response data. Extensions class customized respective fields study. example, PharmacoSet class inherits CoreSet specialized storing analyzing drug sensitivity perturbation experiments cancer cell lines together associated multiomic data treated sample. RadioSet class serves role similar PharmacoSet radiation instead drug treatments. Finally, ToxicoSet class used store toxicity data healthy human rat hepatocytes along associated multiomic profile treatment. annotation slot holds CoreSet name, original constructor call, range metadata R session constructor called. allows easy comparison CoreSet versions across time ensures code used generate CoreSet well-documented reproducible. molecularProfiles slot contains list SummarizedExperiment objects multi-omic molecular datatype available given experiment. Within SummarizedExperiments feature sample annotations data type. currently process adopting MultiAssayExperiment class instead list storing molecular profile SummarizedExperiments. However, list version molecularProfiles slot still supported backwards compatability. sample slot contains data.frame annotations samples used molecularProfiles sensitivity slot. minimum standardized column ‘sampleid’, unique identifier sample CoreSet. treatment slot contains data.frame metadata treatments applied samples molecularProfiles treatmentResponse slot. minimum standarized column ‘treatmentid’, containing unique identifier treatment CoreSet. datasetType slot contains character vector indicating experiment type CoreSet contains. slot soft deprecated may removed future updates. treatmentResponse slot contains list raw, curated meta data treatment-response experiments. currently process adopting new S4-class, TreamtentResponseExperiment store treatment-response data within CoreSet inheriting classes. However, old list format sensitivity experiments continue support backwards compatability. perturbation slot contains list raw, curated meta data perturbation experiments. slot soft-deprecated may removed future. reason treatment perturbation experiments can efficiently stored colData slot respective SummarizedExperiment objects thus longer require space within CoreSet. curation slot contains list manually curated identifiers standardized cell-line, tissue treatment names. Inclusion identifiers ensures consistent nomenclature used across datasets curated classes inheriting CoreSet, enabling results datasets easily compared validate results published studies combine use larger meta-analyses. slot contains list data.frames, one entity, minimum include mapping curated identifiers used throughout object used original dataset publication. CoreSet class provides set standardized accessor methods simplify curation, annotation, retrieval data associated specfic treatment response experiment. accessors implemented generics allow new methods defined classes inheriting CoreSet. provided sample CoreSet (cSet) package. code load example cSet demonstrate accessor methods. Access specific molecular profiles: Access cell-line metadata: Access treatment-response data: information accessor methods available CoreSet class please see class?CoreSet help page.","code":"getClass(\"CoreSet\") ## Class \"CoreSet\" [package \"CoreGx\"] ##  ## Slots: ##                                                                                ## Name:  treatmentResponse        annotation molecularProfiles            sample ## Class: list_OR_LongTable              list       list_OR_MAE        data.frame ##                                                                                ## Name:          treatment       datasetType      perturbation          curation ## Class:        data.frame         character              list              list methods(class=\"CoreSet\") ##  [1] annotation              annotation<-            curation                ##  [4] curation<-              datasetType             datasetType<-           ##  [7] dateCreated             dateCreated<-           featureInfo             ## [10] featureInfo<-           fNames                  fNames<-                ## [13] mDataNames              mDataNames<-            molecularProfiles       ## [16] molecularProfiles<-     molecularProfilesSlot   molecularProfilesSlot<- ## [19] name                    name<-                  pertNumber              ## [22] pertNumber<-            phenoInfo               phenoInfo<-             ## [25] sampleInfo              sampleInfo<-            sampleNames             ## [28] sampleNames<-           sensitivityInfo         sensitivityInfo<-       ## [31] sensitivityMeasures     sensitivityMeasures<-   sensitivityProfiles     ## [34] sensitivityProfiles<-   sensitivityRaw          sensitivityRaw<-        ## [37] sensNumber              sensNumber<-            show                    ## [40] subsetByFeature         subsetBySample          subsetByTreatment       ## [43] treatmentInfo           treatmentInfo<-         treatmentNames          ## [46] treatmentNames<-        treatmentResponse       treatmentResponse<-     ## [49] updateObject            ## see '?methods' for accessing help and source code data(clevelandSmall_cSet) clevelandSmall_cSet ## <CoreSet> ## Name: Cleveland  ## Date Created: Sat Feb 18 15:10:56 2023  ## Number of samples:  10  ## Molecular profiles: <MultiAssayExperiment>  ##    ExperimentList class object of length 2:  ##     [1] rna : SummarizedExperiment with 1000 rows and 9 columns  ##     [2] rnaseq : SummarizedExperiment with 1000 rows and 9 columns  ## Treatment response: <TreatmentResponseExperiment>  ##    dim:  9 10  ##    assays(2): sensitivity profiles  ##    rownames(9): radiation:1:1 radiation:1:2 ... radiation:8:1 radiation:10:1  ##    rowData(3): treatment1id treatment1dose replicate_id  ##    colnames(10): CHP-212 IMR-32 KP-N-S19s ... SK-N-SH SNU-245 SNU-869  ##    colData(2): sampleid rn  ##    metadata(1): experiment_metadata mProf <- molecularProfiles(clevelandSmall_cSet, \"rna\") mProf[seq_len(5), seq_len(5)] ##                 NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152 ## ENSG00000000003                                   10.280970 ## ENSG00000000005                                    3.647436 ## ENSG00000000419                                   11.883769 ## ENSG00000000457                                    7.515721 ## ENSG00000000460                                    7.808139 ##                 GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 ## ENSG00000000003                                         10.304971 ## ENSG00000000005                                          4.895494 ## ENSG00000000419                                         11.865191 ## ENSG00000000457                                          7.187144 ## ENSG00000000460                                          7.789921 ##                 BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860 ## ENSG00000000003                                    9.596987 ## ENSG00000000005                                    3.793174 ## ENSG00000000419                                   12.498285 ## ENSG00000000457                                    8.076655 ## ENSG00000000460                                    8.456691 ##                 SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474 ## ENSG00000000003                                    8.620860 ## ENSG00000000005                                    3.674918 ## ENSG00000000419                                   11.674671 ## ENSG00000000457                                    6.790332 ## ENSG00000000460                                    6.663846 ##                 WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582 ## ENSG00000000003                                    9.866551 ## ENSG00000000005                                    3.748959 ## ENSG00000000419                                   12.228260 ## ENSG00000000457                                    7.292420 ## ENSG00000000460                                    8.869378 cInfo <- sampleInfo(clevelandSmall_cSet) cInfo[seq_len(5), seq_len(5)] ##            sampleid          tissueid CellLine       Primarysite     Histology ## SK-N-FI     SK-N-FI autonomic_ganglia    SKNFI autonomic_ganglia neuroblastoma ## IMR-32       IMR-32 autonomic_ganglia    IMR32 autonomic_ganglia neuroblastoma ## SK-N-AS     SK-N-AS autonomic_ganglia    SKNAS autonomic_ganglia neuroblastoma ## CHP-212     CHP-212 autonomic_ganglia   CHP212 autonomic_ganglia neuroblastoma ## KP-N-S19s KP-N-S19s autonomic_ganglia  KPNSI9S autonomic_ganglia neuroblastoma sensProf <- sensitivityProfiles(clevelandSmall_cSet) sensProf[seq_len(5), seq_len(5)] ## [1] 1 2 3 4 5"},{"path":"/articles/coreGx.html","id":"extending-the-coreset-class","dir":"Articles","previous_headings":"CoreGx","what":"Extending the CoreSet Class","title":"CoreGx: Class and Function Abstractions for PharmacoGx, RadioGx and ToxicoGx","text":"Given CoreSet class intended extension, show examples define new class based implement new methods generics provided CoreSet class. define new class, DemoSet, additional slot, demoSlot. view available methods class well define new S4 methods . can see class extending CoreSet slots original CoreSet, plus new slot defined: demoSlot. can see methods available new class. see accessors defined CoreSet also defined inheriting DemoSet. methods assume inherit slots structure CoreSet. true, example, molecularProfiles holds ExpressionSets instead SummarizedExperiments, can redefine existing methods follows: Since changed data molecularProfiles slot DemoSet, original method CoreGx longer works. Thus get error trying access slot. fix need set new S4 method molecularProfiles generic function defined CoreGx. new method now called whenever use molecularProfiles method DemoSet. Since new method uses ExpressionSet accessor methods instead SummarizedExperiment accessor methods, now expect able access data modified slot. can see new method works! order finish updating methods new class, redefine methods access modified slot. However, additional work needs done define accessors new demoSlot. Since generics available CoreGx access slot, need first define generic, implement methods dispatch ‘DemoSet’ class retrieve data slot. Now knowledge need extend CoreSet class use treatment-response experiments! information package possibility collaborating extension please contact benjamin.haibe.kains@utoronto.ca.","code":"DemoSet <- setClass(\"DemoSet\",                     representation(demoSlot=\"character\"),                     contains=\"CoreSet\") getClass(\"DemoSet\") ## Class \"DemoSet\" [in \".GlobalEnv\"] ##  ## Slots: ##                                                                                ## Name:           demoSlot treatmentResponse        annotation molecularProfiles ## Class:         character list_OR_LongTable              list       list_OR_MAE ##                                                                                ## Name:             sample         treatment       datasetType      perturbation ## Class:        data.frame        data.frame         character              list ##                          ## Name:           curation ## Class:              list ##  ## Extends: \"CoreSet\" methods(class=\"DemoSet\") ##  [1] annotation              annotation<-            curation                ##  [4] curation<-              datasetType             datasetType<-           ##  [7] dateCreated             dateCreated<-           featureInfo             ## [10] featureInfo<-           fNames                  fNames<-                ## [13] mDataNames              mDataNames<-            molecularProfiles       ## [16] molecularProfiles<-     molecularProfilesSlot   molecularProfilesSlot<- ## [19] name                    name<-                  pertNumber              ## [22] pertNumber<-            phenoInfo               phenoInfo<-             ## [25] sampleInfo              sampleInfo<-            sampleNames             ## [28] sampleNames<-           sensitivityInfo         sensitivityInfo<-       ## [31] sensitivityMeasures     sensitivityMeasures<-   sensitivityProfiles     ## [34] sensitivityProfiles<-   sensitivityRaw          sensitivityRaw<-        ## [37] sensNumber              sensNumber<-            show                    ## [40] subsetByFeature         subsetBySample          subsetByTreatment       ## [43] treatmentInfo           treatmentInfo<-         treatmentNames          ## [46] treatmentNames<-        treatmentResponse       treatmentResponse<-     ## [49] updateObject            ## see '?methods' for accessing help and source code clevelandSmall_dSet <- DemoSet(clevelandSmall_cSet) class(clevelandSmall_dSet@molecularProfiles[['rna']]) ## [1] \"SummarizedExperiment\" ## attr(,\"package\") ## [1] \"SummarizedExperiment\" expressionSets <- lapply(molecularProfilesSlot(clevelandSmall_dSet), FUN=as,   'ExpressionSet') molecularProfilesSlot(clevelandSmall_dSet) <- expressionSets  # Now this will error tryCatch({molecularProfiles(clevelandSmall_dSet, 'rna')},          error=function(e)              print(paste(\"Error: \", e$message))) ## [1] \"Error:  unable to find an inherited method for function 'assay' for signature '\\\"ExpressionSet\\\", \\\"numeric\\\"'\" setMethod(molecularProfiles,           signature(\"DemoSet\"),           function(object, mDataType) {             pData(object@molecularProfiles[[mDataType]])           }) # Now we test our new method mProf <- molecularProfiles(clevelandSmall_dSet, 'rna') head(mProf)[seq_len(5), seq_len(5)] ##                                                                                          samplename ## NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152             NIECE_p_NCLE_RNA3_HG-U133_Plus_2_G10_296152 ## GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_G02_587654 ## BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860             BUNDS_p_NCLE_RNA5_HG-U133_Plus_2_B11_419860 ## SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474             SILOS_p_NCLE_RNA9_HG-U133_Plus_2_A04_523474 ## WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582             WATCH_p_NCLE_RNA8_HG-U133_Plus_2_B04_474582 ##                                                                                                   filename ## NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152             NIECE_p_NCLE_RNA3_HG-U133_Plus_2_G10_296152.CEL.gz ## GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_G02_587654.CEL.gz ## BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860             BUNDS_p_NCLE_RNA5_HG-U133_Plus_2_B11_419860.CEL.gz ## SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474             SILOS_p_NCLE_RNA9_HG-U133_Plus_2_A04_523474.CEL.gz ## WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582             WATCH_p_NCLE_RNA8_HG-U133_Plus_2_B04_474582.CEL.gz ##                                                         chiptype ## NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       HG-U133_Plus_2 ## GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 HG-U133_Plus_2 ## BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       HG-U133_Plus_2 ## SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       HG-U133_Plus_2 ## WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582       HG-U133_Plus_2 ##                                                   hybridization.date ## NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152                 07/15/08 ## GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654         2010-05-21 ## BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860                 12/19/08 ## SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474               2009-12-08 ## WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582               2009-08-14 ##                                                   hybridization.hour ## NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152                 12:54:10 ## GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654          16:45:06Z ## BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860                 11:43:19 ## SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474                20:44:59Z ## WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582                17:15:45Z # Define generic for setter method setGeneric('demoSlot<-', function(object, value) standardGeneric('demoSlot<-')) ## [1] \"demoSlot<-\" # Define a setter method setReplaceMethod('demoSlot',                  signature(object='DemoSet', value=\"character\"),                  function(object, value) {                    object@demoSlot <- value                    return(object)                  })  # Lets add something to our demoSlot demoSlot(clevelandSmall_dSet) <- c(\"This\", \"is\", \"the\", \"demoSlot\") # Define generic for getter method setGeneric('demoSlot', function(object, ...) standardGeneric(\"demoSlot\")) ## [1] \"demoSlot\" # Define a getter method setMethod(\"demoSlot\",           signature(\"DemoSet\"),           function(object) {             paste(object@demoSlot, collapse=\" \")           })  # Test our getter method demoSlot(clevelandSmall_dSet) ## [1] \"This is the demoSlot\""},{"path":"/articles/coreGx.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo","title":"CoreGx: Class and Function Abstractions for PharmacoGx, RadioGx and ToxicoGx","text":"","code":"sessionInfo() ## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] CoreGx_2.7.2                SummarizedExperiment_1.32.0 ##  [3] Biobase_2.62.0              GenomicRanges_1.54.1        ##  [5] GenomeInfoDb_1.38.5         IRanges_2.36.0              ##  [7] S4Vectors_0.40.2            MatrixGenerics_1.14.0       ##  [9] matrixStats_1.2.0           BiocGenerics_0.48.1         ## [11] knitr_1.45                  BiocStyle_2.30.0            ##  ## loaded via a namespace (and not attached): ##   [1] bitops_1.0-7                rlang_1.1.3                 ##   [3] magrittr_2.0.3              shinydashboard_0.7.2        ##   [5] compiler_4.3.2              systemfonts_1.0.5           ##   [7] vctrs_0.6.5                 relations_0.6-13            ##   [9] stringr_1.5.1               pkgconfig_2.0.3             ##  [11] crayon_1.5.2                fastmap_1.1.1               ##  [13] backports_1.4.1             XVector_0.42.0              ##  [15] ellipsis_0.3.2              caTools_1.18.2              ##  [17] utf8_1.2.4                  promises_1.2.1              ##  [19] rmarkdown_2.25              ragg_1.2.7                  ##  [21] purrr_1.0.2                 xfun_0.41                   ##  [23] MultiAssayExperiment_1.28.0 zlibbioc_1.48.0             ##  [25] cachem_1.0.8                jsonlite_1.8.8              ##  [27] SnowballC_0.7.1             later_1.3.2                 ##  [29] DelayedArray_0.28.0         BiocParallel_1.36.0         ##  [31] parallel_4.3.2              sets_1.0-25                 ##  [33] cluster_2.1.4               R6_2.5.1                    ##  [35] bslib_0.6.1                 stringi_1.8.3               ##  [37] limma_3.58.1                jquerylib_0.1.4             ##  [39] Rcpp_1.0.12                 bookdown_0.37               ##  [41] BiocBaseUtils_1.4.0         httpuv_1.6.13               ##  [43] Matrix_1.6-1.1              igraph_1.6.0                ##  [45] tidyselect_1.2.0            abind_1.4-5                 ##  [47] yaml_2.3.8                  gplots_3.1.3                ##  [49] codetools_0.2-19            lattice_0.21-9              ##  [51] tibble_3.2.1                shiny_1.8.0                 ##  [53] BumpyMatrix_1.10.0          evaluate_0.23               ##  [55] desc_1.4.3                  bench_1.1.3                 ##  [57] pillar_1.9.0                lsa_0.73.3                  ##  [59] BiocManager_1.30.22         KernSmooth_2.23-22          ##  [61] DT_0.31                     checkmate_2.3.1             ##  [63] shinyjs_2.1.0               piano_2.18.0                ##  [65] generics_0.1.3              RCurl_1.98-1.14             ##  [67] ggplot2_3.4.4               munsell_0.5.0               ##  [69] scales_1.3.0                gtools_3.9.5                ##  [71] xtable_1.8-4                marray_1.80.0               ##  [73] glue_1.7.0                  slam_0.1-50                 ##  [75] tools_4.3.2                 data.table_1.14.10          ##  [77] fgsea_1.28.0                visNetwork_2.1.2            ##  [79] fs_1.6.3                    fastmatch_1.1-4             ##  [81] cowplot_1.1.2               grid_4.3.2                  ##  [83] colorspace_2.1-0            GenomeInfoDbData_1.2.11     ##  [85] cli_3.6.2                   textshaping_0.3.7           ##  [87] fansi_1.0.6                 S4Arrays_1.2.0              ##  [89] dplyr_1.1.4                 gtable_0.3.4                ##  [91] sass_0.4.8                  digest_0.6.34               ##  [93] SparseArray_1.2.3           htmlwidgets_1.6.4           ##  [95] memoise_2.0.1               htmltools_0.5.7             ##  [97] pkgdown_2.0.7               lifecycle_1.0.4             ##  [99] statmod_1.5.0               mime_0.12"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Petr Smirnov. Author. Ian Smith. Author. Christopher Eeles. Author. Feifei Li. Author. Jermiah Joseph. Author. Benjamin Haibe-Kains. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"P Smirnov, Z Safikhani, N El-Hachem , D Wang, , C Olsen, M Freeman, H Selby, D Gendoo , P Grossman , Beck , H Aerts , M Lupien, Goldenberg ,B Haibe-Kains PharmacoGx: R package analysis large pharmacogenomic datasets Bioinformatics (2016).","code":"@Article{,   title = {PharmacoGx: an R package for analysis of large pharmacogenomic datasets},   author = {P Smirnov and Z Safikhani and N El-Hachem and D Wang and A She and C Olsen and M Freeman and H Selby and D Gendoo and P Grossman and A Beck and H Aerts and M Lupien and A Goldenberg ,B Haibe-Kains},   journal = {Bioinformatics (Oxford, England)},   year = {2016}, }"},{"path":"/index.html","id":"coregx","dir":"","previous_headings":"","what":"Classes and Functions to Serve as the Basis for Other Gx Packages","title":"Classes and Functions to Serve as the Basis for Other Gx Packages","text":"Abstracted classes functions inherited extended PharmacoGx, RadioGx ToxicoGx R packages. Dependencies: dependencies available CRAN Bioconductor.","code":""},{"path":"/reference/CoreGx-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"List of deprecated or defunct methods in the CoreGx R package. — CoreGx-deprecated","title":"List of deprecated or defunct methods in the CoreGx R package. — CoreGx-deprecated","text":"List deprecated defunct methods CoreGx R package.","code":""},{"path":[]},{"path":"/reference/CoreGx-deprecated.html","id":"deprecated","dir":"Reference","previous_headings":"","what":"deprecated","title":"List of deprecated or defunct methods in the CoreGx R package. — CoreGx-deprecated","text":"CoreSet: CoreSet constructor updated new API. API currently available via CoreSet2 constructor. Bioconductor 3.16, old constructor renamed CoreSet2 new constructor renamed CoreSet.","code":""},{"path":"/reference/CoreGx-deprecated.html","id":"defunct","dir":"Reference","previous_headings":"","what":"defunct","title":"List of deprecated or defunct methods in the CoreGx R package. — CoreGx-deprecated","text":"buildLongTable: function longer works building LongTable TreatmentResponseExperiment now uses DataMapper metaConstruct method. See vignette(\"LongTable\") detailed description create LongTable object.","code":""},{"path":"/reference/CoreSet-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessing and modifying information in a CoreSet — CoreSet-accessors","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"Documentation various setters getters allow manipulation data slots CoreSet object.","code":""},{"path":"/reference/CoreSet-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"","code":"# S4 method for CoreSet annotation(object)  # S4 method for CoreSet,list annotation(object) <- value  # S4 method for CoreSet dateCreated(object)  # S4 method for CoreSet,character dateCreated(object) <- value  # S4 method for CoreSet name(object)  # S4 method for CoreSet name(object) <- value  # S4 method for CoreSet sampleInfo(object)  # S4 method for CoreSet,data.frame sampleInfo(object) <- value  # S4 method for CoreSet sampleNames(object)  # S4 method for CoreSet,character sampleNames(object) <- value  # S4 method for CoreSet treatmentInfo(object)  # S4 method for CoreSet,data.frame treatmentInfo(object) <- value  # S4 method for CoreSet treatmentNames(object)  # S4 method for CoreSet,character treatmentNames(object) <- value  # S4 method for CoreSet curation(object)  # S4 method for CoreSet,list curation(object) <- value  # S4 method for CoreSet datasetType(object)  # S4 method for CoreSet,character datasetType(object) <- value  # S4 method for CoreSet molecularProfiles(object, mDataType, assay)  # S4 method for CoreSet,character,character,matrix molecularProfiles(object, mDataType, assay) <- value  # S4 method for CoreSet,character,missing,matrix molecularProfiles(object, mDataType, assay) <- value  # S4 method for CoreSet,missing,missing,list_OR_MAE molecularProfiles(object, mDataType, assay) <- value  # S4 method for CoreSet featureInfo(object, mDataType)  # S4 method for CoreSet,character,data.frame featureInfo(object, mDataType) <- value  # S4 method for CoreSet,character phenoInfo(object, mDataType)  # S4 method for CoreSet,character,data.frame phenoInfo(object, mDataType) <- value  # S4 method for CoreSet,character fNames(object, mDataType)  # S4 method for CoreSet,character,character fNames(object, mDataType) <- value  # S4 method for CoreSet mDataNames(object)  # S4 method for CoreSet mDataNames(object) <- value  # S4 method for CoreSet molecularProfilesSlot(object)  # S4 method for CoreSet,list_OR_MAE molecularProfilesSlot(object) <- value  # S4 method for CoreSet sensitivityInfo(object, dimension, ...)  # S4 method for CoreSet,data.frame sensitivityInfo(object, dimension, ...) <- value  # S4 method for CoreSet sensitivityMeasures(object)  # S4 method for CoreSet,character sensitivityMeasures(object) <- value  # S4 method for CoreSet sensitivityProfiles(object)  # S4 method for CoreSet,data.frame sensitivityProfiles(object) <- value  # S4 method for CoreSet sensitivityRaw(object)  # S4 method for CoreSet,array sensitivityRaw(object) <- value  # S4 method for CoreSet treatmentResponse(object)  # S4 method for CoreSet,list_OR_LongTable treatmentResponse(object) <- value  # S4 method for CoreSet sensNumber(object)  # S4 method for CoreSet,matrix sensNumber(object) <- value  # S4 method for CoreSet pertNumber(object)  # S4 method for CoreSet,array pertNumber(object) <- value"},{"path":"/reference/CoreSet-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"object CoreSet object. value See details. mDataType character(1) name molecular datatype access molecularProfiles CoreSet object. assay character(1) valid assay name SummarizedExperiment @molecularProfiles CoreSet object data type mDataType. dimension See details. ... See details.","code":""},{"path":"/reference/CoreSet-accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"Accessors: See details. Setters: updated CoreSet object, returned invisibly.","code":""},{"path":"/reference/CoreSet-accessors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"annotation<-: Setter method annotation slot. Arguments: value: list annotations update CoreSet . dateCreated<-: Update 'dateCreated' item annotation slot CoreSet object. Arguments: value: character(1) vector, returned date() function. name: character(1) name CoreSet, retreived @annotation slot. name<-: Update @annotation$name value CoreSet  object. value: character(1) name CoreSet object. cellInfo: data.frame Metadata sample CoreSet object. sampleInfo<-: assign updated sample annotations CoreSet object. Arguments: value: data.frame object. sampleNames: character Retrieve rownames data.frame sample slot CoreSet object. sampleNames<-: assign new rownames sampleInfo data.frame CoreSet object. Arguments: value: character vector rownames sampleInfo(object) data.frame. treatmentInfo: data.frame Metadata treatments CoreSet object. Arguments: object: CoreSet object retrieve treatment metadata . treatmentInfo<-: CoreSet object updated treatment metadata. object. Arguments: object: CoreSet object set treatment metadata . value: data.frame new table treatment metadata object. treatmentNames: character Names treatments CoreSet object. Arguments: object: CoreSet object retrieve treatment names . treatmentNames<-: CoreSet Object updates treatment names. object. Arguments: object: CoreSet object set treatment names . value: character character vector updated treatment names. curation<-: Update curation slot CoreSet object. Arugments: value: list data.frames, one type curated identifier. CoreSet object slot contain tissue sample id data.frames. datasetType<-: Update datasetType slot CoreSet object. Arguments: value: character(1) vector one 'sensitivity', 'perturbation' '' molecularProfiles<-: Update assay SummarizedExperiment molecularProfiles slot CoreSet object specified mDataType. Valid mDataType arguments can found mDataNames(object). Omit mDataType assay update slot. assay: Optional character(1) vector specifying assay SummarizedExperiment molecularProfiles slot CoreSet object specified mDataType. excluded, defaults modifying first assay SummarizedExperiment given mDataType. value: matrix values assign assay slot SummarizedExperiment selected mDataType. rownames column names must match associated SummarizedExperiment. featureInfo: Retrieve DataFrame feature metadata specified mDataType molecularProfiles slot CoreSet object. specifically, retrieve @rowData slot SummarizedExperiment @molecularProfiles CoreSet object name mDataType. featureInfo<-: Update featureInfo(object, mDataType) DataFrame new feature metadata. Arguments: value: data.frame DataFrame updated feature metadata specified molecular profile molecularProfiles slot CoreSet object. phenoInfo: Return @colData slot SummarizedExperiment mDataType, containing sample-level metadata, CoreSet object. phenoInfo<-: Update @colData slot SummarizedExperiment mDataType @molecularProfiles slot CoreSet object. updates sample-level metadata -place. value: data.frame DataFrame object rows samples columns sample metadata. fNames: character() features names rowData slot SummarizedExperiment mDataType within CoreSet object. fNames: Updates rownames feature metadata (.e., rowData) SummarizedExperiment mDataType within CoreSet object. value: character() character vector new features names rowData SummarizedExperiment mDataType @molecularProfiles slot CoreSet object. Must length nrow(featureInfo(object, mDataType)), number rows feature metadata. mDataNames: character Retrieve names molecular data types available molecularProfiles slot CoreSet object. options can used mDataType parameter various molecularProfiles slot accessors methods. mDataNames: Update molecular data type names molecularProfiles slot CoreSet object. Arguments: value: character vector molecular datatype names, length equal length(molecularProfilesSlot(object)). molecularProfilesSlot: Return contents @molecularProfiles slot CoreSet object. either list MultiAssayExperiment SummarizedExperiments. molecularProfilesSlot<-: Update contents @molecularProfiles slot CoreSet object. Arguemnts: value: list MultiAssayExperiment SummarizedExperiments. list assays named molecular datatype SummarizedExperiment. sensitivityInfo<-: Update @treatmentResponse slot metadata CoreSet object. used without dimension argument behaves similar old CoreSet implementation, @treatmentResponse slot contained list $info data.frame item. dimension arugment used, complicated assignments can occur 'sample' modifies @sensitvity LongTable colData, 'treatment' rowData 'assay' 'assay_metadata' assay. Arguments: value: data.frame treatment response experiment metadata, documenting experiment level metadata (mapping treatments samples). @treatmentResponse slot contain LongTable dimension specified, can modify existing columns returned sensitivityInfo(object). sensitivityMeaures: Get 'sensitivityMeasures' available CoreSet object. measure reprents summary sample sensitivity given treatment, ic50, ec50, AUC, AAC, etc. results returned character vector available metrics PSet object. sensitivityMeaures: Update sensitivity meaure CoreSet object. Thesee values column names 'profiles' assay represent various compued sensitviity metrics ic50, ec50, AUC, AAC, etc. value: character vector new sensitivity measure names, length character vector must matcht number columns 'profiles' assay, excluding metadata key columns. sensitivityProfiles: Return sensitivity profile summaries sensitivity slot. data.frame cotanins vaarious sensitivity summary metrics, ic50, amax, EC50, aac, HS, etc columns, rows treatment sample experiments. sensitivityProfiles<-: Update sensitivity profile summaries sensitivity slot. Arguments: -value: data.frame number rows returned sensitivityProfiles(object), potentially modified columns, computation additional summary metrics. sensitivityRaw: Access raw sensitiity measurents CoreSet object. 3D array rows experiment_ids, columns doses third dimension metric, either 'Dose' doses used 'Viability' sample viability dose. sensitvityRaw<-: Update raw dose viability data CoreSet. value: 3D array object rows experiment_ids, columns replicates pages c('Dose', 'Viability'), corresponding dose viability measurement experiment_id replicate. sensNumber: Return count viability observations CoreSet object treatment-combo sample combination. sensNumber<-: Update 'n' item, holds matrix count treatment sample-line experiment counts, list @treatmentResponse slot CoreSet object. error @sensitviity contains LongTable object, since counts computed fly. Arguments: value: matrix rows samples columns treatments, count number experiments combination values. pertNumber: array Summary available perturbation experiments CoreSet object. Returns 3D array number perturbation experiments per treatment sample, data type. pertNumber<-: Update @perturbation$n value CoreSet object, stores summary available perturbation experiments. Arguments: value: new 3D array number perturbation experiments per treatment sample, data type","code":""},{"path":"/reference/CoreSet-accessors.html","id":"-annotation","dir":"Reference","previous_headings":"","what":"@annotation","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"annotation: list CoreSet annotations items: 'name', name object; 'dateCreated', date object created; 'sessionInfo', sessionInfo() object created; 'call', R constructor call; 'version', object version.","code":""},{"path":"/reference/CoreSet-accessors.html","id":"-datecreated","dir":"Reference","previous_headings":"","what":"@dateCreated","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"dateCreated: character(1) date CoreSet object created, returned date() function.","code":""},{"path":"/reference/CoreSet-accessors.html","id":"-curation","dir":"Reference","previous_headings":"","what":"@curation","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"curation: list curated mappings identifiers CoreSet object original data publication. Contains two data.frames, 'sample' sample ids 'tissue' tissue ids.","code":""},{"path":"/reference/CoreSet-accessors.html","id":"datasettype-slot","dir":"Reference","previous_headings":"","what":"datasetType slot","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"datasetType: character(1) type treatment response sensitivity slot. Valid values 'sensitivity', 'perturbation' ''.","code":""},{"path":"/reference/CoreSet-accessors.html","id":"-molecularprofiles","dir":"Reference","previous_headings":"","what":"@molecularProfiles","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"molecularProfiles: matrix() Retrieve assay SummarizedExperiment molecularProfiles slot CoreSet object specified mDataType. Valid mDataType arguments can found mDataNames(object). Exclude mDataType assay access entire slot. Arguments: assay: Optional character(1) vector specifying assay SummarizedExperiment molecularProfiles slot CoreSet object specified mDataType. excluded, defaults modifying first assay SummarizedExperiment given mDataType.","code":""},{"path":[]},{"path":"/reference/CoreSet-accessors.html","id":"arguments-","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"dimension: Optional character(1) One 'treatment', 'sample' 'assay' retrieve rowData, colData 'assay_metadata' assay CoreSet @sensitvity LongTable object, respectively. Ignored warning @treatmentResponse LongTable object. ...: Additional arguments rowData colData. LongTable methods. used sensitivity slot contains LongTable object instead list dimension argument specified.","code":""},{"path":"/reference/CoreSet-accessors.html","id":"methods-","dir":"Reference","previous_headings":"","what":"Methods:","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"sensitivityInfo: DataFrame data.frame sensitivity treatment combo sample metadata CoreSet object. dimension parameter used, allows retrieval dimension specific metadata LongTable object @treatmentResponse CoreSet object.","code":""},{"path":"/reference/CoreSet-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessing and modifying information in a CoreSet — CoreSet-accessors","text":"","code":"data(clevelandSmall_cSet)  ## @annotation  annotation(clevelandSmall_cSet) #> $name #> [1] \"Cleveland\" #>  #> $dateCreated #> [1] \"Sat Feb 18 15:10:56 2023\" #>  #> $sessionInfo #> R Under development (unstable) (2023-02-17 r83862) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: America/New_York #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] CoreGx_2.3.1                testthat_3.1.6              #>  [3] SummarizedExperiment_1.28.0 Biobase_2.58.0              #>  [5] GenomicRanges_1.50.2        GenomeInfoDb_1.34.9         #>  [7] IRanges_2.32.0              S4Vectors_0.36.1            #>  [9] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [11] BiocGenerics_0.44.0         #>  #> loaded via a namespace (and not attached): #>   [1] rstudioapi_0.14             jsonlite_1.8.4              #>   [3] MultiAssayExperiment_1.24.0 magrittr_2.0.3              #>   [5] fs_1.6.1                    zlibbioc_1.44.0             #>   [7] vctrs_0.5.2                 memoise_2.0.1               #>   [9] RCurl_1.98-1.10             htmltools_0.5.4             #>  [11] BiocBaseUtils_1.0.0         usethis_2.1.6               #>  [13] curl_5.0.0                  KernSmooth_2.23-20          #>  [15] htmlwidgets_1.6.1           desc_1.4.2                  #>  [17] cachem_1.0.6                commonmark_1.8.1            #>  [19] igraph_1.4.0                mime_0.12                   #>  [21] lifecycle_1.0.3             piano_2.14.0                #>  [23] pkgconfig_2.0.3             Matrix_1.5-3                #>  [25] R6_2.5.1                    fastmap_1.1.0               #>  [27] rcmdcheck_1.4.0             GenomeInfoDbData_1.2.9      #>  [29] shiny_1.7.4                 digest_0.6.31               #>  [31] colorspace_2.1-0            ps_1.7.2                    #>  [33] rprojroot_2.0.3             pkgload_1.3.2               #>  [35] SnowballC_0.7.0             fansi_1.0.4                 #>  [37] compiler_4.3.0              remotes_2.4.2               #>  [39] withr_2.5.0                 marray_1.76.0               #>  [41] backports_1.4.1             BiocParallel_1.32.5         #>  [43] bench_1.1.2                 pak_0.4.0                   #>  [45] pkgbuild_1.4.0              gplots_3.1.3                #>  [47] DelayedArray_0.24.0         sessioninfo_1.2.2           #>  [49] gtools_3.9.4                caTools_1.18.2              #>  [51] tools_4.3.0                 httpuv_1.6.9                #>  [53] relations_0.6-12            glue_1.6.2                  #>  [55] callr_3.7.3                 promises_1.2.0.1            #>  [57] grid_4.3.0                  checkmate_2.1.0             #>  [59] cluster_2.1.4               fgsea_1.24.0                #>  [61] generics_0.1.3              gtable_0.3.1                #>  [63] data.table_1.14.8           xml2_1.3.3                  #>  [65] utf8_1.2.3                  XVector_0.38.0              #>  [67] pillar_1.8.1                stringr_1.5.0               #>  [69] limma_3.54.1                BumpyMatrix_1.6.0           #>  [71] later_1.3.0                 dplyr_1.1.0                 #>  [73] lattice_0.20-45             tidyselect_1.2.0            #>  [75] miniUI_0.1.1.1              knitr_1.42                  #>  [77] xfun_0.37                   shinydashboard_0.7.2        #>  [79] devtools_2.4.5              brio_1.1.3                  #>  [81] DT_0.27                     visNetwork_2.1.2            #>  [83] stringi_1.7.12              xopen_1.0.0                 #>  [85] codetools_0.2-19            lsa_0.73.3                  #>  [87] tibble_3.1.8                cli_3.6.0                   #>  [89] xtable_1.8-4                munsell_0.5.0               #>  [91] processx_3.8.0              roxygen2_7.2.3              #>  [93] Rcpp_1.0.10                 parallel_4.3.0              #>  [95] sets_1.0-22                 ellipsis_0.3.2              #>  [97] ggplot2_3.4.1               prettyunits_1.1.1           #>  [99] profvis_0.3.7               urlchecker_1.0.1            #> [101] bitops_1.0-7                slam_0.1-50                 #> [103] scales_1.2.1                purrr_1.0.1                 #> [105] crayon_1.5.2                rlang_1.0.6                 #> [107] cowplot_1.1.1               fastmatch_1.1-3             #> [109] shinyjs_2.1.0               #>  #> $call #> CoreSet2(name = name(cs), treatment = treatmentInfo(cs), sample = sampleInfo(cs),  #>     molecularProfiles = molecularProfiles(cs), treatmentResponse = as(treatmentResponse(cs),  #>         \"TreatmentResponseExperiment\"), curation = cur) #>   annotation(clevelandSmall_cSet) <- annotation(clevelandSmall_cSet)  dateCreated(clevelandSmall_cSet) #> [1] \"Sat Feb 18 15:10:56 2023\"  ## dateCreated dateCreated(clevelandSmall_cSet) <- date()  name(clevelandSmall_cSet) #> [1] \"Cleveland\"  name(clevelandSmall_cSet) <- 'new_name'  sampleInfo(clevelandSmall_cSet) <- sampleInfo(clevelandSmall_cSet)  sampleNames(clevelandSmall_cSet) #>  [1] \"SK-N-FI\"   \"IMR-32\"    \"SK-N-AS\"   \"CHP-212\"   \"KP-N-S19s\" \"MHH-NB-11\" #>  [7] \"SK-N-SH\"   \"NB1\"       \"SNU-245\"   \"SNU-869\"    sampleNames(clevelandSmall_cSet) <- sampleNames(clevelandSmall_cSet) #> Warning:  #> [CoreGx::assay] Cannot use key=TRUE when summarize=TRUE. Ignoring the key argument. #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames]  treatmentInfo(clevelandSmall_cSet) #> data frame with 0 columns and 0 rows  treatmentInfo(clevelandSmall_cSet) <- treatmentInfo(clevelandSmall_cSet)  treatmentNames(clevelandSmall_cSet) #> character(0)  treatmentNames(clevelandSmall_cSet) <- treatmentNames(clevelandSmall_cSet) #> No treatments in this object! Returning without modification.  ## curation curation(clevelandSmall_cSet) #> $sample #>              sample  tissue #> SK-N-FI     SK-N-FI   SKNFI #> IMR-32       IMR-32   IMR32 #> SK-N-AS     SK-N-AS   SKNAS #> CHP-212     CHP-212  CHP212 #> KP-N-S19s KP-N-S19s KPNSI9S #> MHH-NB-11 MHH-NB-11 MHHNB11 #> SK-N-SH     SK-N-SH   SKNSH #> NB1             NB1     NB1 #> SNU-245     SNU-245  SNU245 #> SNU-869     SNU-869  SNU869 #>  #> $tissue #>             unique.tissueid Cleveland.tissueid #> SK-N-FI   autonomic_ganglia  autonomic_ganglia #> IMR-32    autonomic_ganglia  autonomic_ganglia #> SK-N-AS   autonomic_ganglia  autonomic_ganglia #> CHP-212   autonomic_ganglia  autonomic_ganglia #> KP-N-S19s autonomic_ganglia  autonomic_ganglia #> MHH-NB-11 autonomic_ganglia  autonomic_ganglia #> SK-N-SH   autonomic_ganglia  autonomic_ganglia #> NB1       autonomic_ganglia  autonomic_ganglia #> SNU-245       biliary_tract      biliary_tract #> SNU-869            pancreas      biliary_tract #>  #> $treatment #> data frame with 0 columns and 0 rows #>   curation(clevelandSmall_cSet) <- curation(clevelandSmall_cSet)  datasetType(clevelandSmall_cSet) #> [1] \"sensitivity\"  datasetType(clevelandSmall_cSet) <- 'both'  # No assay specified molecularProfiles(clevelandSmall_cSet, 'rna') <- molecularProfiles(clevelandSmall_cSet, 'rna')  # Specific assay molecularProfiles(clevelandSmall_cSet, 'rna', 'exprs') <-     molecularProfiles(clevelandSmall_cSet, 'rna', 'exprs')  # Replace the whole slot molecularProfiles(clevelandSmall_cSet) <- molecularProfiles(clevelandSmall_cSet)  featureInfo(clevelandSmall_cSet, 'rna') #> DataFrame with 1000 rows and 8 columns #>                              Probe   EnsemblGeneId EntrezGeneId      Symbol #>                        <character>     <character>    <integer> <character> #> ENSG00000000003 ENSG00000000003_at ENSG00000000003         7105      TSPAN6 #> ENSG00000000005 ENSG00000000005_at ENSG00000000005        64102        TNMD #> ENSG00000000419 ENSG00000000419_at ENSG00000000419         8813        DPM1 #> ENSG00000000457 ENSG00000000457_at ENSG00000000457        57147       SCYL3 #> ENSG00000000460 ENSG00000000460_at ENSG00000000460        55732    C1orf112 #> ...                            ...             ...          ...         ... #> ENSG00000068308 ENSG00000068308_at ENSG00000068308        55593       OTUD5 #> ENSG00000068323 ENSG00000068323_at ENSG00000068323         7030        TFE3 #> ENSG00000068354 ENSG00000068354_at ENSG00000068354         4943     TBC1D25 #> ENSG00000068383 ENSG00000068383_at ENSG00000068383         3632      INPP5A #> ENSG00000068394 ENSG00000068394_at ENSG00000068394        27238       GPKOW #>                    GeneBioType      BEST        rownames      rownames.1 #>                    <character> <logical>     <character>     <character> #> ENSG00000000003 protein_coding      TRUE ENSG00000000003 ENSG00000000003 #> ENSG00000000005 protein_coding      TRUE ENSG00000000005 ENSG00000000005 #> ENSG00000000419 protein_coding      TRUE ENSG00000000419 ENSG00000000419 #> ENSG00000000457 protein_coding      TRUE ENSG00000000457 ENSG00000000457 #> ENSG00000000460 protein_coding      TRUE ENSG00000000460 ENSG00000000460 #> ...                        ...       ...             ...             ... #> ENSG00000068308 protein_coding      TRUE ENSG00000068308 ENSG00000068308 #> ENSG00000068323 protein_coding      TRUE ENSG00000068323 ENSG00000068323 #> ENSG00000068354 protein_coding      TRUE ENSG00000068354 ENSG00000068354 #> ENSG00000068383 protein_coding      TRUE ENSG00000068383 ENSG00000068383 #> ENSG00000068394 protein_coding      TRUE ENSG00000068394 ENSG00000068394  featureInfo(clevelandSmall_cSet, 'rna') <- featureInfo(clevelandSmall_cSet, 'rna')  phenoInfo(clevelandSmall_cSet, 'rna') #> DataFrame with 9 rows and 24 columns #>                                                               samplename #>                                                              <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       NIECE_p_NCLE_RNA3_HG.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 GILDS_p_NCLE_RNA11_R.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       BUNDS_p_NCLE_RNA5_HG.. #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       SILOS_p_NCLE_RNA9_HG.. #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582       WATCH_p_NCLE_RNA8_HG.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634       CASED_p_NCLE_RNA4_HG.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638       CASED_p_NCLE_RNA4_HG.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       BUNDS_p_NCLE_RNA5_HG.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 GILDS_p_NCLE_RNA11_R.. #>                                                                 filename #>                                                              <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       NIECE_p_NCLE_RNA3_HG.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 GILDS_p_NCLE_RNA11_R.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       BUNDS_p_NCLE_RNA5_HG.. #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       SILOS_p_NCLE_RNA9_HG.. #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582       WATCH_p_NCLE_RNA8_HG.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634       CASED_p_NCLE_RNA4_HG.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638       CASED_p_NCLE_RNA4_HG.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       BUNDS_p_NCLE_RNA5_HG.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 GILDS_p_NCLE_RNA11_R.. #>                                                         chiptype #>                                                      <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       HG-U133_Plus_2 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 HG-U133_Plus_2 #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       HG-U133_Plus_2 #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       HG-U133_Plus_2 #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582       HG-U133_Plus_2 #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634       HG-U133_Plus_2 #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638       HG-U133_Plus_2 #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       HG-U133_Plus_2 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 HG-U133_Plus_2 #>                                                   hybridization.date #>                                                          <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152                 07/15/08 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654         2010-05-21 #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860                 12/19/08 #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474               2009-12-08 #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582               2009-08-14 #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634                 10/29/08 #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638                 10/29/08 #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790                 12/19/08 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588         2010-05-21 #>                                                   hybridization.hour #>                                                          <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152                 12:54:10 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654          16:45:06Z #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860                 11:43:19 #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474                20:44:59Z #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582                17:15:45Z #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634                 07:52:47 #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638                 08:04:03 #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790                 11:30:25 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588          17:07:46Z #>                                                      file.day   file.hour #>                                                   <character> <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152        2008-07-24    14:23:47 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654  2010-05-26    16:35:21 #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860        2009-01-07    13:06:03 #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474        2009-12-11    14:20:50 #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582        2009-08-19    16:16:45 #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634        2008-11-04    14:19:49 #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638        2008-11-04    14:19:49 #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790        2009-01-07    13:05:45 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588  2010-05-26    16:35:08 #>                                                       batch    sampleid #>                                                   <logical> <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152              NA     CHP-212 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654        NA      IMR-32 #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860              NA   KP-N-S19s #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474              NA   MHH-NB-11 #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582              NA         NB1 #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634              NA     SK-N-AS #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638              NA     SK-N-FI #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790              NA     SK-N-SH #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588        NA     SNU-245 #>                                                                CCLE.name #>                                                              <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       CHP212_AUTONOMIC_GAN.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 IMR32_AUTONOMIC_GANG.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       KPNSI9S_AUTONOMIC_GA.. #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       MHHNB11_AUTONOMIC_GA.. #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582        NB1_AUTONOMIC_GANGLIA #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634       SKNAS_AUTONOMIC_GANG.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638       SKNFI_AUTONOMIC_GANG.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       SKNSH_AUTONOMIC_GANG.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588   SNU245_BILIARY_TRACT #>                                                   Cell.line.primary.name #>                                                              <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152                      CHP-212 #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654                 IMR-32 #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860                    KP-N-SI9s #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474                    MHH-NB-11 #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582                         NB-1 #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634                      SK-N-AS #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638                      SK-N-FI #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790                      SK-N-SH #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588                SNU-245 #>                                                   Cell.line.aliases      Gender #>                                                         <character> <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152                      NA          NA #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654                NA           M #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860               KP-N-S19s           M #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474                      NA           M #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582                      NA           M #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634                      NA           F #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638                 SK-N-F1           M #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790                      NA           F #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588       NCI-SNU-245          NA #>                                                        Site.Primary #>                                                         <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       autonomic_ganglia #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 autonomic_ganglia #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       autonomic_ganglia #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       autonomic_ganglia #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582       autonomic_ganglia #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634       autonomic_ganglia #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638       autonomic_ganglia #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       autonomic_ganglia #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588     biliary_tract #>                                                       Histology Hist.Subtype1 #>                                                     <character>   <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       neuroblastoma            NS #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 neuroblastoma            NS #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       neuroblastoma            NS #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       neuroblastoma            NS #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582       neuroblastoma            NS #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634       neuroblastoma            NS #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638       neuroblastoma            NS #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       neuroblastoma            NS #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588     carcinoma            NS #>                                                                    Notes #>                                                              <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152                           NA #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654                     NA #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860                           NA #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474                           NA #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582                           NA #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634                           NA #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638                           NA #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       Identical lines: SH-.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588                     NA #>                                                        Source #>                                                   <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152              ATCC #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654        ATCC #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860             HSRRB #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474              DSMZ #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582             HSRRB #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634              ATCC #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638              ATCC #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790              ATCC #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588        KCLB #>                                                        Expression.arrays #>                                                              <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       NIECE_p_NCLE_RNA3_HG.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 GILDS_p_NCLE_RNA11_R.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       BUNDS_p_NCLE_RNA5_HG.. #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       SILOS_p_NCLE_RNA9_HG.. #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582       WATCH_p_NCLE_RNA8_HG.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634       CASED_p_NCLE_RNA4_HG.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638       CASED_p_NCLE_RNA4_HG.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       BUNDS_p_NCLE_RNA5_HG.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 GILDS_p_NCLE_RNA11_R.. #>                                                               SNP.arrays #>                                                              <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       FASTS_p_NCLE_DNAAffy.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 LOBBY_p_NCLE_DNAAffy.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       FIEFS_p_NCLE_DNA_Aff.. #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       AWASH_p_NCLE_DNAAffy.. #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582       AWASH_p_NCLE_DNAAffy.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634       FIEFS_p_NCLE_DNA_Aff.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638       FIEFS_p_NCLE_DNA_Aff.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       BOWER_p_NCLE_DNAAffy.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 QUAFF_p_NCLE_DNAAffy.. #>                                                       Oncomap #>                                                   <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152               yes #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654         yes #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860               yes #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474               yes #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582               yes #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634               yes #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638               yes #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790               yes #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588         yes #>                                                   Hybrid.Capture.Sequencing #>                                                                 <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152                             yes #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654                       yes #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860                             yes #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474                             yes #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582                             yes #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634                             yes #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638                             yes #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790                             yes #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588                       yes #>                                                     batchid #>                                                   <logical> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152              NA #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654        NA #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860              NA #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474              NA #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582              NA #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634              NA #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638              NA #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790              NA #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588        NA #>                                                                 rownames #>                                                              <character> #> NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152       NIECE_P_NCLE_RNA3_HG.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 GILDS_P_NCLE_RNA11_R.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860       BUNDS_P_NCLE_RNA5_HG.. #> SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474       SILOS_P_NCLE_RNA9_HG.. #> WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582       WATCH_P_NCLE_RNA8_HG.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634       CASED_P_NCLE_RNA4_HG.. #> CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638       CASED_P_NCLE_RNA4_HG.. #> BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790       BUNDS_P_NCLE_RNA5_HG.. #> GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 GILDS_P_NCLE_RNA11_R..  phenoInfo(clevelandSmall_cSet, 'rna') <- phenoInfo(clevelandSmall_cSet, 'rna')  fNames(clevelandSmall_cSet, 'rna') #>    [1] \"ENSG00000000003\" \"ENSG00000000005\" \"ENSG00000000419\" \"ENSG00000000457\" #>    [5] \"ENSG00000000460\" \"ENSG00000000938\" \"ENSG00000000971\" \"ENSG00000001036\" #>    [9] \"ENSG00000001084\" \"ENSG00000001167\" \"ENSG00000001460\" \"ENSG00000001461\" #>   [13] \"ENSG00000001497\" \"ENSG00000001561\" \"ENSG00000001617\" \"ENSG00000001626\" #>   [17] \"ENSG00000001629\" \"ENSG00000001631\" \"ENSG00000002016\" \"ENSG00000002079\" #>   [21] \"ENSG00000002330\" \"ENSG00000002549\" \"ENSG00000002586\" \"ENSG00000002587\" #>   [25] \"ENSG00000002726\" \"ENSG00000002745\" \"ENSG00000002746\" \"ENSG00000002822\" #>   [29] \"ENSG00000002834\" \"ENSG00000002919\" \"ENSG00000002933\" \"ENSG00000003056\" #>   [33] \"ENSG00000003096\" \"ENSG00000003137\" \"ENSG00000003147\" \"ENSG00000003249\" #>   [37] \"ENSG00000003393\" \"ENSG00000003400\" \"ENSG00000003402\" \"ENSG00000003436\" #>   [41] \"ENSG00000003509\" \"ENSG00000003756\" \"ENSG00000003987\" \"ENSG00000003989\" #>   [45] \"ENSG00000004059\" \"ENSG00000004139\" \"ENSG00000004142\" \"ENSG00000004399\" #>   [49] \"ENSG00000004455\" \"ENSG00000004468\" \"ENSG00000004478\" \"ENSG00000004487\" #>   [53] \"ENSG00000004534\" \"ENSG00000004660\" \"ENSG00000004700\" \"ENSG00000004766\" #>   [57] \"ENSG00000004776\" \"ENSG00000004777\" \"ENSG00000004779\" \"ENSG00000004799\" #>   [61] \"ENSG00000004809\" \"ENSG00000004838\" \"ENSG00000004846\" \"ENSG00000004848\" #>   [65] \"ENSG00000004864\" \"ENSG00000004866\" \"ENSG00000004897\" \"ENSG00000004939\" #>   [69] \"ENSG00000004948\" \"ENSG00000004961\" \"ENSG00000004975\" \"ENSG00000005001\" #>   [73] \"ENSG00000005007\" \"ENSG00000005020\" \"ENSG00000005022\" \"ENSG00000005059\" #>   [77] \"ENSG00000005073\" \"ENSG00000005075\" \"ENSG00000005102\" \"ENSG00000005108\" #>   [81] \"ENSG00000005156\" \"ENSG00000005175\" \"ENSG00000005187\" \"ENSG00000005189\" #>   [85] \"ENSG00000005194\" \"ENSG00000005206\" \"ENSG00000005238\" \"ENSG00000005243\" #>   [89] \"ENSG00000005249\" \"ENSG00000005302\" \"ENSG00000005339\" \"ENSG00000005379\" #>   [93] \"ENSG00000005381\" \"ENSG00000005421\" \"ENSG00000005436\" \"ENSG00000005448\" #>   [97] \"ENSG00000005469\" \"ENSG00000005471\" \"ENSG00000005483\" \"ENSG00000005486\" #>  [101] \"ENSG00000005513\" \"ENSG00000005700\" \"ENSG00000005801\" \"ENSG00000005810\" #>  [105] \"ENSG00000005812\" \"ENSG00000005844\" \"ENSG00000005882\" \"ENSG00000005884\" #>  [109] \"ENSG00000005889\" \"ENSG00000005893\" \"ENSG00000005961\" \"ENSG00000005981\" #>  [113] \"ENSG00000006007\" \"ENSG00000006015\" \"ENSG00000006016\" \"ENSG00000006025\" #>  [117] \"ENSG00000006042\" \"ENSG00000006047\" \"ENSG00000006062\" \"ENSG00000006071\" #>  [121] \"ENSG00000006116\" \"ENSG00000006118\" \"ENSG00000006128\" \"ENSG00000006194\" #>  [125] \"ENSG00000006210\" \"ENSG00000006282\" \"ENSG00000006283\" \"ENSG00000006327\" #>  [129] \"ENSG00000006377\" \"ENSG00000006432\" \"ENSG00000006451\" \"ENSG00000006453\" #>  [133] \"ENSG00000006459\" \"ENSG00000006468\" \"ENSG00000006530\" \"ENSG00000006534\" #>  [137] \"ENSG00000006555\" \"ENSG00000006576\" \"ENSG00000006606\" \"ENSG00000006607\" #>  [141] \"ENSG00000006611\" \"ENSG00000006625\" \"ENSG00000006634\" \"ENSG00000006638\" #>  [145] \"ENSG00000006652\" \"ENSG00000006659\" \"ENSG00000006695\" \"ENSG00000006704\" #>  [149] \"ENSG00000006712\" \"ENSG00000006715\" \"ENSG00000006740\" \"ENSG00000006744\" #>  [153] \"ENSG00000006747\" \"ENSG00000006756\" \"ENSG00000006757\" \"ENSG00000006788\" #>  [157] \"ENSG00000006831\" \"ENSG00000007001\" \"ENSG00000007038\" \"ENSG00000007047\" #>  [161] \"ENSG00000007062\" \"ENSG00000007080\" \"ENSG00000007168\" \"ENSG00000007171\" #>  [165] \"ENSG00000007174\" \"ENSG00000007202\" \"ENSG00000007216\" \"ENSG00000007237\" #>  [169] \"ENSG00000007255\" \"ENSG00000007264\" \"ENSG00000007306\" \"ENSG00000007312\" #>  [173] \"ENSG00000007314\" \"ENSG00000007341\" \"ENSG00000007350\" \"ENSG00000007372\" #>  [177] \"ENSG00000007376\" \"ENSG00000007384\" \"ENSG00000007392\" \"ENSG00000007402\" #>  [181] \"ENSG00000007516\" \"ENSG00000007520\" \"ENSG00000007541\" \"ENSG00000007866\" #>  [185] \"ENSG00000007908\" \"ENSG00000007923\" \"ENSG00000007933\" \"ENSG00000007944\" #>  [189] \"ENSG00000007952\" \"ENSG00000007968\" \"ENSG00000008018\" \"ENSG00000008056\" #>  [193] \"ENSG00000008083\" \"ENSG00000008086\" \"ENSG00000008118\" \"ENSG00000008130\" #>  [197] \"ENSG00000008196\" \"ENSG00000008197\" \"ENSG00000008226\" \"ENSG00000008256\" #>  [201] \"ENSG00000008277\" \"ENSG00000008282\" \"ENSG00000008283\" \"ENSG00000008294\" #>  [205] \"ENSG00000008300\" \"ENSG00000008311\" \"ENSG00000008323\" \"ENSG00000008324\" #>  [209] \"ENSG00000008382\" \"ENSG00000008394\" \"ENSG00000008405\" \"ENSG00000008438\" #>  [213] \"ENSG00000008441\" \"ENSG00000008513\" \"ENSG00000008516\" \"ENSG00000008517\" #>  [217] \"ENSG00000008710\" \"ENSG00000008735\" \"ENSG00000008838\" \"ENSG00000008853\" #>  [221] \"ENSG00000008869\" \"ENSG00000008952\" \"ENSG00000008988\" \"ENSG00000009307\" #>  [225] \"ENSG00000009335\" \"ENSG00000009413\" \"ENSG00000009694\" \"ENSG00000009709\" #>  [229] \"ENSG00000009724\" \"ENSG00000009765\" \"ENSG00000009780\" \"ENSG00000009790\" #>  [233] \"ENSG00000009830\" \"ENSG00000009844\" \"ENSG00000009950\" \"ENSG00000009954\" #>  [237] \"ENSG00000010017\" \"ENSG00000010030\" \"ENSG00000010072\" \"ENSG00000010165\" #>  [241] \"ENSG00000010244\" \"ENSG00000010256\" \"ENSG00000010270\" \"ENSG00000010278\" #>  [245] \"ENSG00000010292\" \"ENSG00000010295\" \"ENSG00000010310\" \"ENSG00000010318\" #>  [249] \"ENSG00000010319\" \"ENSG00000010322\" \"ENSG00000010327\" \"ENSG00000010361\" #>  [253] \"ENSG00000010379\" \"ENSG00000010404\" \"ENSG00000010438\" \"ENSG00000010539\" #>  [257] \"ENSG00000010610\" \"ENSG00000010626\" \"ENSG00000010671\" \"ENSG00000010704\" #>  [261] \"ENSG00000010803\" \"ENSG00000010810\" \"ENSG00000010818\" \"ENSG00000010932\" #>  [265] \"ENSG00000011007\" \"ENSG00000011009\" \"ENSG00000011021\" \"ENSG00000011028\" #>  [269] \"ENSG00000011083\" \"ENSG00000011105\" \"ENSG00000011114\" \"ENSG00000011132\" #>  [273] \"ENSG00000011143\" \"ENSG00000011198\" \"ENSG00000011201\" \"ENSG00000011243\" #>  [277] \"ENSG00000011258\" \"ENSG00000011260\" \"ENSG00000011275\" \"ENSG00000011295\" #>  [281] \"ENSG00000011304\" \"ENSG00000011332\" \"ENSG00000011347\" \"ENSG00000011376\" #>  [285] \"ENSG00000011405\" \"ENSG00000011422\" \"ENSG00000011426\" \"ENSG00000011451\" #>  [289] \"ENSG00000011454\" \"ENSG00000011465\" \"ENSG00000011478\" \"ENSG00000011485\" #>  [293] \"ENSG00000011523\" \"ENSG00000011566\" \"ENSG00000011590\" \"ENSG00000011600\" #>  [297] \"ENSG00000011638\" \"ENSG00000011677\" \"ENSG00000012048\" \"ENSG00000012061\" #>  [301] \"ENSG00000012124\" \"ENSG00000012171\" \"ENSG00000012174\" \"ENSG00000012211\" #>  [305] \"ENSG00000012223\" \"ENSG00000012232\" \"ENSG00000012504\" \"ENSG00000012660\" #>  [309] \"ENSG00000012779\" \"ENSG00000012817\" \"ENSG00000012822\" \"ENSG00000012963\" #>  [313] \"ENSG00000012983\" \"ENSG00000013016\" \"ENSG00000013275\" \"ENSG00000013288\" #>  [317] \"ENSG00000013293\" \"ENSG00000013297\" \"ENSG00000013306\" \"ENSG00000013364\" #>  [321] \"ENSG00000013374\" \"ENSG00000013375\" \"ENSG00000013392\" \"ENSG00000013441\" #>  [325] \"ENSG00000013503\" \"ENSG00000013523\" \"ENSG00000013561\" \"ENSG00000013563\" #>  [329] \"ENSG00000013573\" \"ENSG00000013583\" \"ENSG00000013588\" \"ENSG00000013619\" #>  [333] \"ENSG00000013725\" \"ENSG00000013810\" \"ENSG00000014123\" \"ENSG00000014138\" #>  [337] \"ENSG00000014164\" \"ENSG00000014216\" \"ENSG00000014257\" \"ENSG00000014641\" #>  [341] \"ENSG00000014824\" \"ENSG00000014914\" \"ENSG00000014919\" \"ENSG00000015133\" #>  [345] \"ENSG00000015153\" \"ENSG00000015171\" \"ENSG00000015285\" \"ENSG00000015413\" #>  [349] \"ENSG00000015475\" \"ENSG00000015479\" \"ENSG00000015520\" \"ENSG00000015532\" #>  [353] \"ENSG00000015592\" \"ENSG00000015676\" \"ENSG00000016082\" \"ENSG00000016391\" #>  [357] \"ENSG00000016402\" \"ENSG00000016490\" \"ENSG00000016602\" \"ENSG00000016864\" #>  [361] \"ENSG00000017260\" \"ENSG00000017427\" \"ENSG00000017483\" \"ENSG00000017797\" #>  [365] \"ENSG00000018189\" \"ENSG00000018236\" \"ENSG00000018280\" \"ENSG00000018408\" #>  [369] \"ENSG00000018510\" \"ENSG00000018610\" \"ENSG00000018625\" \"ENSG00000018699\" #>  [373] \"ENSG00000018869\" \"ENSG00000019102\" \"ENSG00000019144\" \"ENSG00000019169\" #>  [377] \"ENSG00000019186\" \"ENSG00000019485\" \"ENSG00000019505\" \"ENSG00000019549\" #>  [381] \"ENSG00000019582\" \"ENSG00000019991\" \"ENSG00000019995\" \"ENSG00000020129\" #>  [385] \"ENSG00000020181\" \"ENSG00000020256\" \"ENSG00000020577\" \"ENSG00000020633\" #>  [389] \"ENSG00000020922\" \"ENSG00000021300\" \"ENSG00000021355\" \"ENSG00000021461\" #>  [393] \"ENSG00000021488\" \"ENSG00000021574\" \"ENSG00000021645\" \"ENSG00000021762\" #>  [397] \"ENSG00000021776\" \"ENSG00000021826\" \"ENSG00000021852\" \"ENSG00000022267\" #>  [401] \"ENSG00000022277\" \"ENSG00000022355\" \"ENSG00000022556\" \"ENSG00000022567\" #>  [405] \"ENSG00000022840\" \"ENSG00000022976\" \"ENSG00000023041\" \"ENSG00000023171\" #>  [409] \"ENSG00000023191\" \"ENSG00000023228\" \"ENSG00000023287\" \"ENSG00000023318\" #>  [413] \"ENSG00000023330\" \"ENSG00000023445\" \"ENSG00000023516\" \"ENSG00000023572\" #>  [417] \"ENSG00000023608\" \"ENSG00000023697\" \"ENSG00000023734\" \"ENSG00000023839\" #>  [421] \"ENSG00000023892\" \"ENSG00000023902\" \"ENSG00000023909\" \"ENSG00000024048\" #>  [425] \"ENSG00000024422\" \"ENSG00000024526\" \"ENSG00000024862\" \"ENSG00000025039\" #>  [429] \"ENSG00000025156\" \"ENSG00000025293\" \"ENSG00000025423\" \"ENSG00000025434\" #>  [433] \"ENSG00000025708\" \"ENSG00000025770\" \"ENSG00000025772\" \"ENSG00000025796\" #>  [437] \"ENSG00000025800\" \"ENSG00000026025\" \"ENSG00000026103\" \"ENSG00000026508\" #>  [441] \"ENSG00000026559\" \"ENSG00000026652\" \"ENSG00000026751\" \"ENSG00000026950\" #>  [445] \"ENSG00000027001\" \"ENSG00000027075\" \"ENSG00000027644\" \"ENSG00000027697\" #>  [449] \"ENSG00000027847\" \"ENSG00000027869\" \"ENSG00000028116\" \"ENSG00000028137\" #>  [453] \"ENSG00000028203\" \"ENSG00000028277\" \"ENSG00000028310\" \"ENSG00000028528\" #>  [457] \"ENSG00000028839\" \"ENSG00000029153\" \"ENSG00000029363\" \"ENSG00000029364\" #>  [461] \"ENSG00000029534\" \"ENSG00000029559\" \"ENSG00000029639\" \"ENSG00000029725\" #>  [465] \"ENSG00000029993\" \"ENSG00000030066\" \"ENSG00000030304\" \"ENSG00000030582\" #>  [469] \"ENSG00000031003\" \"ENSG00000031081\" \"ENSG00000031691\" \"ENSG00000031698\" #>  [473] \"ENSG00000031823\" \"ENSG00000032219\" \"ENSG00000032389\" \"ENSG00000032444\" #>  [477] \"ENSG00000032742\" \"ENSG00000033011\" \"ENSG00000033030\" \"ENSG00000033050\" #>  [481] \"ENSG00000033100\" \"ENSG00000033122\" \"ENSG00000033170\" \"ENSG00000033178\" #>  [485] \"ENSG00000033327\" \"ENSG00000033627\" \"ENSG00000033800\" \"ENSG00000033867\" #>  [489] \"ENSG00000034053\" \"ENSG00000034152\" \"ENSG00000034239\" \"ENSG00000034510\" #>  [493] \"ENSG00000034533\" \"ENSG00000034677\" \"ENSG00000034693\" \"ENSG00000034713\" #>  [497] \"ENSG00000034971\" \"ENSG00000035115\" \"ENSG00000035141\" \"ENSG00000035403\" #>  [501] \"ENSG00000035499\" \"ENSG00000035664\" \"ENSG00000035681\" \"ENSG00000035687\" #>  [505] \"ENSG00000035720\" \"ENSG00000035862\" \"ENSG00000035928\" \"ENSG00000036054\" #>  [509] \"ENSG00000036257\" \"ENSG00000036448\" \"ENSG00000036530\" \"ENSG00000036549\" #>  [513] \"ENSG00000036565\" \"ENSG00000036672\" \"ENSG00000036828\" \"ENSG00000037042\" #>  [517] \"ENSG00000037280\" \"ENSG00000037474\" \"ENSG00000037637\" \"ENSG00000037749\" #>  [521] \"ENSG00000037757\" \"ENSG00000037897\" \"ENSG00000038002\" \"ENSG00000038210\" #>  [525] \"ENSG00000038219\" \"ENSG00000038274\" \"ENSG00000038295\" \"ENSG00000038382\" #>  [529] \"ENSG00000038427\" \"ENSG00000038532\" \"ENSG00000038945\" \"ENSG00000039068\" #>  [533] \"ENSG00000039123\" \"ENSG00000039139\" \"ENSG00000039319\" \"ENSG00000039523\" #>  [537] \"ENSG00000039537\" \"ENSG00000039560\" \"ENSG00000039600\" \"ENSG00000039650\" #>  [541] \"ENSG00000039987\" \"ENSG00000040199\" \"ENSG00000040275\" \"ENSG00000040341\" #>  [545] \"ENSG00000040487\" \"ENSG00000040531\" \"ENSG00000040608\" \"ENSG00000040633\" #>  [549] \"ENSG00000040731\" \"ENSG00000040933\" \"ENSG00000041353\" \"ENSG00000041357\" #>  [553] \"ENSG00000041515\" \"ENSG00000041802\" \"ENSG00000041880\" \"ENSG00000041982\" #>  [557] \"ENSG00000041988\" \"ENSG00000042062\" \"ENSG00000042088\" \"ENSG00000042286\" #>  [561] \"ENSG00000042304\" \"ENSG00000042317\" \"ENSG00000042429\" \"ENSG00000042445\" #>  [565] \"ENSG00000042493\" \"ENSG00000042753\" \"ENSG00000042781\" \"ENSG00000042813\" #>  [569] \"ENSG00000042832\" \"ENSG00000042980\" \"ENSG00000043039\" \"ENSG00000043093\" #>  [573] \"ENSG00000043143\" \"ENSG00000043355\" \"ENSG00000043462\" \"ENSG00000043514\" #>  [577] \"ENSG00000043591\" \"ENSG00000044012\" \"ENSG00000044090\" \"ENSG00000044115\" #>  [581] \"ENSG00000044446\" \"ENSG00000044459\" \"ENSG00000044524\" \"ENSG00000044574\" #>  [585] \"ENSG00000046604\" \"ENSG00000046647\" \"ENSG00000046651\" \"ENSG00000046653\" #>  [589] \"ENSG00000046774\" \"ENSG00000046889\" \"ENSG00000047056\" \"ENSG00000047188\" #>  [593] \"ENSG00000047230\" \"ENSG00000047249\" \"ENSG00000047315\" \"ENSG00000047346\" #>  [597] \"ENSG00000047365\" \"ENSG00000047410\" \"ENSG00000047457\" \"ENSG00000047578\" #>  [601] \"ENSG00000047579\" \"ENSG00000047617\" \"ENSG00000047621\" \"ENSG00000047634\" #>  [605] \"ENSG00000047644\" \"ENSG00000047648\" \"ENSG00000047662\" \"ENSG00000047849\" #>  [609] \"ENSG00000047932\" \"ENSG00000047936\" \"ENSG00000048028\" \"ENSG00000048052\" #>  [613] \"ENSG00000048140\" \"ENSG00000048162\" \"ENSG00000048342\" \"ENSG00000048392\" #>  [617] \"ENSG00000048405\" \"ENSG00000048462\" \"ENSG00000048471\" \"ENSG00000048540\" #>  [621] \"ENSG00000048544\" \"ENSG00000048545\" \"ENSG00000048649\" \"ENSG00000048707\" #>  [625] \"ENSG00000048740\" \"ENSG00000048828\" \"ENSG00000048991\" \"ENSG00000049089\" #>  [629] \"ENSG00000049130\" \"ENSG00000049167\" \"ENSG00000049192\" \"ENSG00000049239\" #>  [633] \"ENSG00000049245\" \"ENSG00000049246\" \"ENSG00000049247\" \"ENSG00000049249\" #>  [637] \"ENSG00000049283\" \"ENSG00000049323\" \"ENSG00000049540\" \"ENSG00000049541\" #>  [641] \"ENSG00000049618\" \"ENSG00000049656\" \"ENSG00000049759\" \"ENSG00000049768\" #>  [645] \"ENSG00000049769\" \"ENSG00000049860\" \"ENSG00000049883\" \"ENSG00000050030\" #>  [649] \"ENSG00000050130\" \"ENSG00000050165\" \"ENSG00000050327\" \"ENSG00000050344\" #>  [653] \"ENSG00000050393\" \"ENSG00000050405\" \"ENSG00000050426\" \"ENSG00000050438\" #>  [657] \"ENSG00000050555\" \"ENSG00000050628\" \"ENSG00000050730\" \"ENSG00000050748\" #>  [661] \"ENSG00000050767\" \"ENSG00000050820\" \"ENSG00000051009\" \"ENSG00000051108\" #>  [665] \"ENSG00000051128\" \"ENSG00000051180\" \"ENSG00000051341\" \"ENSG00000051382\" #>  [669] \"ENSG00000051523\" \"ENSG00000051620\" \"ENSG00000051825\" \"ENSG00000052126\" #>  [673] \"ENSG00000052344\" \"ENSG00000052723\" \"ENSG00000052749\" \"ENSG00000052795\" #>  [677] \"ENSG00000052802\" \"ENSG00000052841\" \"ENSG00000052850\" \"ENSG00000053108\" #>  [681] \"ENSG00000053254\" \"ENSG00000053371\" \"ENSG00000053372\" \"ENSG00000053438\" #>  [685] \"ENSG00000053501\" \"ENSG00000053524\" \"ENSG00000053702\" \"ENSG00000053747\" #>  [689] \"ENSG00000053770\" \"ENSG00000053900\" \"ENSG00000053918\" \"ENSG00000054116\" #>  [693] \"ENSG00000054118\" \"ENSG00000054179\" \"ENSG00000054267\" \"ENSG00000054277\" #>  [697] \"ENSG00000054282\" \"ENSG00000054356\" \"ENSG00000054392\" \"ENSG00000054523\" #>  [701] \"ENSG00000054598\" \"ENSG00000054611\" \"ENSG00000054654\" \"ENSG00000054690\" #>  [705] \"ENSG00000054793\" \"ENSG00000054796\" \"ENSG00000054803\" \"ENSG00000054938\" #>  [709] \"ENSG00000054965\" \"ENSG00000054967\" \"ENSG00000054983\" \"ENSG00000055044\" #>  [713] \"ENSG00000055070\" \"ENSG00000055118\" \"ENSG00000055130\" \"ENSG00000055147\" #>  [717] \"ENSG00000055163\" \"ENSG00000055208\" \"ENSG00000055211\" \"ENSG00000055332\" #>  [721] \"ENSG00000055483\" \"ENSG00000055609\" \"ENSG00000055732\" \"ENSG00000055917\" #>  [725] \"ENSG00000055950\" \"ENSG00000055955\" \"ENSG00000055957\" \"ENSG00000056050\" #>  [729] \"ENSG00000056097\" \"ENSG00000056277\" \"ENSG00000056291\" \"ENSG00000056487\" #>  [733] \"ENSG00000056558\" \"ENSG00000056586\" \"ENSG00000056736\" \"ENSG00000056972\" #>  [737] \"ENSG00000056998\" \"ENSG00000057019\" \"ENSG00000057149\" \"ENSG00000057252\" #>  [741] \"ENSG00000057294\" \"ENSG00000057468\" \"ENSG00000057593\" \"ENSG00000057608\" #>  [745] \"ENSG00000057657\" \"ENSG00000057663\" \"ENSG00000057704\" \"ENSG00000057757\" #>  [749] \"ENSG00000057935\" \"ENSG00000058056\" \"ENSG00000058063\" \"ENSG00000058085\" #>  [753] \"ENSG00000058091\" \"ENSG00000058262\" \"ENSG00000058272\" \"ENSG00000058335\" #>  [757] \"ENSG00000058404\" \"ENSG00000058453\" \"ENSG00000058600\" \"ENSG00000058668\" #>  [761] \"ENSG00000058673\" \"ENSG00000058729\" \"ENSG00000058799\" \"ENSG00000058804\" #>  [765] \"ENSG00000058866\" \"ENSG00000059122\" \"ENSG00000059145\" \"ENSG00000059377\" #>  [769] \"ENSG00000059378\" \"ENSG00000059573\" \"ENSG00000059588\" \"ENSG00000059691\" #>  [773] \"ENSG00000059728\" \"ENSG00000059758\" \"ENSG00000059804\" \"ENSG00000059915\" #>  [777] \"ENSG00000060069\" \"ENSG00000060138\" \"ENSG00000060140\" \"ENSG00000060237\" #>  [781] \"ENSG00000060303\" \"ENSG00000060339\" \"ENSG00000060491\" \"ENSG00000060558\" #>  [785] \"ENSG00000060566\" \"ENSG00000060642\" \"ENSG00000060656\" \"ENSG00000060688\" #>  [789] \"ENSG00000060709\" \"ENSG00000060718\" \"ENSG00000060749\" \"ENSG00000060762\" #>  [793] \"ENSG00000060971\" \"ENSG00000060982\" \"ENSG00000061273\" \"ENSG00000061337\" #>  [797] \"ENSG00000061455\" \"ENSG00000061492\" \"ENSG00000061656\" \"ENSG00000061676\" #>  [801] \"ENSG00000061794\" \"ENSG00000061918\" \"ENSG00000061936\" \"ENSG00000061938\" #>  [805] \"ENSG00000061987\" \"ENSG00000062038\" \"ENSG00000062096\" \"ENSG00000062194\" #>  [809] \"ENSG00000062282\" \"ENSG00000062370\" \"ENSG00000062524\" \"ENSG00000062598\" #>  [813] \"ENSG00000062650\" \"ENSG00000062716\" \"ENSG00000062725\" \"ENSG00000063015\" #>  [817] \"ENSG00000063127\" \"ENSG00000063176\" \"ENSG00000063177\" \"ENSG00000063180\" #>  [821] \"ENSG00000063241\" \"ENSG00000063244\" \"ENSG00000063245\" \"ENSG00000063322\" #>  [825] \"ENSG00000063438\" \"ENSG00000063515\" \"ENSG00000063587\" \"ENSG00000063601\" #>  [829] \"ENSG00000063660\" \"ENSG00000063761\" \"ENSG00000063854\" \"ENSG00000063978\" #>  [833] \"ENSG00000064012\" \"ENSG00000064042\" \"ENSG00000064102\" \"ENSG00000064115\" #>  [837] \"ENSG00000064195\" \"ENSG00000064199\" \"ENSG00000064201\" \"ENSG00000064205\" #>  [841] \"ENSG00000064218\" \"ENSG00000064225\" \"ENSG00000064270\" \"ENSG00000064300\" #>  [845] \"ENSG00000064309\" \"ENSG00000064313\" \"ENSG00000064393\" \"ENSG00000064419\" #>  [849] \"ENSG00000064490\" \"ENSG00000064545\" \"ENSG00000064547\" \"ENSG00000064601\" #>  [853] \"ENSG00000064607\" \"ENSG00000064651\" \"ENSG00000064652\" \"ENSG00000064655\" #>  [857] \"ENSG00000064666\" \"ENSG00000064687\" \"ENSG00000064692\" \"ENSG00000064703\" #>  [861] \"ENSG00000064726\" \"ENSG00000064763\" \"ENSG00000064787\" \"ENSG00000064835\" #>  [865] \"ENSG00000064886\" \"ENSG00000064932\" \"ENSG00000064933\" \"ENSG00000064961\" #>  [869] \"ENSG00000064989\" \"ENSG00000064995\" \"ENSG00000064999\" \"ENSG00000065000\" #>  [873] \"ENSG00000065029\" \"ENSG00000065054\" \"ENSG00000065057\" \"ENSG00000065060\" #>  [877] \"ENSG00000065135\" \"ENSG00000065150\" \"ENSG00000065154\" \"ENSG00000065183\" #>  [881] \"ENSG00000065243\" \"ENSG00000065268\" \"ENSG00000065308\" \"ENSG00000065320\" #>  [885] \"ENSG00000065325\" \"ENSG00000065328\" \"ENSG00000065357\" \"ENSG00000065361\" #>  [889] \"ENSG00000065371\" \"ENSG00000065413\" \"ENSG00000065427\" \"ENSG00000065485\" #>  [893] \"ENSG00000065491\" \"ENSG00000065518\" \"ENSG00000065526\" \"ENSG00000065534\" #>  [897] \"ENSG00000065548\" \"ENSG00000065559\" \"ENSG00000065600\" \"ENSG00000065609\" #>  [901] \"ENSG00000065613\" \"ENSG00000065615\" \"ENSG00000065618\" \"ENSG00000065621\" #>  [905] \"ENSG00000065665\" \"ENSG00000065675\" \"ENSG00000065717\" \"ENSG00000065802\" #>  [909] \"ENSG00000065809\" \"ENSG00000065833\" \"ENSG00000065882\" \"ENSG00000065883\" #>  [913] \"ENSG00000065911\" \"ENSG00000065923\" \"ENSG00000065970\" \"ENSG00000065989\" #>  [917] \"ENSG00000066027\" \"ENSG00000066032\" \"ENSG00000066044\" \"ENSG00000066056\" #>  [921] \"ENSG00000066084\" \"ENSG00000066117\" \"ENSG00000066135\" \"ENSG00000066136\" #>  [925] \"ENSG00000066185\" \"ENSG00000066230\" \"ENSG00000066248\" \"ENSG00000066279\" #>  [929] \"ENSG00000066294\" \"ENSG00000066322\" \"ENSG00000066336\" \"ENSG00000066379\" #>  [933] \"ENSG00000066382\" \"ENSG00000066405\" \"ENSG00000066422\" \"ENSG00000066427\" #>  [937] \"ENSG00000066455\" \"ENSG00000066468\" \"ENSG00000066557\" \"ENSG00000066583\" #>  [941] \"ENSG00000066629\" \"ENSG00000066651\" \"ENSG00000066654\" \"ENSG00000066735\" #>  [945] \"ENSG00000066739\" \"ENSG00000066777\" \"ENSG00000066827\" \"ENSG00000066855\" #>  [949] \"ENSG00000066923\" \"ENSG00000066926\" \"ENSG00000066933\" \"ENSG00000067048\" #>  [953] \"ENSG00000067057\" \"ENSG00000067064\" \"ENSG00000067066\" \"ENSG00000067082\" #>  [957] \"ENSG00000067113\" \"ENSG00000067141\" \"ENSG00000067167\" \"ENSG00000067177\" #>  [961] \"ENSG00000067182\" \"ENSG00000067191\" \"ENSG00000067208\" \"ENSG00000067221\" #>  [965] \"ENSG00000067225\" \"ENSG00000067248\" \"ENSG00000067334\" \"ENSG00000067365\" #>  [969] \"ENSG00000067369\" \"ENSG00000067445\" \"ENSG00000067533\" \"ENSG00000067560\" #>  [973] \"ENSG00000067596\" \"ENSG00000067601\" \"ENSG00000067606\" \"ENSG00000067646\" #>  [977] \"ENSG00000067704\" \"ENSG00000067715\" \"ENSG00000067798\" \"ENSG00000067829\" #>  [981] \"ENSG00000067836\" \"ENSG00000067840\" \"ENSG00000067842\" \"ENSG00000067900\" #>  [985] \"ENSG00000067955\" \"ENSG00000067992\" \"ENSG00000068001\" \"ENSG00000068024\" #>  [989] \"ENSG00000068028\" \"ENSG00000068078\" \"ENSG00000068079\" \"ENSG00000068097\" #>  [993] \"ENSG00000068120\" \"ENSG00000068137\" \"ENSG00000068305\" \"ENSG00000068308\" #>  [997] \"ENSG00000068323\" \"ENSG00000068354\" \"ENSG00000068383\" \"ENSG00000068394\"  fNames(clevelandSmall_cSet, 'rna') <- fNames(clevelandSmall_cSet, 'rna')  mDataNames(clevelandSmall_cSet) #> [1] \"rna\"    \"rnaseq\"  mDataNames(clevelandSmall_cSet) <- mDataNames(clevelandSmall_cSet)  molecularProfilesSlot(clevelandSmall_cSet) #> A MultiAssayExperiment object of 2 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 2: #>  [1] rna: SummarizedExperiment with 1000 rows and 9 columns #>  [2] rnaseq: SummarizedExperiment with 1000 rows and 9 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  molecularProfilesSlot(clevelandSmall_cSet) <- molecularProfilesSlot(clevelandSmall_cSet)  sensitivityInfo(clevelandSmall_cSet) #> Warning:  #> [CoreGx::assay] Cannot use key=TRUE when summarize=TRUE. Ignoring the key argument. #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #>                       treatment1id replicate_id  sampleid                    rn #> radiation:1_CHP-212      radiation            1   CHP-212 MHH-NB-11_radiation_6 #> radiation:2_CHP-212      radiation            2   CHP-212 MHH-NB-11_radiation_6 #> radiation:1_IMR-32       radiation            1    IMR-32    IMR-32_radiation_2 #> radiation:2_IMR-32       radiation            2    IMR-32    IMR-32_radiation_2 #> radiation:1_KP-N-S19s    radiation            1 KP-N-S19s       NB1_radiation_8 #> radiation:2_KP-N-S19s    radiation            2 KP-N-S19s       NB1_radiation_8 #> radiation:1_MHH-NB-11    radiation            1 MHH-NB-11   SK-N-AS_radiation_3 #> radiation:2_MHH-NB-11    radiation            2 MHH-NB-11   SK-N-AS_radiation_3 #> radiation:1_NB1          radiation            1       NB1   SK-N-SH_radiation_7 #> radiation:2_NB1          radiation            2       NB1   SK-N-SH_radiation_7 #> radiation:1_SK-N-AS      radiation            1   SK-N-AS KP-N-S19s_radiation_5 #> radiation:2_SK-N-AS      radiation            2   SK-N-AS KP-N-S19s_radiation_5 #> radiation:1_SK-N-FI      radiation            1   SK-N-FI   CHP-212_radiation_4 #> radiation:2_SK-N-FI      radiation            2   SK-N-FI   CHP-212_radiation_4 #> radiation:1_SK-N-SH      radiation            1   SK-N-SH   SK-N-FI_radiation_1 #> radiation:2_SK-N-SH      radiation            2   SK-N-SH   SK-N-FI_radiation_1 #> radiation:1_SNU-245      radiation            1   SNU-245   SNU-245_radiation_9 #> radiation:2_SNU-245      radiation            2   SNU-245   SNU-245_radiation_9 #> radiation:1_SNU-869      radiation            1   SNU-869  SNU-869_radiation_10 #> radiation:2_SNU-869      radiation            2   SNU-869  SNU-869_radiation_10 #>                       col Key .rownames Dose1-1Gy-rep1 Dose1-1Gy-rep2 Dose2-2Gy #> radiation:1_CHP-212         4   CHP-212              1              1         2 #> radiation:2_CHP-212         4   CHP-212              1              1         2 #> radiation:1_IMR-32          2    IMR-32              1              1         2 #> radiation:2_IMR-32          2    IMR-32              1              1         2 #> radiation:1_KP-N-S19s       5 KP-N-S19s              1              1         2 #> radiation:2_KP-N-S19s       5 KP-N-S19s              1              1         2 #> radiation:1_MHH-NB-11       6 MHH-NB-11              1              1         2 #> radiation:2_MHH-NB-11       6 MHH-NB-11              1              1         2 #> radiation:1_NB1             8       NB1              1              1         2 #> radiation:2_NB1             8       NB1              1              1         2 #> radiation:1_SK-N-AS         3   SK-N-AS              1              1         2 #> radiation:2_SK-N-AS         3   SK-N-AS              1              1         2 #> radiation:1_SK-N-FI         1   SK-N-FI              1              1         2 #> radiation:2_SK-N-FI         1   SK-N-FI              1              1         2 #> radiation:1_SK-N-SH         7   SK-N-SH              1              1         2 #> radiation:2_SK-N-SH         7   SK-N-SH              1              1         2 #> radiation:1_SNU-245         9   SNU-245              1              1         2 #> radiation:2_SNU-245         9   SNU-245              1              1         2 #> radiation:1_SNU-869        10   SNU-869              1              1         2 #> radiation:2_SNU-869        10   SNU-869              1              1         2 #>                       Dose3-3Gy Dose4-4Gy Dose5-5Gy Dose6-6Gy Dose8-8Gy #> radiation:1_CHP-212           3         4         5         6         8 #> radiation:2_CHP-212           3         4         5         6         8 #> radiation:1_IMR-32            3         4         5         6         8 #> radiation:2_IMR-32            3         4         5         6         8 #> radiation:1_KP-N-S19s         3         4         5         6         8 #> radiation:2_KP-N-S19s         3         4         5         6         8 #> radiation:1_MHH-NB-11         3         4         5         6         8 #> radiation:2_MHH-NB-11         3         4         5         6         8 #> radiation:1_NB1               3         4         5         6         8 #> radiation:2_NB1               3         4         5         6         8 #> radiation:1_SK-N-AS           3         4         5         6         8 #> radiation:2_SK-N-AS           3         4         5         6         8 #> radiation:1_SK-N-FI           3         4         5         6         8 #> radiation:2_SK-N-FI           3         4         5         6         8 #> radiation:1_SK-N-SH           3         4         5         6         8 #> radiation:2_SK-N-SH           3         4         5         6         8 #> radiation:1_SNU-245           3         4         5         6         8 #> radiation:2_SNU-245           3         4         5         6         8 #> radiation:1_SNU-869           3         4         5         6         8 #> radiation:2_SNU-869           3         4         5         6         8 #>                       Dose10-10Gy treatmentid treatment_uid sample_uid #> radiation:1_CHP-212            10   radiation   radiation:1    CHP-212 #> radiation:2_CHP-212            10   radiation   radiation:2    CHP-212 #> radiation:1_IMR-32             10   radiation   radiation:1     IMR-32 #> radiation:2_IMR-32             10   radiation   radiation:2     IMR-32 #> radiation:1_KP-N-S19s          10   radiation   radiation:1  KP-N-S19s #> radiation:2_KP-N-S19s          10   radiation   radiation:2  KP-N-S19s #> radiation:1_MHH-NB-11          10   radiation   radiation:1  MHH-NB-11 #> radiation:2_MHH-NB-11          10   radiation   radiation:2  MHH-NB-11 #> radiation:1_NB1                10   radiation   radiation:1        NB1 #> radiation:2_NB1                10   radiation   radiation:2        NB1 #> radiation:1_SK-N-AS            10   radiation   radiation:1    SK-N-AS #> radiation:2_SK-N-AS            10   radiation   radiation:2    SK-N-AS #> radiation:1_SK-N-FI            10   radiation   radiation:1    SK-N-FI #> radiation:2_SK-N-FI            10   radiation   radiation:2    SK-N-FI #> radiation:1_SK-N-SH            10   radiation   radiation:1    SK-N-SH #> radiation:2_SK-N-SH            10   radiation   radiation:2    SK-N-SH #> radiation:1_SNU-245            10   radiation   radiation:1    SNU-245 #> radiation:2_SNU-245            10   radiation   radiation:2    SNU-245 #> radiation:1_SNU-869            10   radiation   radiation:1    SNU-869 #> radiation:2_SNU-869            10   radiation   radiation:2    SNU-869 #>                                      exp_id #> radiation:1_CHP-212     radiation:1_CHP-212 #> radiation:2_CHP-212     radiation:2_CHP-212 #> radiation:1_IMR-32       radiation:1_IMR-32 #> radiation:2_IMR-32       radiation:2_IMR-32 #> radiation:1_KP-N-S19s radiation:1_KP-N-S19s #> radiation:2_KP-N-S19s radiation:2_KP-N-S19s #> radiation:1_MHH-NB-11 radiation:1_MHH-NB-11 #> radiation:2_MHH-NB-11 radiation:2_MHH-NB-11 #> radiation:1_NB1             radiation:1_NB1 #> radiation:2_NB1             radiation:2_NB1 #> radiation:1_SK-N-AS     radiation:1_SK-N-AS #> radiation:2_SK-N-AS     radiation:2_SK-N-AS #> radiation:1_SK-N-FI     radiation:1_SK-N-FI #> radiation:2_SK-N-FI     radiation:2_SK-N-FI #> radiation:1_SK-N-SH     radiation:1_SK-N-SH #> radiation:2_SK-N-SH     radiation:2_SK-N-SH #> radiation:1_SNU-245     radiation:1_SNU-245 #> radiation:2_SNU-245     radiation:2_SNU-245 #> radiation:1_SNU-869     radiation:1_SNU-869 #> radiation:2_SNU-869     radiation:2_SNU-869  sensitivityInfo(clevelandSmall_cSet) <- sensitivityInfo(clevelandSmall_cSet) #> Warning:  #> [CoreGx::assay] Cannot use key=TRUE when summarize=TRUE. Ignoring the key argument. #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning:  #> [CoreGx::rowData<-] The ID columns treatment1dose are not present in value. The function will attempt to join with existing rowIDs, but this may fail! #> Warning: column(s) not removed because not found: [.colnames]  sensitivityMeasures(clevelandSmall_cSet) <- sensitivityMeasures(clevelandSmall_cSet) #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: The CoreSet class structure has been updated! Assignment via sensitivityProfiles no long works, please see vignette('The LongTable Class', package='CoreGx') for more information.  sensitivityMeasures(clevelandSmall_cSet) <- sensitivityMeasures(clevelandSmall_cSet) #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: The CoreSet class structure has been updated! Assignment via sensitivityProfiles no long works, please see vignette('The LongTable Class', package='CoreGx') for more information.  sensitivityProfiles(clevelandSmall_cSet) #> Warning: column(s) not removed because not found: [.colnames] #>                    exp_id AUC_published AUC_recomputed     alpha       beta #>  1:   radiation:1_CHP-212         1.833      1.3440925 0.4615728 0.00000000 #>  2:    radiation:1_IMR-32         0.634      0.5490508 0.8098218 0.00000000 #>  3: radiation:1_KP-N-S19s         1.477      2.3251731 0.2974555 0.00000000 #>  4: radiation:1_MHH-NB-11         0.545      0.6260366 0.7520926 0.00000000 #>  5:       radiation:1_NB1         0.774      0.7906043 0.6551282 0.00000000 #>  6:   radiation:1_SK-N-AS         3.789      3.2589305 0.1245542 0.01650291 #>  7:   radiation:1_SK-N-FI         3.410      2.8616423 0.1521972 0.01783452 #>  8:   radiation:1_SK-N-SH         1.661      1.8720963 0.3584304 0.00000000 #>  9:   radiation:1_SNU-245         4.145      4.5066456 0.1371595 0.00000000 #> 10:   radiation:1_SNU-869         4.113      4.3476552 0.1450146 0.00000000 #> 11:   radiation:2_CHP-212         1.833      1.3440925 0.4615728 0.00000000 #> 12:    radiation:2_IMR-32         0.634      0.5490508 0.8098218 0.00000000 #> 13: radiation:2_KP-N-S19s         1.477      2.3251731 0.2974555 0.00000000 #> 14: radiation:2_MHH-NB-11         0.545      0.6260366 0.7520926 0.00000000 #> 15:       radiation:2_NB1         0.774      0.7906043 0.6551282 0.00000000 #> 16:   radiation:2_SK-N-AS         3.789      3.2589305 0.1245542 0.01650291 #> 17:   radiation:2_SK-N-FI         3.410      2.8616423 0.1521972 0.01783452 #> 18:   radiation:2_SK-N-SH         1.661      1.8720963 0.3584304 0.00000000 #> 19:   radiation:2_SNU-245         4.145      4.5066456 0.1371595 0.00000000 #> 20:   radiation:2_SNU-869         4.113      4.3476552 0.1450146 0.00000000 #>           SF2 #>  1: 0.4160333 #>  2: 0.0824000 #>  3: 0.2469118 #>  4: 0.0652000 #>  5: 0.2169389 #>  6: 0.7827120 #>  7: 0.6181713 #>  8: 0.3086860 #>  9: 0.7885541 #> 10: 0.7346687 #> 11: 0.4160333 #> 12: 0.0824000 #> 13: 0.2469118 #> 14: 0.0652000 #> 15: 0.2169389 #> 16: 0.7827120 #> 17: 0.6181713 #> 18: 0.3086860 #> 19: 0.7885541 #> 20: 0.7346687  sensitivityProfiles(clevelandSmall_cSet) <- sensitivityProfiles(clevelandSmall_cSet) #> Warning: column(s) not removed because not found: [.colnames] #> Warning: The CoreSet class structure has been updated! Assignment via sensitivityProfiles no long works, please see vignette('The LongTable Class', package='CoreGx') for more information.  head(sensitivityRaw(clevelandSmall_cSet)) #> Warning: column(s) not removed because not found: [.colnames] #> , , Dose #>  #>                         dose1 #> radiation:1:1_CHP-212       1 #> radiation:1:1_IMR-32        1 #> radiation:1:1_KP-N-S19s     1 #> radiation:1:1_MHH-NB-11     1 #> radiation:1:1_NB1           1 #> radiation:1:1_SK-N-AS       1 #>  #> , , Viability #>  #>                             dose1 #> radiation:1:1_CHP-212   0.7312816 #> radiation:1:1_IMR-32    0.4154556 #> radiation:1:1_KP-N-S19s 0.4164569 #> radiation:1:1_MHH-NB-11 0.3711540 #> radiation:1:1_NB1       0.2981927 #> radiation:1:1_SK-N-AS   0.9488615 #>   sensitivityRaw(clevelandSmall_cSet) <- sensitivityRaw(clevelandSmall_cSet) #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames]  treatmentResponse(clevelandSmall_cSet) #> <TreatmentResponseExperiment>  #>  #> Warning: column(s) not removed because not found: [.colnames] #>    dim:  9 10  #>    assays(2): sensitivity profiles  #>    rownames(9): radiation:1:1 radiation:2:1 ... radiation:10:1 radiation:1:2  #>    rowData(4): treatment1id treatment1dose replicate_id row Key  #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #>    colnames(10):   #> Warning: column(s) not removed because not found: [.colnames] #>    colData(4): sampleid rn .rownames col Key  #>    metadata(1): experiment_metadata   treatmentResponse(clevelandSmall_cSet) <- treatmentResponse(clevelandSmall_cSet)  sensNumber(clevelandSmall_cSet) #> Warning: column(s) not removed because not found: [.colnames] #>           CHP-212 IMR-32 KP-N-S19s MHH-NB-11 NB1 SK-N-AS SK-N-FI SK-N-SH #> radiation       9      9         9         9   9       9       9       9 #>           SNU-245 SNU-869 #> radiation       9       9  sensNumber(clevelandSmall_cSet) <- sensNumber(clevelandSmall_cSet) #> Warning: column(s) not removed because not found: [.colnames]  pertNumber(clevelandSmall_cSet) #> [1] 0 0 0  pertNumber(clevelandSmall_cSet) <- pertNumber(clevelandSmall_cSet)"},{"path":"/reference/CoreSet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CoreSet - A generic data container for molecular profiles and\ntreatment response data — CoreSet-class","title":"CoreSet - A generic data container for molecular profiles and\ntreatment response data — CoreSet-class","text":"CoreSet - generic data container molecular profiles treatment response data","code":""},{"path":"/reference/CoreSet-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CoreSet - A generic data container for molecular profiles and\ntreatment response data — CoreSet-class","text":"CoreSet (cSet) class developed superclass pSets PharmacoGx RadioGx packages contain data generated screens cancer sample lines genetic profile sensitivities therapy (Pharmacological Radiation). class meant superclass contained within PharmacoSet (pSet) RadioSet (rSet) objects exported PharmacoGx RadioGx. format data similar pSets rSets, allowing much code abstracted CoreSet super-class. However, models involved quantifying sampleular response Pharmacological Radiation therapy widely different, extension cSet class allows packages apply correct model given data.","code":""},{"path":"/reference/CoreSet-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CoreSet - A generic data container for molecular profiles and\ntreatment response data — CoreSet-class","text":"annotation See Slots section. molecularProfiles See Slots section. sample See Slots section. treatment See Slots section. treatmentResponse See Slots section. perturbation See Slots section. curation See Slots section. datasetType See Slots section.","code":""},{"path":"/reference/CoreSet-class.html","id":"slots-1","dir":"Reference","previous_headings":"","what":"Slots","title":"CoreSet - A generic data container for molecular profiles and\ntreatment response data — CoreSet-class","text":"annotation: list annotation data CoreSet, including $name session information object created, detailing exact versions R packages used. molecularProfiles: list MultiAssayExperiment containing CoreSet object. sample: data.frame containg annotations samples profiled data set, across molecular data types treatment response experiments. treatment: data.frame containing annotations treatments dataset, including mandatory 'treatmentid' column uniquely identify treatment. treatmentResponse: list LongTable containing data treatment response experiment, including $info, data.frame containing experimental info, $raw 3D array containing raw data, $profiles, data.frame containing sensitivity profiles statistics, $n, data.frame detailing number experiments sample-drug/radiationInfo pair perturbation: list containing $n, data.frame summarizing available perturbation data. slot currently deprecated. curation: list containing mappings treatment, sample tissue names used data set universal identifiers used different CoreSet objects. datasetType: character string 'sensitivity', 'perturbation', detailing type data can found CoreSet, proper processing data","code":""},{"path":[]},{"path":"/reference/CoreSet-utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility methods for a CoreSet object. — CoreSet-utils","title":"Utility methods for a CoreSet object. — CoreSet-utils","text":"Documentation utility methods CoreSet object, set operations like subset intersect. See @details information different types methods implementations.","code":""},{"path":"/reference/CoreSet-utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility methods for a CoreSet object. — CoreSet-utils","text":"","code":"# S4 method for CoreSet subsetBySample(x, samples)  # S4 method for CoreSet subsetByTreatment(x, treatments)  # S4 method for CoreSet subsetByFeature(x, features, mDataTypes)"},{"path":"/reference/CoreSet-utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility methods for a CoreSet object. — CoreSet-utils","text":"x CoreSet object. samples character() vector sample names. Must valid rownames sampleInfo(x). treatments character() vector treatment names. Must valid rownames treatmentInfo(x). method work CoreSet objects yet. features character() vector feature names. Must valid feature names given mDataType mDataTypes character() One molecular data types subset features . Must valid rownames selected SummarizedExperiment mDataTypes.","code":""},{"path":"/reference/CoreSet-utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility methods for a CoreSet object. — CoreSet-utils","text":"See details.","code":""},{"path":[]},{"path":"/reference/CoreSet-utils.html","id":"subset-methods","dir":"Reference","previous_headings":"","what":"subset methods","title":"Utility methods for a CoreSet object. — CoreSet-utils","text":"subsetBySample: Subset CoreSet object sample identifier. value: CoreSet object containing samples.","code":""},{"path":"/reference/CoreSet-utils.html","id":"subset-methods-1","dir":"Reference","previous_headings":"","what":"subset methods","title":"Utility methods for a CoreSet object. — CoreSet-utils","text":"subsetByTreatment: Subset CoreSet object treatment identifier. value: CoreSet object containing treatments.","code":""},{"path":"/reference/CoreSet-utils.html","id":"subset-methods-2","dir":"Reference","previous_headings":"","what":"subset methods","title":"Utility methods for a CoreSet object. — CoreSet-utils","text":"subsetByFeature: Subset CoreSet object molecular feature identifier. value: CoreSet object containing features.","code":""},{"path":"/reference/CoreSet-utils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility methods for a CoreSet object. — CoreSet-utils","text":"","code":"data(clevelandSmall_cSet)  ## subset methods  ### subsetBySample samples <- sampleInfo(clevelandSmall_cSet)$sampleid[seq_len(10)] clevelandSmall_cSet_sub <- subsetBySample(clevelandSmall_cSet, samples)   ## subset methods  ### subsetByTreatment #treatments <- treatmentInfo(clevelandSmall_cSet)$treatmentid[seq_len(10)] #clevelandSmall_cSet_sub <- subsetByTreatment(clevelandSmall_cSet, treatments)   ## subset methods  ### subsetByFeature features <- fNames(clevelandSmall_cSet, 'rna')[seq_len(5)] clevelandSmall_cSet_sub <- subsetByFeature(clevelandSmall_cSet, features, 'rna')"},{"path":"/reference/CoreSet.html","id":null,"dir":"Reference","previous_headings":"","what":"CoreSet constructor — CoreSet","title":"CoreSet constructor — CoreSet","text":"constructor simplifies process creating CoreSets, well creates empty objects data provided constructor. objects returned constructor expected work CoreSet methods.","code":""},{"path":"/reference/CoreSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CoreSet constructor — CoreSet","text":"","code":"CoreSet(   name,   molecularProfiles = list(),   sample = data.frame(),   sensitivityInfo = data.frame(),   sensitivityRaw = array(dim = c(0, 0, 0)),   sensitivityProfiles = matrix(),   sensitivityN = matrix(nrow = 0, ncol = 0),   perturbationN = array(NA, dim = c(0, 0, 0)),   curationSample = data.frame(),   curationTissue = data.frame(),   curationTreatment = data.frame(),   treatment = data.frame(),   datasetType = c(\"sensitivity\", \"perturbation\", \"both\"),   verify = TRUE,   ... )"},{"path":"/reference/CoreSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CoreSet constructor — CoreSet","text":"name character string detailing name dataset molecularProfiles list SummarizedExperiment objects containing molecular profiles molecular data type. sample data.frame containing annotations sample profiled data set, across data types. Must contain mandatory sampleid column uniquely identifies sample object. sensitivityInfo data.frame containing information sensitivity experiments. Must contain 'sampleid' column unique identifiers sample, matching sample object 'treatmentid' columns unique indenifiers treatment, matching treatment object. sensitivityRaw 3 Dimensional array contaning raw drug dose response data sensitivity experiments sensitivityProfiles data.frame containing drug sensitivity profile statistics IC50 AUC sensitivityN, perturbationN data.frame summarizing available sensitivity/perturbation data curationSample, curationTissue, curationTreatment data.frame mapping names samples, tissues treatments used data set universal identifiers used different CoreSet objects treatment data.frame containing annotations treatments profiled dataset. Must contain mandatory treatmentid column uniquely identifies treatment object. datasetType character(1) string 'sensitivity', 'preturbation', '' detailing type data can found CoreSet, proper processing data verify logical(1)function verify CoreSet print errors finds construction? ... Catch parse renamed constructor arguments.","code":""},{"path":"/reference/CoreSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CoreSet constructor — CoreSet","text":"object class CoreSet","code":""},{"path":[]},{"path":"/reference/CoreSet.html","id":"warning-","dir":"Reference","previous_headings":"","what":"WARNING:","title":"CoreSet constructor — CoreSet","text":"Parameters function renamed! cell now sample drug now treatment","code":""},{"path":"/reference/CoreSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CoreSet constructor — CoreSet","text":"","code":"data(clevelandSmall_cSet) clevelandSmall_cSet #> <CoreSet> #> Name: Cleveland  #> Date Created: Sat Feb 18 15:10:56 2023  #> Number of samples:  10  #> Molecular profiles: <MultiAssayExperiment>  #>    ExperimentList class object of length 2:  #>     [1] rna : SummarizedExperiment with 1000 rows and 9 columns  #>     [2] rnaseq : SummarizedExperiment with 1000 rows and 9 columns  #> Treatment response: <TreatmentResponseExperiment>  #>    dim:  9 10  #>    assays(2): sensitivity profiles  #>    rownames(9): radiation:1:1 radiation:1:2 ... radiation:8:1 radiation:10:1  #>    rowData(3): treatment1id treatment1dose replicate_id  #>    colnames(10): CHP-212 IMR-32 KP-N-S19s ... SK-N-SH SNU-245 SNU-869  #>    colData(2): sampleid rn  #>    metadata(1): experiment_metadata"},{"path":"/reference/CoreSet2.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a CoreSet with the updated class structure — CoreSet2","title":"Make a CoreSet with the updated class structure — CoreSet2","text":"New implementation CoreSet constructor support MAE TRE. constructor swapped original CoreSet constructor part overhaul CoreSet class structure.","code":""},{"path":"/reference/CoreSet2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a CoreSet with the updated class structure — CoreSet2","text":"","code":"CoreSet2(   name = \"emptySet\",   treatment = data.frame(),   sample = data.frame(),   molecularProfiles = MultiAssayExperiment(),   treatmentResponse = LongTable(),   datasetType = \"sensitivity\",   perturbation = list(n = array(dim = 3), info = \"No perturbation data!\"),   curation = list(sample = data.frame(), treatment = data.frame()) )"},{"path":"/reference/CoreSet2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a CoreSet with the updated class structure — CoreSet2","text":"name character(1) vector CoreSet objects name. treatment data.frame treatment level metadata. sample data.frame sample level metadata union samples treatmentResponse molecularProfiles. molecularProfiles MultiAssayExperiment containing one SummarizedExperiment object molecular data type. treatmentResponse LongTable LongTableDataMapper object containing treatment response data associated CoreSet object. datasetType deprecated slot CoreSet object included backwards compatibility. may removed future releases. perturbation deprecated slot CoreSet object included backwards compatibility. may removed future releases. curation list(2) object two items named treatment sample mappings publication identifiers standardized identifiers annotations, respectively.","code":""},{"path":"/reference/CoreSet2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a CoreSet with the updated class structure — CoreSet2","text":"CoreSet object storing standardized curated treatment response multiomic profile data associated given publication.","code":""},{"path":"/reference/CoreSet2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a CoreSet with the updated class structure — CoreSet2","text":"","code":"data(clevelandSmall_cSet) clevelandSmall_cSet #> <CoreSet> #> Name: Cleveland  #> Date Created: Sat Feb 18 15:10:56 2023  #> Number of samples:  10  #> Molecular profiles: <MultiAssayExperiment>  #>    ExperimentList class object of length 2:  #>     [1] rna : SummarizedExperiment with 1000 rows and 9 columns  #>     [2] rnaseq : SummarizedExperiment with 1000 rows and 9 columns  #> Treatment response: <TreatmentResponseExperiment>  #>    dim:  9 10  #>    assays(2): sensitivity profiles  #>    rownames(9): radiation:1:1 radiation:1:2 ... radiation:8:1 radiation:10:1  #>    rowData(3): treatment1id treatment1dose replicate_id  #>    colnames(10): CHP-212 IMR-32 KP-N-S19s ... SK-N-SH SNU-245 SNU-869  #>    colData(2): sampleid rn  #>    metadata(1): experiment_metadata"},{"path":"/reference/DataMapper-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessing and modifying data in a DataMapper object. — DataMapper-accessors","title":"Accessing and modifying data in a DataMapper object. — DataMapper-accessors","text":"Documentation various setters getters allow manipulation data slots DataMapper object.","code":""},{"path":"/reference/DataMapper-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessing and modifying data in a DataMapper object. — DataMapper-accessors","text":"","code":"# S4 method for DataMapper rawdata(object)  # S4 method for DataMapper,ANY rawdata(object) <- value"},{"path":"/reference/DataMapper-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessing and modifying data in a DataMapper object. — DataMapper-accessors","text":"object DataMapper object get set data . value list-like object assign rawdata slot. data.frame data.table current implementation.","code":""},{"path":"/reference/DataMapper-accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessing and modifying data in a DataMapper object. — DataMapper-accessors","text":"Accessors: See details Setters: update DataMapper object, returned invisibly.","code":""},{"path":"/reference/DataMapper-accessors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessing and modifying data in a DataMapper object. — DataMapper-accessors","text":"rawdata: Get raw data slot DataMapper object. Returns list-like containing one raw data inputs DataMapper object. rawdata: Set raw data slot DataMapper object. value: list-like object set rawdata slot. Note: currently supports data.frame data.table objects.","code":""},{"path":[]},{"path":"/reference/DataMapper-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 Class For Mapping from Raw Experimental Data to a Specific S4 Object — DataMapper-class","title":"An S4 Class For Mapping from Raw Experimental Data to a Specific S4 Object — DataMapper-class","text":"object used way abstract away data preprocessing.","code":""},{"path":"/reference/DataMapper-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 Class For Mapping from Raw Experimental Data to a Specific S4 Object — DataMapper-class","text":"rawdata: list-like object containing one pieces raw data processed mapped slots S4 object. metadata: List object level metadata.","code":""},{"path":"/reference/LongTable-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessing and modifying information in a LongTable — LongTable-accessors","title":"Accessing and modifying information in a LongTable — LongTable-accessors","text":"Documentation various setters getters allow manipulation data slots LongTable object.","code":""},{"path":"/reference/LongTable-accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessing and modifying information in a LongTable — LongTable-accessors","text":"Accessors: See details. Setters: updated LongTable object, returned invisibly.","code":""},{"path":"/reference/LongTable-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessing and modifying information in a LongTable — LongTable-accessors","text":"","code":"data(merckLongTable)"},{"path":"/reference/LongTable-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LongTable class definition — LongTable-class","title":"LongTable class definition — LongTable-class","text":"Define private constructor method used build LongTable object. used alternative R attributes storing structural metadata S4 objects. Add replace assay LongTable name. Currently function works assay columns row column data tables (.e., assays retured withDimnames=TRUE). Select assay within LongTable object.","code":""},{"path":"/reference/LongTable-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LongTable class definition — LongTable-class","text":"","code":"# S4 method for LongTable rowIDs(object, data = FALSE, key = FALSE)  # S4 method for LongTable rowMeta(object, data = FALSE, key = FALSE)  # S4 method for LongTable colIDs(object, data = FALSE, key = FALSE)  # S4 method for LongTable colMeta(object, data = FALSE, key = FALSE)  # S4 method for LongTable idCols(object)  # S4 method for LongTable assayIndex(x)  # S4 method for LongTable assayKeys(x, i)  # S4 method for LongTable assayCols(object, i)  # S4 method for LongTable,character getIntern(object, x)  # S4 method for LongTable,missing getIntern(object, x)  # S4 method for LongTable rowData(x, key = FALSE, use.names = FALSE, ...)  # S4 method for LongTable rowData(x, ...) <- value  # S4 method for LongTable colData(x, key = FALSE, dimnames = FALSE, ...)  # S4 method for LongTable,ANY colData(x, ...) <- value  # S4 method for LongTable assays(   x,   withDimnames = TRUE,   metadata = withDimnames,   key = !withDimnames,   ... )  # S4 method for LongTable,list assays(x, withDimnames = TRUE, ...) <- value  # S4 method for LongTable,ANY assay(   x,   i,   withDimnames = TRUE,   summarize = withDimnames,   metadata = !summarize,   key = !(summarize || withDimnames),   ... )  # S4 method for LongTable,ANY assay(x, i) <- value  # S4 method for LongTable assayNames(x)  # S4 method for LongTable,ANY,ANY [[(x, i)  # S4 method for LongTable dim(x)  # S4 method for LongTable colnames(x)  # S4 method for LongTable rownames(x)  # S4 method for LongTable dimnames(x)"},{"path":"/reference/LongTable-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LongTable class definition — LongTable-class","text":"object LongTable data logical colData metadata columns returned instead column names? Default FALSE. key logical key columns also returned? Defaults !withDimnames. incompatible summarize=TRUE, drop key columns regardless value argument. x LongTable object retrieve dimnames . character(1) name integer index desired assay. use.names logical parameter just stop matching positional argument use.names rowData generic. anything time can ignored. ... developer use ! Pass raw=TRUE return slot modification reference. value data.frame data.table update assay data . must minumum contain row column data identifier columns allow correctly mapping assay keys. recommend modifying results returned assay(longTable, 'assayName', withDimnames=TRUE). convenience, [[ $ LongTable accessors return assay dimnames. withDimnames logical(1) dimension names returned joined assay. retrieves row column identifiers returns joined assay. metadata logical(1) metadata also joined assay. useful modifying assays resulting list information needed recreated LongTable object. Defaults withDimnames. summarize logical(1) assays summary idCols(x) assayKeys(x, ), missing columns dropped. Defaults FALSE. metadata TRUE, metadata columns 1:1 cardinality assay keys . `x` LongTable inheriting class. `` optional valid assay name index x.","code":""},{"path":"/reference/LongTable-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LongTable class definition — LongTable-class","text":"LongTable object containing assay data treatment response experiment character vector rowData column names data FALSE, otherwise data.table data rowData id columns. character vector rowData column names data FALSE, otherwise data.table data rowData metadta columns. character vector colData column names data FALSE, otherwise data.table data colData id columns. character vector colData column names data FALSE, otherwise data.table data colData metadta columns. character character vector containing unique rowIDs colIDs LongTable object. mutable copy \"assayIndex\" x mutable copy \"assyKeys\" x list character vectors containing value column names assay missing, otherwise character vector value column names selected assay. immutable value x length(x) == 1 else named list values symbols x. immutable list. data.table containing rowID, row identifiers, row metadata. copy LongTable object rowData slot updated. data.table containing row identifiers metadata. copy LongTable object colData slot updated. list data.table objects, one per assay object. copy LongTable assays modified. LongTable updated assays slot. character Names assays contained LongTable. numeric Vector object dimensions. character Vector column names. character Vector row names. list List two character vectors, one row one column names.","code":""},{"path":"/reference/LongTable-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"LongTable class definition — LongTable-class","text":"rowMeta(LongTable): Get names non-id columns rowData. colIDs(LongTable): Get names columns colData required uniquely identify row. colMeta(LongTable): Get names non-id columns colData data.table. idCols(LongTable): Get names id columns. assayIndex(LongTable): Get assayIndex item objects internal metadata. assayKeys(LongTable): Get assayKeys item objects internal metadata. assayCols(LongTable): Get list column names assay object. getIntern(object = LongTable, x = character): Access structural metadata present within LongTable object. mostly developmer use. getIntern(object = LongTable, x = missing): Access structural metadata present within LongTable object. primarily developmer use. rowData(LongTable): Get row level annotations LongTable object. rowData(LongTable) <- value: Update row annotations LongTable object. Currently requires columns rowIDs(longTable) present value. colData(LongTable): Get column level annotations LongTable object. colData(x = LongTable) <- value: Update colData LongTable object. Currently requires colIDs(longTable) value object. assays(LongTable): Get list containing assays LongTable. assays(x = LongTable) <- value: Update assays LongTable object. rowIDs colIDs must present assays allow successfully remapping keys. recommend modifying list returned assays(longTable, withDimnames=TRUE) reassigning LongTable. assay(x = LongTable, = ): Retrieve assay data.table object assays slot LongTable object. assay(x = LongTable, = ) <- value: assayNames(LongTable): Return names assays contained LongTable x[[: Get assay LongTable object. method returns row column annotations default make assignment aggregate operations easiers. dim(LongTable): Get number row annotations number column annotations LongTable object. Please note row x columns necessarily equal number rows assay, since required assay every row column present. colnames(LongTable): Retrieve pseudo-colnames LongTable object, constructed pasting together colIDs(longTable) can used subset method regex based queries. rownames(LongTable): Retrieve pseudo-rownames LongTable object, constructed pasting together rowIDs(longTable) can used subset method regex based queries. dimnames(LongTable): Get pseudo-dimnames LongTable object. See colnames rownames information.","code":""},{"path":"/reference/LongTable-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LongTable class definition — LongTable-class","text":"rowData See Slots section. colData See Slots section. assays See Slots section. metadata See Slots section. .intern See Slots section.","code":""},{"path":"/reference/LongTable-class.html","id":"slots-1","dir":"Reference","previous_headings":"","what":"Slots","title":"LongTable class definition — LongTable-class","text":"rowData: data.table containing metadata associated row dimension LongTable. colData: data.table containing metadata associated column dimension LongTable. assays: list data.tables, one assay LongTable. metadata: optional list additional metadata LongTable map one dimensions. .intern: immutable list holds internal structural metadata LongTable object, columns required key object.","code":""},{"path":"/reference/LongTable-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LongTable class definition — LongTable-class","text":"","code":"rowIDs(merckLongTable) #> [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\"  rowMeta(merckLongTable) #> [1] \"combination_name\"  colIDs(merckLongTable) #> [1] \"sampleid\" \"batchid\"   colMeta(merckLongTable) #> character(0)  idCols(merckLongTable) #> [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\" \"sampleid\"  \"batchid\"    assayIndex(nci_TRE_small) #>       rowKey colKey .sensitivity .profiles .assay_metadata #>    1:      1      1            1         1               1 #>    2:      1      2            2         2               2 #>    3:      1      3            3         3               3 #>    4:      1      5            4         4               4 #>    5:      2      1            5         5               5 #>   ---                                                      #> 9284:   1886      1         9284      9284            9284 #> 9285:   1886      2         9285      9285            9285 #> 9286:   1886      3         9286      9286            9286 #> 9287:   1886      4         9287      9287            9287 #> 9288:   1886      5         9288      9288            9288  assayKeys(nci_TRE_small) #> $sensitivity #> [1] \"treatment1id\"   \"treatment2id\"   \"treatment1dose\" \"treatment2dose\" #> [5] \"replicate\"      \"sampleid\"       #>  #> $profiles #> [1] \"treatment1id\"   \"treatment2id\"   \"treatment1dose\" \"treatment2dose\" #> [5] \"replicate\"      \"sampleid\"       #>  #> $assay_metadata #> [1] \"treatment1id\"   \"treatment2id\"   \"treatment1dose\" \"treatment2dose\" #> [5] \"replicate\"      \"sampleid\"       #>  assayKeys(nci_TRE_small, \"sensitivity\") #> [1] \"treatment1id\"   \"treatment2id\"   \"treatment1dose\" \"treatment2dose\" #> [5] \"replicate\"      \"sampleid\"       assayKeys(nci_TRE_small, 1) #> [1] \"treatment1id\"   \"treatment2id\"   \"treatment1dose\" \"treatment2dose\" #> [5] \"replicate\"      \"sampleid\"        assayCols(merckLongTable) #> $sensitivity #>  [1] \"drug1id\"    \"drug2id\"    \"drug1dose\"  \"drug2dose\"  \"sampleid\"   #>  [6] \"batchid\"    \"viability1\" \"viability2\" \"viability3\" \"viability4\" #>  #> $profiles #> [1] \"drug1id\"            \"drug2id\"            \"drug1dose\"          #> [4] \"drug2dose\"          \"sampleid\"           \"batchid\"            #> [7] \"mu/muMax_published\" \"X/X0_published\"     #>   getIntern(merckLongTable, 'rowIDs') #> immutable character  #> [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\" getIntern(merckLongTable, c('colIDs', 'colMeta')) #> immutable list  #> $colIDs #> [1] \"sampleid\" \"batchid\"  #>  #> $colMeta #> character(0) #>   getIntern(merckLongTable) #> immutable list  #> $rowIDs #> [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\" #>  #> $rowMeta #> [1] \"combination_name\" #>  #> $colIDs #> [1] \"sampleid\" \"batchid\"  #>  #> $colMeta #> character(0) #>  #> $assayKeys #> $assayKeys$sensitivity #> [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\" \"sampleid\"  \"batchid\"   #>  #> $assayKeys$profiles #> [1] \"drug1id\"   \"drug2id\"   \"drug1dose\" \"drug2dose\" \"sampleid\"  \"batchid\"   #>  #>  #> $assayIndex #>       rowKey colKey .sensitivity .profiles #>    1:      1      1            1         1 #>    2:      1      3            2         2 #>    3:      1      5            3         3 #>    4:      1      8            4         4 #>    5:      1     10            5         5 #>   ---                                      #> 3796:    744      1         3796      3796 #> 3797:    744      3         3797      3797 #> 3798:    744      5         3798      3798 #> 3799:    744      8         3799      3799 #> 3800:    744     10         3800      3800 #>   rowData(merckLongTable) #>           drug1id    drug2id drug1dose drug2dose         combination_name #>   1:         5-FU Bortezomib    0.3500   0.00045        5-FU & Bortezomib #>   2:         5-FU Bortezomib    0.3500   0.00200        5-FU & Bortezomib #>   3:         5-FU Bortezomib    0.3500   0.00900        5-FU & Bortezomib #>   4:         5-FU Bortezomib    0.3500   0.04000        5-FU & Bortezomib #>   5:         5-FU    L778123    0.3500   0.32500           5-FU & L778123 #>  ---                                                                      #> 740: geldanamycin    MK-8776    0.0223   0.32500   geldanamycin & MK-8776 #> 741: geldanamycin  Sorafenib    0.0223  10.00000 geldanamycin & Sorafenib #> 742: geldanamycin  Sorafenib    0.0223  20.00000 geldanamycin & Sorafenib #> 743: geldanamycin  Topotecan    0.0223   0.02230 geldanamycin & Topotecan #> 744: geldanamycin  Topotecan    0.0223   0.07750 geldanamycin & Topotecan  rowData(merckLongTable) <- rowData(merckLongTable)  colData(merckLongTable) #>     sampleid batchid #>  1:    A2058       1 #>  2:    A2058       3 #>  3:    A2780       1 #>  4:    A2780       2 #>  5:     A375       1 #>  6:     A375       2 #>  7:     A375       3 #>  8:     A427       1 #>  9:     A427       3 #> 10:    CAOV3       1 #> 11:    CAOV3       2 #> 12:    CAOV3       3  # Get the keys as well, mostly for internal use colData(merckLongTable, key=TRUE) #>     sampleid batchid colKey #>  1:    A2058       1      1 #>  2:    A2058       3      2 #>  3:    A2780       1      3 #>  4:    A2780       2      4 #>  5:     A375       1      5 #>  6:     A375       2      6 #>  7:     A375       3      7 #>  8:     A427       1      8 #>  9:     A427       3      9 #> 10:    CAOV3       1     10 #> 11:    CAOV3       2     11 #> 12:    CAOV3       3     12  colData(merckLongTable) <- colData(merckLongTable)  assays(merckLongTable) #> Warning: column(s) not removed because not found: [.colnames] #> $sensitivity #>            drug1id    drug2id drug1dose drug2dose sampleid batchid #>    1:         5-FU Bortezomib    0.3500   0.00045    A2058       1 #>    2:         5-FU Bortezomib    0.3500   0.00045    A2780       1 #>    3:         5-FU Bortezomib    0.3500   0.00045     A375       1 #>    4:         5-FU Bortezomib    0.3500   0.00045     A427       1 #>    5:         5-FU Bortezomib    0.3500   0.00045    CAOV3       1 #>   ---                                                              #> 3796: geldanamycin  Topotecan    0.0223   0.07750    A2058       1 #> 3797: geldanamycin  Topotecan    0.0223   0.07750    A2780       1 #> 3798: geldanamycin  Topotecan    0.0223   0.07750     A375       1 #> 3799: geldanamycin  Topotecan    0.0223   0.07750     A427       1 #> 3800: geldanamycin  Topotecan    0.0223   0.07750    CAOV3       1 #>               combination_name col Key .rownames row Key viability1 viability2 #>    1:        5-FU & Bortezomib       1   A2058:1       1      0.814      0.754 #>    2:        5-FU & Bortezomib       3   A2780:1       1      0.214      0.195 #>    3:        5-FU & Bortezomib       5    A375:1       1      1.064      1.080 #>    4:        5-FU & Bortezomib       8    A427:1       1      0.675      0.582 #>    5:        5-FU & Bortezomib      10   CAOV3:1       1      0.845      0.799 #>   ---                                                                          #> 3796: geldanamycin & Topotecan       1   A2058:1     744      0.090      0.043 #> 3797: geldanamycin & Topotecan       3   A2780:1     744      0.025      0.022 #> 3798: geldanamycin & Topotecan       5    A375:1     744      0.151      0.146 #> 3799: geldanamycin & Topotecan       8    A427:1     744      0.142      0.166 #> 3800: geldanamycin & Topotecan      10   CAOV3:1     744      0.091      0.084 #>       viability3 viability4 #>    1:      0.765      0.849 #>    2:      0.186      0.223 #>    3:      1.082      1.009 #>    4:      0.482      0.516 #>    5:      0.799      0.759 #>   ---                       #> 3796:      0.112      0.103 #> 3797:      0.029      0.023 #> 3798:      0.144      0.171 #> 3799:      0.124      0.175 #> 3800:      0.134      0.119 #>  #> $profiles #>            drug1id    drug2id drug1dose drug2dose sampleid batchid #>    1:         5-FU Bortezomib    0.3500   0.00045    A2058       1 #>    2:         5-FU Bortezomib    0.3500   0.00045    A2780       1 #>    3:         5-FU Bortezomib    0.3500   0.00045     A375       1 #>    4:         5-FU Bortezomib    0.3500   0.00045     A427       1 #>    5:         5-FU Bortezomib    0.3500   0.00045    CAOV3       1 #>   ---                                                              #> 3796: geldanamycin  Topotecan    0.0223   0.07750    A2058       1 #> 3797: geldanamycin  Topotecan    0.0223   0.07750    A2780       1 #> 3798: geldanamycin  Topotecan    0.0223   0.07750     A375       1 #> 3799: geldanamycin  Topotecan    0.0223   0.07750     A427       1 #> 3800: geldanamycin  Topotecan    0.0223   0.07750    CAOV3       1 #>               combination_name col Key .rownames row Key mu/muMax_published #>    1:        5-FU & Bortezomib       1   A2058:1       1              0.880 #>    2:        5-FU & Bortezomib       3   A2780:1       1              0.384 #>    3:        5-FU & Bortezomib       5    A375:1       1              1.033 #>    4:        5-FU & Bortezomib       8    A427:1       1              0.676 #>    5:        5-FU & Bortezomib      10   CAOV3:1       1              0.708 #>   ---                                                                       #> 3796: geldanamycin & Topotecan       1   A2058:1     744             -0.187 #> 3797: geldanamycin & Topotecan       3   A2780:1     744             -0.445 #> 3798: geldanamycin & Topotecan       5    A375:1     744              0.090 #> 3799: geldanamycin & Topotecan       8    A427:1     744             -0.012 #> 3800: geldanamycin & Topotecan      10   CAOV3:1     744             -1.935 #>       X/X0_published #>    1:          0.847 #>    2:          0.426 #>    3:          1.047 #>    4:          0.638 #>    5:          0.667 #>   ---                #> 3796:          0.193 #> 3797:          0.135 #> 3798:          0.283 #> 3799:          0.246 #> 3800:          0.017 #>   assays(merckLongTable) <- assays(merckLongTable, withDimnames=TRUE) #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames]  # Default annotations, just the key columns assay(merckLongTable, 'sensitivity') #> Warning: column(s) not removed because not found: [.colnames] #>            drug1id    drug2id drug1dose drug2dose sampleid batchid #>    1:         5-FU Bortezomib    0.3500   0.00045    A2058       1 #>    2:         5-FU Bortezomib    0.3500   0.00045    A2780       1 #>    3:         5-FU Bortezomib    0.3500   0.00045     A375       1 #>    4:         5-FU Bortezomib    0.3500   0.00045     A427       1 #>    5:         5-FU Bortezomib    0.3500   0.00045    CAOV3       1 #>   ---                                                              #> 3796: geldanamycin  Topotecan    0.0223   0.07750    A2058       1 #> 3797: geldanamycin  Topotecan    0.0223   0.07750    A2780       1 #> 3798: geldanamycin  Topotecan    0.0223   0.07750     A375       1 #> 3799: geldanamycin  Topotecan    0.0223   0.07750     A427       1 #> 3800: geldanamycin  Topotecan    0.0223   0.07750    CAOV3       1 #>               combination_name col Key .rownames row Key i.col Key i..rownames #>    1:        5-FU & Bortezomib       1   A2058:1       1         1     A2058:1 #>    2:        5-FU & Bortezomib       3   A2780:1       1         3     A2780:1 #>    3:        5-FU & Bortezomib       5    A375:1       1         5      A375:1 #>    4:        5-FU & Bortezomib       8    A427:1       1         8      A427:1 #>    5:        5-FU & Bortezomib      10   CAOV3:1       1        10     CAOV3:1 #>   ---                                                                          #> 3796: geldanamycin & Topotecan       1   A2058:1     744         1     A2058:1 #> 3797: geldanamycin & Topotecan       3   A2780:1     744         3     A2780:1 #> 3798: geldanamycin & Topotecan       5    A375:1     744         5      A375:1 #> 3799: geldanamycin & Topotecan       8    A427:1     744         8      A427:1 #> 3800: geldanamycin & Topotecan      10   CAOV3:1     744        10     CAOV3:1 #>       i.row Key viability1 viability2 viability3 viability4 #>    1:         1      0.814      0.754      0.765      0.849 #>    2:         1      0.214      0.195      0.186      0.223 #>    3:         1      1.064      1.080      1.082      1.009 #>    4:         1      0.675      0.582      0.482      0.516 #>    5:         1      0.845      0.799      0.799      0.759 #>   ---                                                       #> 3796:       744      0.090      0.043      0.112      0.103 #> 3797:       744      0.025      0.022      0.029      0.023 #> 3798:       744      0.151      0.146      0.144      0.171 #> 3799:       744      0.142      0.166      0.124      0.175 #> 3800:       744      0.091      0.084      0.134      0.119 assay(merckLongTable, 1) #> Warning: column(s) not removed because not found: [.colnames] #>            drug1id    drug2id drug1dose drug2dose sampleid batchid #>    1:         5-FU Bortezomib    0.3500   0.00045    A2058       1 #>    2:         5-FU Bortezomib    0.3500   0.00045    A2780       1 #>    3:         5-FU Bortezomib    0.3500   0.00045     A375       1 #>    4:         5-FU Bortezomib    0.3500   0.00045     A427       1 #>    5:         5-FU Bortezomib    0.3500   0.00045    CAOV3       1 #>   ---                                                              #> 3796: geldanamycin  Topotecan    0.0223   0.07750    A2058       1 #> 3797: geldanamycin  Topotecan    0.0223   0.07750    A2780       1 #> 3798: geldanamycin  Topotecan    0.0223   0.07750     A375       1 #> 3799: geldanamycin  Topotecan    0.0223   0.07750     A427       1 #> 3800: geldanamycin  Topotecan    0.0223   0.07750    CAOV3       1 #>               combination_name col Key .rownames row Key i.col Key i..rownames #>    1:        5-FU & Bortezomib       1   A2058:1       1         1     A2058:1 #>    2:        5-FU & Bortezomib       3   A2780:1       1         3     A2780:1 #>    3:        5-FU & Bortezomib       5    A375:1       1         5      A375:1 #>    4:        5-FU & Bortezomib       8    A427:1       1         8      A427:1 #>    5:        5-FU & Bortezomib      10   CAOV3:1       1        10     CAOV3:1 #>   ---                                                                          #> 3796: geldanamycin & Topotecan       1   A2058:1     744         1     A2058:1 #> 3797: geldanamycin & Topotecan       3   A2780:1     744         3     A2780:1 #> 3798: geldanamycin & Topotecan       5    A375:1     744         5      A375:1 #> 3799: geldanamycin & Topotecan       8    A427:1     744         8      A427:1 #> 3800: geldanamycin & Topotecan      10   CAOV3:1     744        10     CAOV3:1 #>       i.row Key viability1 viability2 viability3 viability4 #>    1:         1      0.814      0.754      0.765      0.849 #>    2:         1      0.214      0.195      0.186      0.223 #>    3:         1      1.064      1.080      1.082      1.009 #>    4:         1      0.675      0.582      0.482      0.516 #>    5:         1      0.845      0.799      0.799      0.759 #>   ---                                                       #> 3796:       744      0.090      0.043      0.112      0.103 #> 3797:       744      0.025      0.022      0.029      0.023 #> 3798:       744      0.151      0.146      0.144      0.171 #> 3799:       744      0.142      0.166      0.124      0.175 #> 3800:       744      0.091      0.084      0.134      0.119  # With identifiers joined assay(merckLongTable, 'sensitivity', withDimnames=TRUE) #> Warning: column(s) not removed because not found: [.colnames] #>            drug1id    drug2id drug1dose drug2dose sampleid batchid #>    1:         5-FU Bortezomib    0.3500   0.00045    A2058       1 #>    2:         5-FU Bortezomib    0.3500   0.00045    A2780       1 #>    3:         5-FU Bortezomib    0.3500   0.00045     A375       1 #>    4:         5-FU Bortezomib    0.3500   0.00045     A427       1 #>    5:         5-FU Bortezomib    0.3500   0.00045    CAOV3       1 #>   ---                                                              #> 3796: geldanamycin  Topotecan    0.0223   0.07750    A2058       1 #> 3797: geldanamycin  Topotecan    0.0223   0.07750    A2780       1 #> 3798: geldanamycin  Topotecan    0.0223   0.07750     A375       1 #> 3799: geldanamycin  Topotecan    0.0223   0.07750     A427       1 #> 3800: geldanamycin  Topotecan    0.0223   0.07750    CAOV3       1 #>               combination_name col Key .rownames row Key i.col Key i..rownames #>    1:        5-FU & Bortezomib       1   A2058:1       1         1     A2058:1 #>    2:        5-FU & Bortezomib       3   A2780:1       1         3     A2780:1 #>    3:        5-FU & Bortezomib       5    A375:1       1         5      A375:1 #>    4:        5-FU & Bortezomib       8    A427:1       1         8      A427:1 #>    5:        5-FU & Bortezomib      10   CAOV3:1       1        10     CAOV3:1 #>   ---                                                                          #> 3796: geldanamycin & Topotecan       1   A2058:1     744         1     A2058:1 #> 3797: geldanamycin & Topotecan       3   A2780:1     744         3     A2780:1 #> 3798: geldanamycin & Topotecan       5    A375:1     744         5      A375:1 #> 3799: geldanamycin & Topotecan       8    A427:1     744         8      A427:1 #> 3800: geldanamycin & Topotecan      10   CAOV3:1     744        10     CAOV3:1 #>       i.row Key viability1 viability2 viability3 viability4 #>    1:         1      0.814      0.754      0.765      0.849 #>    2:         1      0.214      0.195      0.186      0.223 #>    3:         1      1.064      1.080      1.082      1.009 #>    4:         1      0.675      0.582      0.482      0.516 #>    5:         1      0.845      0.799      0.799      0.759 #>   ---                                                       #> 3796:       744      0.090      0.043      0.112      0.103 #> 3797:       744      0.025      0.022      0.029      0.023 #> 3798:       744      0.151      0.146      0.144      0.171 #> 3799:       744      0.142      0.166      0.124      0.175 #> 3800:       744      0.091      0.084      0.134      0.119  # With identifiers and metadata assay(merckLongTable, 'profiles', withDimnames=TRUE, metadata=TRUE) #> Warning: column(s) not removed because not found: [.colnames] #>            drug1id    drug2id drug1dose drug2dose sampleid batchid #>    1:         5-FU Bortezomib    0.3500   0.00045    A2058       1 #>    2:         5-FU Bortezomib    0.3500   0.00045    A2780       1 #>    3:         5-FU Bortezomib    0.3500   0.00045     A375       1 #>    4:         5-FU Bortezomib    0.3500   0.00045     A427       1 #>    5:         5-FU Bortezomib    0.3500   0.00045    CAOV3       1 #>   ---                                                              #> 3796: geldanamycin  Topotecan    0.0223   0.07750    A2058       1 #> 3797: geldanamycin  Topotecan    0.0223   0.07750    A2780       1 #> 3798: geldanamycin  Topotecan    0.0223   0.07750     A375       1 #> 3799: geldanamycin  Topotecan    0.0223   0.07750     A427       1 #> 3800: geldanamycin  Topotecan    0.0223   0.07750    CAOV3       1 #>               combination_name col Key .rownames row Key i.col Key i..rownames #>    1:        5-FU & Bortezomib       1   A2058:1       1         1     A2058:1 #>    2:        5-FU & Bortezomib       3   A2780:1       1         3     A2780:1 #>    3:        5-FU & Bortezomib       5    A375:1       1         5      A375:1 #>    4:        5-FU & Bortezomib       8    A427:1       1         8      A427:1 #>    5:        5-FU & Bortezomib      10   CAOV3:1       1        10     CAOV3:1 #>   ---                                                                          #> 3796: geldanamycin & Topotecan       1   A2058:1     744         1     A2058:1 #> 3797: geldanamycin & Topotecan       3   A2780:1     744         3     A2780:1 #> 3798: geldanamycin & Topotecan       5    A375:1     744         5      A375:1 #> 3799: geldanamycin & Topotecan       8    A427:1     744         8      A427:1 #> 3800: geldanamycin & Topotecan      10   CAOV3:1     744        10     CAOV3:1 #>       i.row Key mu/muMax_published X/X0_published #>    1:         1              0.880          0.847 #>    2:         1              0.384          0.426 #>    3:         1              1.033          1.047 #>    4:         1              0.676          0.638 #>    5:         1              0.708          0.667 #>   ---                                             #> 3796:       744             -0.187          0.193 #> 3797:       744             -0.445          0.135 #> 3798:       744              0.090          0.283 #> 3799:       744             -0.012          0.246 #> 3800:       744             -1.935          0.017  assay(merckLongTable, 'sensitivity') <-      assay(merckLongTable, 'sensitivity', withDimnames=TRUE) #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] assay(merckLongTable, 'sensitivity') <- merckLongTable$sensitivity #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames]  assayNames(merckLongTable) #> [1] \"sensitivity\" \"profiles\"    names(merckLongTable) #> [1] \"sensitivity\" \"profiles\"     merckLongTable[['sensitivity']] #> Warning: column(s) not removed because not found: [.colnames] #>            drug1id    drug2id drug1dose drug2dose sampleid batchid #>    1:         5-FU Bortezomib    0.3500   0.00045    A2058       1 #>    2:         5-FU Bortezomib    0.3500   0.00045    A2780       1 #>    3:         5-FU Bortezomib    0.3500   0.00045     A375       1 #>    4:         5-FU Bortezomib    0.3500   0.00045     A427       1 #>    5:         5-FU Bortezomib    0.3500   0.00045    CAOV3       1 #>   ---                                                              #> 3796: geldanamycin  Topotecan    0.0223   0.07750    A2058       1 #> 3797: geldanamycin  Topotecan    0.0223   0.07750    A2780       1 #> 3798: geldanamycin  Topotecan    0.0223   0.07750     A375       1 #> 3799: geldanamycin  Topotecan    0.0223   0.07750     A427       1 #> 3800: geldanamycin  Topotecan    0.0223   0.07750    CAOV3       1 #>               combination_name col Key .rownames row Key i.col Key i..rownames #>    1:        5-FU & Bortezomib       1   A2058:1       1         1     A2058:1 #>    2:        5-FU & Bortezomib       3   A2780:1       1         3     A2780:1 #>    3:        5-FU & Bortezomib       5    A375:1       1         5      A375:1 #>    4:        5-FU & Bortezomib       8    A427:1       1         8      A427:1 #>    5:        5-FU & Bortezomib      10   CAOV3:1       1        10     CAOV3:1 #>   ---                                                                          #> 3796: geldanamycin & Topotecan       1   A2058:1     744         1     A2058:1 #> 3797: geldanamycin & Topotecan       3   A2780:1     744         3     A2780:1 #> 3798: geldanamycin & Topotecan       5    A375:1     744         5      A375:1 #> 3799: geldanamycin & Topotecan       8    A427:1     744         8      A427:1 #> 3800: geldanamycin & Topotecan      10   CAOV3:1     744        10     CAOV3:1 #>       i.row Key i.col Key.2 i..rownames.2 i.row Key.2 i.col Key.1 i..rownames.1 #>    1:         1           1       A2058:1           1           1       A2058:1 #>    2:         1           3       A2780:1           1           3       A2780:1 #>    3:         1           5        A375:1           1           5        A375:1 #>    4:         1           8        A427:1           1           8        A427:1 #>    5:         1          10       CAOV3:1           1          10       CAOV3:1 #>   ---                                                                           #> 3796:       744           1       A2058:1         744           1       A2058:1 #> 3797:       744           3       A2780:1         744           3       A2780:1 #> 3798:       744           5        A375:1         744           5        A375:1 #> 3799:       744           8        A427:1         744           8        A427:1 #> 3800:       744          10       CAOV3:1         744          10       CAOV3:1 #>       i.row Key.1 viability1 viability2 viability3 viability4 #>    1:           1      0.814      0.754      0.765      0.849 #>    2:           1      0.214      0.195      0.186      0.223 #>    3:           1      1.064      1.080      1.082      1.009 #>    4:           1      0.675      0.582      0.482      0.516 #>    5:           1      0.845      0.799      0.799      0.759 #>   ---                                                         #> 3796:         744      0.090      0.043      0.112      0.103 #> 3797:         744      0.025      0.022      0.029      0.023 #> 3798:         744      0.151      0.146      0.144      0.171 #> 3799:         744      0.142      0.166      0.124      0.175 #> 3800:         744      0.091      0.084      0.134      0.119  dim(merckLongTable) #> Warning: column(s) not removed because not found: [.colnames] #> [1] 744  12  dim(merckLongTable) #> Warning: column(s) not removed because not found: [.colnames] #> [1] 744  12  head(colnames(merckLongTable)) #> NULL  head(rownames(merckLongTable)) #> [1] \"5-FU:Bortezomib:0.35:0.00045\" \"5-FU:Bortezomib:0.35:0.002\"   #> [3] \"5-FU:Bortezomib:0.35:0.009\"   \"5-FU:Bortezomib:0.35:0.04\"    #> [5] \"5-FU:L778123:0.35:0.325\"      \"5-FU:L778123:0.35:0.8\"         lapply(dimnames(merckLongTable), head) #> [[1]] #> [1] \"5-FU:Bortezomib:0.35:0.00045\" \"5-FU:Bortezomib:0.35:0.002\"   #> [3] \"5-FU:Bortezomib:0.35:0.009\"   \"5-FU:Bortezomib:0.35:0.04\"    #> [5] \"5-FU:L778123:0.35:0.325\"      \"5-FU:L778123:0.35:0.8\"        #>  #> [[2]] #> NULL #>"},{"path":"/reference/LongTable.html","id":null,"dir":"Reference","previous_headings":"","what":"LongTable constructor method — LongTable","title":"LongTable constructor method — LongTable","text":"LongTable constructor method","code":""},{"path":"/reference/LongTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LongTable constructor method — LongTable","text":"","code":"LongTable(   rowData,   rowIDs,   colData,   colIDs,   assays,   assayIDs,   metadata = list(),   keep.rownames = FALSE )"},{"path":"/reference/LongTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LongTable constructor method — LongTable","text":"rowData data.frame rectangular object coercible data.table. rowIDs character vector rowData column names needed uniquely identify row LongTable. colData data.frame rectangular object coercible data.table. colIDs chacter vector colData column names needed uniquely identify column LongTable. assays list list rectangular objects, coercible data.table. Must named item names must match assayIDs list. assayIDs list list character vectors specifying columns needed uniquely identify row assay. Names must match assays list. metadata list list one metadata items associated LongTable experiment. keep.rownames logical(1) character(1) rownames retained coercing data.table inside constructor. Default FALSE. TRUE, adds 'rn' column rectangular object gets coerced data.frame data.table. string, becomes name rownames column.","code":""},{"path":"/reference/LongTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LongTable constructor method — LongTable","text":"LongTable object containing data treatment response experiment configured according rowIDs colIDs arguments.","code":""},{"path":"/reference/LongTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LongTable constructor method — LongTable","text":"","code":"\"See vignette('The LongTable Class', package='CoreGx')\" #> [1] \"See vignette('The LongTable Class', package='CoreGx')\""},{"path":"/reference/LongTableDataMapper-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessing and modifying data in a LongTableDataMapper object. — LongTableDataMapper-accessors","title":"Accessing and modifying data in a LongTableDataMapper object. — LongTableDataMapper-accessors","text":"Documentation various setters getters allow manipulation data slots LongTableDataMapper object.","code":""},{"path":"/reference/LongTableDataMapper-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessing and modifying data in a LongTableDataMapper object. — LongTableDataMapper-accessors","text":"","code":"# S4 method for LongTableDataMapper,list rawdata(object) <- value  # S4 method for LongTableDataMapper rowDataMap(object)  # S4 method for LongTableDataMapper,list_OR_List rowDataMap(object) <- value  # S4 method for LongTableDataMapper colDataMap(object)  # S4 method for LongTableDataMapper,list_OR_List colDataMap(object) <- value  # S4 method for LongTableDataMapper assayMap(object)  # S4 method for LongTableDataMapper,list_OR_List assayMap(object) <- value  # S4 method for LongTableDataMapper metadataMap(object)  # S4 method for LongTableDataMapper,list_OR_List metadataMap(object) <- value"},{"path":"/reference/LongTableDataMapper-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessing and modifying data in a LongTableDataMapper object. — LongTableDataMapper-accessors","text":"object LongTableDataMapper object get set data . value See details.","code":""},{"path":"/reference/LongTableDataMapper-accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessing and modifying data in a LongTableDataMapper object. — LongTableDataMapper-accessors","text":"Accessors: See details Setters: update LongTableDataMapper object, returned invisibly.","code":""},{"path":"/reference/LongTableDataMapper-accessors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessing and modifying data in a LongTableDataMapper object. — LongTableDataMapper-accessors","text":"rawdata: Get raw data slot LongTableDataMapper object. Returns list-like containing one raw data inputs LongTableDataMapper object. rawdata: Set raw data slot LongTableDataMapper object. value: list-like object set rawdata slot. Note: currently supports data.frame data.table objects. rowDataMap: list two character vectors, first columns required uniquely identify row LongTableDataMapper second additional row-level metadata. character vectors names, resulting columns automatically renamed item name specified column. rowDataMap<-: Update @rowDataMap slot LongTableDataMapper object, returning invisible NULL. Arguments: value: list List first item names identifier columns -- columns needed uniquely identify row rowData -- second item metadata associated identifier columns, required uniquely identify rows object rowData. colDataMap: list two character vectors, first columns required uniquely identify row LongTableDataMapper second additional col-level metadata. character vectors names, resulting columns automatically renamed item name specified column. colDataMap<-: Update @colDataMap slot LongTableDataMapper object, returning invisible NULL. Arguments: value: list List first item names identifier columns -- columns needed uniquely identify row colData -- second item metadata associated identifier columns, required uniquely identify rows object rowData. assayMap:  list character vectors. name list item assay LongTableDataMapper object columns character vector assigned . Column renaming occurs automatically character vectors names (value name). assayMap<-: Updates @assayMap slot LongTableDataMapper object, returning invisible NULL. Arguments: value:  list character vectors, name list item name assay values character vector specify columns mapping assay S4 object LongTableDataMapper constructs. metadataMap:  list character vectors. item element constructed objects @metadata slot. metadataMap<-: Updates LongTableDataMapper object -place, returns invisible(NULL). Arguments: value:  list character vectors. name list item name item @metadata slot LongTableDataMapper object created metaConstruct called DataMapper, character vector specifies columns @rawdata assign item.","code":""},{"path":[]},{"path":"/reference/LongTableDataMapper-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessing and modifying data in a LongTableDataMapper object. — LongTableDataMapper-accessors","text":"","code":"rowDataMap(exampleDataMapper) #> list()  rowDataMap(exampleDataMapper) <- list(c('treatmentid'), c())  colDataMap(exampleDataMapper) #> list()  colDataMap(exampleDataMapper) <- list(c('sampleid'), c())  assayMap(exampleDataMapper) #> list()  assayMap(exampleDataMapper) <- list(sensitivity=c(viability1='viability'))  metadataMap(exampleDataMapper) #> list()  metadataMap(exampleDataMapper) <- list(object_metadata=c('metadata'))"},{"path":"/reference/LongTableDataMapper-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A Class for Mapping Between Raw Data and an LongTable Object — LongTableDataMapper-class","title":"A Class for Mapping Between Raw Data and an LongTable Object — LongTableDataMapper-class","text":"Class Mapping Raw Data LongTable Object","code":""},{"path":"/reference/LongTableDataMapper-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Class for Mapping Between Raw Data and an LongTable Object — LongTableDataMapper-class","text":"","code":"# S4 method for LongTableDataMapper show(object)"},{"path":"/reference/LongTableDataMapper-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Class for Mapping Between Raw Data and an LongTable Object — LongTableDataMapper-class","text":"object LongTableDataMapper display console.","code":""},{"path":"/reference/LongTableDataMapper-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Class for Mapping Between Raw Data and an LongTable Object — LongTableDataMapper-class","text":"invisible Prints console.","code":""},{"path":"/reference/LongTableDataMapper-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"A Class for Mapping Between Raw Data and an LongTable Object — LongTableDataMapper-class","text":"show(LongTableDataMapper): Show method LongTableDataMapper. Determines object displayed console.","code":""},{"path":"/reference/LongTableDataMapper-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A Class for Mapping Between Raw Data and an LongTable Object — LongTableDataMapper-class","text":"rawdata See Slots section. rowDataMap See Slots section. colDataMap See Slots section. assayMap See Slots section. metadataMap See Slots section.","code":""},{"path":"/reference/LongTableDataMapper-class.html","id":"slots-1","dir":"Reference","previous_headings":"","what":"Slots","title":"A Class for Mapping Between Raw Data and an LongTable Object — LongTableDataMapper-class","text":"rowDataMap: list-like object containing two character vectors. first column names rawdata needed uniquely identify row, second additional columns map rows, required uniquely identify . Rows drugs. colDataMap: list-like object containing two character vectors. first column names rawdata needed uniquely identify column, second additional columns map rows, required uniquely identify . Columns samples. assayMap list-like item list two elements specifying assay, first identifier columns rawdata needed uniquely identify row assay, second list rawdata columns mapped assay. names assayMap names assays LongTable created calling metaConstruct DataMapper object. metadataMap: list-like item character vector rawdata column names assign @metadata LongTable, name assay name list item. names omitted, assays numbered index list. rawdata: list-like object containing one pieces raw data processed mapped slots S4 object. metadata: List object level metadata.","code":""},{"path":"/reference/LongTableDataMapper-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Class for Mapping Between Raw Data and an LongTable Object — LongTableDataMapper-class","text":"","code":"show(exampleDataMapper) #> <LongTableDataMapper>  #> rawdata: dim(3, 4) #>      treatmentid sampleid viability        metadata #>           <char>   <char>     <num>          <char> #>   1:       drug1    cell1      0.75 additional info #>   2:       drug1    cell1      0.10 additional info #>   3: drug1 cell1 0.90 additional info  #>  rowDataMap: NA #> colDataMap: NA #> assayMap: NA #> metadataMap: NA"},{"path":"/reference/LongTableDataMapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the LongTableDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — LongTableDataMapper","title":"Constructor for the LongTableDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — LongTableDataMapper","text":"Constructor LongTableDataMapper class, maps one raw experimental data files slots LongTable object.","code":""},{"path":"/reference/LongTableDataMapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the LongTableDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — LongTableDataMapper","text":"","code":"LongTableDataMapper(   rawdata = data.frame(),   rowDataMap = list(character(), character()),   colDataMap = list(character(), character()),   assayMap = list(list(character(), character())),   metadataMap = list(character()) )"},{"path":"/reference/LongTableDataMapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the LongTableDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — LongTableDataMapper","text":"rawdata data.frame raw data treatment response experiment. coerced data.table internally. recommend using joins aggregate raw data present single file. rowDataMap list-like object containing two character vectors. first column names rawdata needed uniquely identify row, second additional columns map rows, required uniquely identify . Rows drugs. colDataMap list-like object containing two character vectors. first column names rawdata needed uniquely identify column, second additional columns map rows, required uniquely identify . Columns samples. assayMap list-like item list two character vectors defining assay, first containing identifier columns rawdata needed uniquely identify row assay, second rawdata columns mapped assay. names assayMap names assays LongTable created calling metaConstruct DataMapper object. character vectors names, value columns renamed accordingly. metadataMap list-like item character vector rawdata column names assign @metadata LongTable, name assay name list item. names omitted, assays numbered index list.","code":""},{"path":"/reference/LongTableDataMapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the LongTableDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — LongTableDataMapper","text":"LongTable object, columns mapped slots according various maps LongTableDataMapper object.","code":""},{"path":"/reference/LongTableDataMapper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for the LongTableDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — LongTableDataMapper","text":"guessMapping method can used test hypotheses cardinality one sets identifier columns. helpful determine id columns rowDataMap colDataMap, well identify columns mapping assays metadata. attach metadata associated rawdata, please use metadata assignment method LongTableDataMapper. metadata merged metadata metadataMap added LongTable object ultimately constructs.","code":""},{"path":[]},{"path":"/reference/LongTableDataMapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for the LongTableDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — LongTableDataMapper","text":"","code":"data(exampleDataMapper) exampleDataMapper #> <LongTableDataMapper>  #> rawdata: dim(3, 4) #>      treatmentid sampleid viability        metadata #>           <char>   <char>     <num>          <char> #>   1:       drug1    cell1      0.75 additional info #>   2:       drug1    cell1      0.10 additional info #>   3: drug1 cell1 0.90 additional info  #>  rowDataMap: NA #> colDataMap: NA #> assayMap: NA #> metadataMap: NA"},{"path":"/reference/TREDataMapper-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessing and modifying data in a TREDataMapper object. — TREDataMapper-accessors","title":"Accessing and modifying data in a TREDataMapper object. — TREDataMapper-accessors","text":"Documentation various setters getters allow manipulation data slots TREDataMapper object.","code":""},{"path":"/reference/TREDataMapper-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessing and modifying data in a TREDataMapper object. — TREDataMapper-accessors","text":"","code":"# S4 method for TREDataMapper,list rawdata(object) <- value  # S4 method for TREDataMapper rowDataMap(object)  # S4 method for TREDataMapper,list_OR_List rowDataMap(object) <- value  # S4 method for TREDataMapper colDataMap(object)  # S4 method for TREDataMapper,list_OR_List colDataMap(object) <- value  # S4 method for TREDataMapper assayMap(object)  # S4 method for TREDataMapper,list_OR_List assayMap(object) <- value  # S4 method for TREDataMapper metadataMap(object)  # S4 method for TREDataMapper,list_OR_List metadataMap(object) <- value"},{"path":"/reference/TREDataMapper-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessing and modifying data in a TREDataMapper object. — TREDataMapper-accessors","text":"object TREDataMapper object get set data . value See details.","code":""},{"path":"/reference/TREDataMapper-accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessing and modifying data in a TREDataMapper object. — TREDataMapper-accessors","text":"Accessors: See details Setters: update TREDataMapper object, returned invisibly.","code":""},{"path":"/reference/TREDataMapper-accessors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessing and modifying data in a TREDataMapper object. — TREDataMapper-accessors","text":"rawdata: Get raw data slot TREDataMapper object. Returns list-like containing one raw data inputs TREDataMapper object. rawdata: Set raw data slot TREDataMapper object. value: list-like object set rawdata slot. Note: currently supports data.frame data.table objects. rowDataMap: list two character vectors, first columns required uniquely identify row TREDataMapper second additional row-level metadata. character vectors names, resulting columns automatically renamed item name specified column. rowDataMap<-: Update @rowDataMap slot TREDataMapper object, returning invisible NULL. Arguments: value: list List first item names identifier columns -- columns needed uniquely identify row rowData -- second item metadata associated identifier columns, required uniquely identify rows object rowData. colDataMap: list two character vectors, first columns required uniquely identify row TREDataMapper second additional col-level metadata. character vectors names, resulting columns automatically renamed item name specified column. colDataMap<-: Update @colDataMap slot TREDataMapper object, returning invisible NULL. Arguments: value: list List first item names identifier columns -- columns needed uniquely identify row colData -- second item metadata associated identifier columns, required uniquely identify rows object rowData. assayMap:  list character vectors. name list item assay LongTableDataMapper object columns character vector assigned . Column renaming occurs automatically character vectors names (value name). assayMap<-: Updates @assayMap slot TREDataMapper object, returning invisible NULL. Arguments: value:  list character vectors, name list item name assay values character vector specify columns mapping assay S4 object TREDataMapper constructs. metadataMap:  list character vectors. item element constructed objects @metadata slot. metadataMap<-: Updates TREDataMapper object -place, returns invisible(NULL). Arguments: value:  list character vectors. name list item name item @metadata slot TREDataMapper object created metaConstruct called DataMapper, character vector specifies columns @rawdata assign item.","code":""},{"path":[]},{"path":"/reference/TREDataMapper-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessing and modifying data in a TREDataMapper object. — TREDataMapper-accessors","text":"","code":"rowDataMap(exampleDataMapper) #> list()  rowDataMap(exampleDataMapper) <- list(c('treatmentid'), c())  colDataMap(exampleDataMapper) #> list()  colDataMap(exampleDataMapper) <- list(c('sampleid'), c())  assayMap(exampleDataMapper) #> list()  assayMap(exampleDataMapper) <- list(sensitivity=c(viability1='viability'))  metadataMap(exampleDataMapper) #> list()  metadataMap(exampleDataMapper) <- list(object_metadata=c('metadata'))"},{"path":"/reference/TREDataMapper-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A Class for Mapping Between Raw Data and an TreatmentResponseExperiment\nObject — TREDataMapper-class","title":"A Class for Mapping Between Raw Data and an TreatmentResponseExperiment\nObject — TREDataMapper-class","text":"Class Mapping Raw Data TreatmentResponseExperiment Object","code":""},{"path":"/reference/TREDataMapper-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A Class for Mapping Between Raw Data and an TreatmentResponseExperiment\nObject — TREDataMapper-class","text":"rawdata See Slots section. rowDataMap See Slots section. colDataMap See Slots section. assayMap See Slots section. metadataMap See Slots section.","code":""},{"path":"/reference/TREDataMapper-class.html","id":"slots-1","dir":"Reference","previous_headings":"","what":"Slots","title":"A Class for Mapping Between Raw Data and an TreatmentResponseExperiment\nObject — TREDataMapper-class","text":"rowDataMap: list-like object containing two character vectors. first column names rawdata needed uniquely identify row, second additional columns map rows, required uniquely identify . Rows drugs. colDataMap: list-like object containing two character vectors. first column names rawdata needed uniquely identify column, second additional columns map rows, required uniquely identify . Columns samples. assayMap list-like item list two elements specifying assay, first identifier columns rawdata needed uniquely identify row assay, second list rawdata columns mapped assay. names assayMap names assays LongTable created calling metaConstruct DataMapper object. metadataMap: list-like item character vector rawdata column names assign @metadata LongTable, name assay name list item. names omitted, assays numbered index list. rawdata: list-like object containing one pieces raw data processed mapped slots S4 object. metadata: List object level metadata.","code":""},{"path":"/reference/TREDataMapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the TREDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — TREDataMapper","title":"Constructor for the TREDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — TREDataMapper","text":"Constructor TREDataMapper class, maps one raw experimental data files slots LongTable object.","code":""},{"path":"/reference/TREDataMapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the TREDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — TREDataMapper","text":"","code":"TREDataMapper(   rawdata = data.frame(),   rowDataMap = list(character(), character()),   colDataMap = list(character(), character()),   assayMap = list(list(character(), character())),   metadataMap = list(character()) )"},{"path":"/reference/TREDataMapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the TREDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — TREDataMapper","text":"rawdata data.frame raw data treatment response experiment. coerced data.table internally. recommend using joins aggregate raw data present single file. rowDataMap list-like object containing two character vectors. first column names rawdata needed uniquely identify row, second additional columns map rows, required uniquely identify . Rows treatments. colDataMap list-like object containing two character vectors. first column names rawdata needed uniquely identify column, second additional columns map rows, required uniquely identify . Columns samples. assayMap list-like item list two character vectors defining assay, first containing identifier columns rawdata needed uniquely identify row assay, second rawdata columns mapped assay. names assayMap names assays TreatmentResponseExperiment created calling metaConstruct DataMapper object. character vectors names, value columns renamed accordingly. metadataMap list-like item character vector rawdata column names assign @metadata LongTable, name assay name list item. names omitted, assays numbered index list.","code":""},{"path":"/reference/TREDataMapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the TREDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — TREDataMapper","text":"TREDataMapper object, columns mapped slots according various maps LongTableDataMapper object.","code":""},{"path":"/reference/TREDataMapper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for the TREDataMapper class, which maps from one or\nmore raw experimental data files to the slots of a LongTable object. — TREDataMapper","text":"guessMapping method can used test hypotheses cardinality one sets identifier columns. helpful determine id columns rowDataMap colDataMap, well identify columns mapping assays metadata. attach metadata associated rawdata, please use metadata assignment method TREDataMapper. metadata merge metadata metadataMap added LongTable object ultimately constructs.","code":""},{"path":[]},{"path":"/reference/TreatmentResponseExperiment-class.html","id":null,"dir":"Reference","previous_headings":"","what":"TreatmentResponseExperiment class definition — TreatmentResponseExperiment-class","title":"TreatmentResponseExperiment class definition — TreatmentResponseExperiment-class","text":"Define private constructor method used build TreatmentResponseExperiment object.","code":""},{"path":"/reference/TreatmentResponseExperiment-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TreatmentResponseExperiment class definition — TreatmentResponseExperiment-class","text":"TreatmentResponseExperiment object containing assay data treatment response experiment","code":""},{"path":"/reference/TreatmentResponseExperiment-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"TreatmentResponseExperiment class definition — TreatmentResponseExperiment-class","text":"rowData See Slots section. colData See Slots section. assays See Slots section. metadata See Slots section. .intern See Slots section.","code":""},{"path":"/reference/TreatmentResponseExperiment-class.html","id":"slots-1","dir":"Reference","previous_headings":"","what":"Slots","title":"TreatmentResponseExperiment class definition — TreatmentResponseExperiment-class","text":"rowData: data.table containing metadata associated row dimension TreatmentResponseExperiment. colData: data.table containing metadata associated column dimension TreatmentResponseExperiment. assays: list data.tables, one assay TreatmentResponseExperiment. metadata: optional list additional metadata TreatmentResponseExperiment map one dimensions. .intern: environment holds internal structural metadata TreatmentResponseExperiment object, columns required key object. environment used allow locking items, can prevent accidental modification property required class work.","code":""},{"path":"/reference/TreatmentResponseExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"TreatmentResponseExperiment constructor method — TreatmentResponseExperiment","title":"TreatmentResponseExperiment constructor method — TreatmentResponseExperiment","text":"Builds TreatmentResponseExperiment object rectangular objects. rowData argument contain row level metadata, colData argument contain column level metadata, experimental assays assays list. rowIDs colIDs lists used configure internal keys mapping rows columns rows assays. list contain minimum one character vector, specifying columns rowData colData required uniquely identify row. optional second character vector can included, specifying metadata columns either dimension. contain information row required uniquely identify row colData rowData objects. Additional metadata can attached TreatmentResponseExperiment passing list metadata argument.","code":""},{"path":"/reference/TreatmentResponseExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TreatmentResponseExperiment constructor method — TreatmentResponseExperiment","text":"","code":"TreatmentResponseExperiment(   rowData,   rowIDs,   colData,   colIDs,   assays,   assayIDs,   metadata = list(),   keep.rownames = FALSE )"},{"path":"/reference/TreatmentResponseExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TreatmentResponseExperiment constructor method — TreatmentResponseExperiment","text":"rowData data.table, data.frame, matrix table like object coercible data.table containing unique rowID column used key assays, well additional row metadata subset . rowIDs character, integer vector specifying names integer indexes row data identifier columns. columns pasted together make rownames TreatmentResponseExperiment object. colData data.table, data.frame, matrix table like object coercible data.table containing unique colID column used key assays, well additional column metadata subset . colIDs character, integer vector specifying names integer indexes column data identifier columns. columns pasted together make colnames TreatmentResponseExperiment object. assays list containing one objects coercible data.table, keyed rowIDs colIDs corresponding rowID colID columns colData rowData. assayIDs list list character vectors specifying columns needed uniquely identify row assay. Names must match assays list. metadata list metadata associated TreatmentResponseExperiment object constructed keep.rownames logical, character Logical: whether rownames added column coercing data.table, default FALSE. TRUE, rownames added column 'rn'. Character: specify custom column name store rownames .","code":""},{"path":"/reference/TreatmentResponseExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TreatmentResponseExperiment constructor method — TreatmentResponseExperiment","text":"TreatmentResponseExperiment object containing data treatment response experiment configured according rowIDs colIDs arguments.","code":""},{"path":"/reference/TreatmentResponseExperiment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TreatmentResponseExperiment constructor method — TreatmentResponseExperiment","text":"now class simply wrapper around LongTable class. future plan refactor CoreGx LongTable class separate pacakge. can specialize implementation TreatmentResponseExperiment better capture biomedical nature object.","code":""},{"path":"/reference/aggregate-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional API for aggregation over a LongTable or inheriting class — aggregate,LongTable-method","title":"Functional API for aggregation over a LongTable or inheriting class — aggregate,LongTable-method","text":"Compute group-operation LongTable object inhering classes.","code":""},{"path":"/reference/aggregate-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional API for aggregation over a LongTable or inheriting class — aggregate,LongTable-method","text":"","code":"# S4 method for LongTable aggregate(   x,   assay,   by,   ...,   subset = TRUE,   nthread = 1,   progress = TRUE,   BPPARAM = NULL,   enlist = TRUE,   moreArgs = list() )"},{"path":"/reference/aggregate-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional API for aggregation over a LongTable or inheriting class — aggregate,LongTable-method","text":"x LongTable inheriting class compute aggregation . assay character(1) assay aggregate . character One valid column names x compute groups using. ... call One aggregations compute group x. name aggregation calls, column name value resulting data.table otherwise default name parsed function name first argument, assumed name column aggregated . subset call R call evaluate perfoming aggregate. allows aggregate subset columns assay assigned parent object. Default TRUE, includes rows. Passed argument [.data.table. nthread numeric(1) Number threads use split-apply-combine parallelization. Uses BiocParllel::bplapply nthread > 1 pass BPPARAM. modify data.table threads, sure use setDTthreads reasonable nested parallelism. See details performance considerations. progress logical(1) Display progress bar parallelized computations? works bpprogressbar<- defined current BiocParallel back-end. BPPARAM BiocParallelParam object. Use customized parallization back-end bplapply. Note, nthread -rides settings BPPARAM long bpworkers<- defined class. enlist logical(1) Default TRUE. Set FALSE evaluate first call ... within data.table groups. See details information. moreArgs list() named list item argument one calls ... column table aggregated. Use parameterize calls. Please note added aggregate calls unless specify names call.","code":""},{"path":"/reference/aggregate-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional API for aggregation over a LongTable or inheriting class — aggregate,LongTable-method","text":"data.table aggregation results.","code":""},{"path":[]},{"path":"/reference/aggregate-LongTable-method.html","id":"use-of-non-standard-evaluation","dir":"Reference","previous_headings":"","what":"Use of Non-Standard Evaluation","title":"Functional API for aggregation over a LongTable or inheriting class — aggregate,LongTable-method","text":"Arguments ... substituted wrapped list, passed j argument [.data.table internally. function currently tries build informative column names unnamed arguments ... appending name function call name first argument, assumed column name aggregated . argument ... named, column name value resulting data.table.","code":""},{"path":"/reference/aggregate-LongTable-method.html","id":"enlisting","dir":"Reference","previous_headings":"","what":"Enlisting","title":"Functional API for aggregation over a LongTable or inheriting class — aggregate,LongTable-method","text":"primary use case enlist=FALSE allow computation dependent aggregations, output previous aggregation required subsequent one. case, wrap call { assign intermediate results variables, returning final results list list item become column final table corresponding name. Name inference disabled case, since assumed name returned list items appropriately. major advantage multiple calls aggregate overhead parallelization paid even complex multi-step computations like fitting model, capturing paramters, making predictions using . also allows capturing arbitrarily complex calls can recomputed later using update,TreatmentResponseExperiment-method potential disadvantage increased RAM usage per thread due storing intermediate values variables, well memory allocation overhead associate therewith.","code":""},{"path":[]},{"path":"/reference/aggregate-data.table-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional S4 API for aggregation over a data.table object. — aggregate,data.table-method","title":"Functional S4 API for aggregation over a data.table object. — aggregate,data.table-method","text":"Compute group-operation data.table functional, pipe compatible format.","code":""},{"path":"/reference/aggregate-data.table-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional S4 API for aggregation over a data.table object. — aggregate,data.table-method","text":"","code":"# S4 method for data.table aggregate(   x,   by,   ...,   subset = TRUE,   nthread = 1,   progress = TRUE,   BPPARAM = NULL,   enlist = TRUE,   moreArgs = list() )"},{"path":"/reference/aggregate-data.table-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional S4 API for aggregation over a data.table object. — aggregate,data.table-method","text":"x data.table compute aggregation . character One valid column names x compute groups using. ... call One aggregations compute group x. name aggregation calls, column name value resulting data.table otherwise default name parsed function name first argument, assumed name column aggregated . subset call R call evaluate perfoming aggregate. allows aggregate subset columns assay assigned parent object. Default TRUE, includes rows. Passed argument [.data.table. nthread numeric(1) Number threads use split-apply-combine parallelization. Uses BiocParllel::bplapply nthread > 1 pass BPPARAM. modify data.table threads, sure use setDTthreads reasonable nested parallelism. See details performance considerations. progress logical(1) Display progress bar parallelized computations? works bpprogressbar<- defined current BiocParallel back-end. BPPARAM BiocParallelParam object. Use customized parallization back-end bplapply. Note, nthread -rides settings BPPARAM long bpworkers<- defined class. enlist logical(1) Default TRUE. Set FALSE evaluate first call ... within data.table groups. See details information. moreArgs list() named list item argument one calls ... column table aggregated. Use parameterize calls. Please note added aggregate calls unless specify names call.","code":""},{"path":"/reference/aggregate-data.table-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional S4 API for aggregation over a data.table object. — aggregate,data.table-method","text":"data.table aggregated results aggregations attribute capturing metadata last aggregation performed table.","code":""},{"path":"/reference/aggregate-data.table-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functional S4 API for aggregation over a data.table object. — aggregate,data.table-method","text":"S4 method override default aggregate method data.frame need call aggregate.data.frame directly get original S3 method data.table.","code":""},{"path":"/reference/aggregate-data.table-method.html","id":"use-of-non-standard-evaluation","dir":"Reference","previous_headings":"","what":"Use of Non-Standard Evaluation","title":"Functional S4 API for aggregation over a data.table object. — aggregate,data.table-method","text":"Arguments ... substituted wrapped list, passed j argument [.data.table internally. function currently tries build informative column names unnamed arguments ... appending name function call name first argument, assumed column name aggregated . argument ... named, column name value resulting data.table.","code":""},{"path":"/reference/aggregate-data.table-method.html","id":"enlisting","dir":"Reference","previous_headings":"","what":"Enlisting","title":"Functional S4 API for aggregation over a data.table object. — aggregate,data.table-method","text":"primary use case enlist=FALSE allow computation dependent aggregations, output previous aggregation required subsequent one. case, wrap call { assign intermediate results variables, returning final results list list item become column final table corresponding name. Name inference disabled case, since assumed name returned list items appropriately. major advantage multiple calls aggregate overhead parallelization paid even complex multi-step computations like fitting model, capturing paramters, making predictions using . also allows capturing arbitrarily complex calls can recomputed later using update,TreatmentResponseExperiment-method potential disadvantage increased RAM usage per thread due storing intermediate values variables, well memory allocation overhead associate therewith.","code":""},{"path":"/reference/aggregate2.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional API for data.table aggregation which allows capture of associated\naggregate calls so they can be recomputed later. — aggregate2","title":"Functional API for data.table aggregation which allows capture of associated\naggregate calls so they can be recomputed later. — aggregate2","text":"Functional API data.table aggregation allows capture associated aggregate calls can recomputed later.","code":""},{"path":"/reference/aggregate2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional API for data.table aggregation which allows capture of associated\naggregate calls so they can be recomputed later. — aggregate2","text":"","code":"aggregate2(   x,   by,   ...,   nthread = 1,   progress = interactive(),   BPPARAM = NULL,   enlist = TRUE,   moreArgs = list() )"},{"path":"/reference/aggregate2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional API for data.table aggregation which allows capture of associated\naggregate calls so they can be recomputed later. — aggregate2","text":"x data.table character One valid column names x compute groups using. ... call One aggregations compute group x. name aggregation calls, column name value resulting data.table otherwise default name parsed function name first argument, assumed name column aggregated . nthread numeric(1) Number threads use split-apply-combine parallelization. Uses BiocParllel::bplapply nthread > 1 pass BPPARAM. modify data.table threads, sure use setDTthreads reasonable nested parallelism. See details performance considerations. progress logical(1) Display progress bar parallelized computations? works bpprogressbar<- defined current BiocParallel back-end. BPPARAM BiocParallelParam object. Use customized parallization back-end bplapply. Note, nthread -rides settings BPPARAM long bpworkers<- defined class. enlist logical(1) Default TRUE. Set FALSE evaluate first call ... within data.table groups. See details information. moreArgs list() named list item argument one calls ... column table aggregated. Use parameterize calls. Please note added aggregate calls unless specify names call.","code":""},{"path":"/reference/aggregate2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional API for data.table aggregation which allows capture of associated\naggregate calls so they can be recomputed later. — aggregate2","text":"data.table aggregation results.","code":""},{"path":[]},{"path":"/reference/aggregate2.html","id":"use-of-non-standard-evaluation","dir":"Reference","previous_headings":"","what":"Use of Non-Standard Evaluation","title":"Functional API for data.table aggregation which allows capture of associated\naggregate calls so they can be recomputed later. — aggregate2","text":"Arguments ... substituted wrapped list, passed j argument [.data.table internally. function currently tries build informative column names unnamed arguments ... appending name function call name first argument, assumed column name aggregated . argument ... named, column name value resulting data.table.","code":""},{"path":"/reference/aggregate2.html","id":"enlisting","dir":"Reference","previous_headings":"","what":"Enlisting","title":"Functional API for data.table aggregation which allows capture of associated\naggregate calls so they can be recomputed later. — aggregate2","text":"primary use case enlist=FALSE allow computation dependent aggregations, output previous aggregation required subsequent one. case, wrap call { assign intermediate results variables, returning final results list list item become column final table corresponding name. Name inference disabled case, since assumed name returned list items appropriately. major advantage multiple calls aggregate overhead parallelization paid even complex multi-step computations like fitting model, capturing paramters, making predictions using . also allows capturing arbitrarily complex calls can recomputed later using update,TreatmentResponseExperiment-method potential disadvantage increased RAM usage per thread due storing intermediate values variables, well memory allocation overhead associate therewith.","code":""},{"path":[]},{"path":"/reference/amcc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate an Adaptive Matthews Correlation Coefficient — amcc","title":"Calculate an Adaptive Matthews Correlation Coefficient — amcc","text":"function calculates Adaptive Matthews Correlation Coefficient (AMCC) two vectors values length. assumes entries two vectors paired. Adaptive Matthews Correlation Coefficient two vectors values defined Maximum Matthews Coefficient possible binary splits ranks two vectors. way, calculates best possible agreement binary classifier two vectors data. AMCC low, impossible find binary classification two vectors high degree concordance.","code":""},{"path":"/reference/amcc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate an Adaptive Matthews Correlation Coefficient — amcc","text":"","code":"amcc(x, y, step.prct = 0, min.cat = 3, nperm = 1000, nthread = 1, ...)"},{"path":"/reference/amcc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate an Adaptive Matthews Correlation Coefficient — amcc","text":"x, y Two paired vectors values. replicates observations experiments example. step.prct Instead testing possible splits data, possible test steps percentage size total number ranks x/y. variable 0, function defaults testing possible splits. min.cat minimum number members per category. Classifications less members fitting categories considered. nperm number perumatation use estimating significance. 0, p-value calculated. nthread Number threads parallize . AMCC calculation permutation testing done parallel. ... Additional arguments","code":""},{"path":"/reference/amcc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate an Adaptive Matthews Correlation Coefficient — amcc","text":"Returns list two elements. $amcc contains highest 'mcc' value splits, p value, well rank split done.","code":""},{"path":"/reference/amcc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate an Adaptive Matthews Correlation Coefficient — amcc","text":"","code":"x <- c(1,2,3,4,5,6,7) y <- c(1,3,5,4,2,7,6) amcc(x,y, min.cat=2) #> $amcc #> mcc   p  n1  n2   n  #> 1.0 0.1 2.0 4.0 6.0  #>  #> $mcc #>        estimate p.value #> [1,] -0.1666667      NA #> [2,]  1.0000000     0.1 #> [3,]  0.4166667      NA #> [4,]  0.4166667      NA #> [5,]  0.3000000      NA #> [6,]  1.0000000      NA #>"},{"path":"/reference/as.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a LongTable to a TreatmentResponseExperiment — as","title":"Coerce a LongTable to a TreatmentResponseExperiment — as","text":"Coerce LongTable data.table. Currently supports coercing data.table data.frame Coerce data.table proper configuration attributes back LongTable","code":""},{"path":"/reference/as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a LongTable to a TreatmentResponseExperiment — as","text":"LongTableDataMapper coerce.","code":""},{"path":"/reference/as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a LongTable to a TreatmentResponseExperiment — as","text":"data object, child-class TreatmentResponseExperiment. data.table data LongTable. data.table containing data LongTable, `longTableDataMapper' attribute containg metadata needed reverse coercing operation. LongTable object configured longTableDataMapper data.table long format data data.frame long format data . SummarizedExperiment assay BumpyMatrix TREDataMapper object.","code":""},{"path":[]},{"path":"/reference/as.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce a LongTable to a TreatmentResponseExperiment — as","text":"","code":"data(clevelandSmall_cSet) TRE <- as(treatmentResponse(clevelandSmall_cSet),     \"TreatmentResponseExperiment\") TRE #> <TreatmentResponseExperiment>  #>    dim:  9 10  #>    assays(2): sensitivity profiles  #>    rownames(9): radiation:1:1 radiation:1:2 ... radiation:8:1 radiation:10:1  #>    rowData(3): treatment1id treatment1dose replicate_id  #>    colnames(10): CHP-212 IMR-32 KP-N-S19s ... SK-N-SH SNU-245 SNU-869  #>    colData(2): sampleid rn  #>    metadata(1): experiment_metadata   as(merckLongTable, 'data.table') #>               combination_name      drug1id    drug2id drug1dose drug2dose #>    1:        5-FU & Bortezomib         5-FU Bortezomib    0.3500   0.00045 #>    2:        5-FU & Bortezomib         5-FU Bortezomib    0.3500   0.00045 #>    3:        5-FU & Bortezomib         5-FU Bortezomib    0.3500   0.00045 #>    4:        5-FU & Bortezomib         5-FU Bortezomib    0.3500   0.00045 #>    5:        5-FU & Bortezomib         5-FU Bortezomib    0.3500   0.00045 #>   ---                                                                      #> 3796: geldanamycin & Topotecan geldanamycin  Topotecan    0.0223   0.07750 #> 3797: geldanamycin & Topotecan geldanamycin  Topotecan    0.0223   0.07750 #> 3798: geldanamycin & Topotecan geldanamycin  Topotecan    0.0223   0.07750 #> 3799: geldanamycin & Topotecan geldanamycin  Topotecan    0.0223   0.07750 #> 3800: geldanamycin & Topotecan geldanamycin  Topotecan    0.0223   0.07750 #>       sampleid batchid viability1 viability2 viability3 viability4 #>    1:    A2058       1      0.814      0.754      0.765      0.849 #>    2:    A2780       1      0.214      0.195      0.186      0.223 #>    3:     A375       1      1.064      1.080      1.082      1.009 #>    4:     A427       1      0.675      0.582      0.482      0.516 #>    5:    CAOV3       1      0.845      0.799      0.799      0.759 #>   ---                                                              #> 3796:    A2058       1      0.090      0.043      0.112      0.103 #> 3797:    A2780       1      0.025      0.022      0.029      0.023 #> 3798:     A375       1      0.151      0.146      0.144      0.171 #> 3799:     A427       1      0.142      0.166      0.124      0.175 #> 3800:    CAOV3       1      0.091      0.084      0.134      0.119 #>       mu/muMax_published X/X0_published #>    1:              0.880          0.847 #>    2:              0.384          0.426 #>    3:              1.033          1.047 #>    4:              0.676          0.638 #>    5:              0.708          0.667 #>   ---                                   #> 3796:             -0.187          0.193 #> 3797:             -0.445          0.135 #> 3798:              0.090          0.283 #> 3799:             -0.012          0.246 #> 3800:             -1.935          0.017  dataTable <- as(merckLongTable, 'data.table') print(attr(dataTable, 'longTableDataMapper')) # Method doesn't work without this #> <LongTableDataMapper>  #> rawdata: NA  #> rowDataMap: #>   rowIDs: drug1id, drug2id, drug1dose, drug2dose #>   rowMeta: combination_name #> colDataMap: #>   colIDs: sampleid, batchid #>   colMeta:  #> assayMap: #>   sensitivity: #>     keys: drug1id, drug2id, drug1dose, drug2dose, sampleid, batchid #>     values: viability1, viability2, viability3, viability4 #>   profiles: #>     keys: drug1id, drug2id, drug1dose, drug2dose, sampleid, batchid #>     values: mu/muMax_published, X/X0_published #> metadataMap: NA as(dataTable, 'LongTable') #> 2024-01-18 21:36:01 Building assay index... #> 2024-01-18 21:36:01 Joining rowData to assayIndex... #> 2024-01-18 21:36:02 Joining colData to assayIndex... #> 2024-01-18 21:36:03 Joining assays to assayIndex... #> 2024-01-18 21:36:04 Setting assayIndex key... #> 2024-01-18 21:36:04 Building LongTable... #>  #> <LongTable>  #>    dim:  744 12  #>    assays(2): sensitivity profiles  #>    rownames(744): 5-FU:Bortezomib:0.35:0.00045 5-FU:Bortezomib:0.35:0.002 ... geldanamycin:Topotecan:0.0223:0.0223 geldanamycin:Topotecan:0.0223:0.0775  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(12): A2058:1 A2058:3 A2780:1 ... CAOV3:1 CAOV3:2 CAOV3:3  #>    colData(2): sampleid batchid  #>    metadata(0): none   SE <- molecularProfilesSlot(clevelandSmall_cSet)[[1]] as(SE, 'data.table') #> Warning: Arguments in '...' ignored #> Warning: Arguments in '...' ignored #> Warning: Dropped S4 metadata during coercion to data.table! #>              .feature                                           .sample #>    1: ENSG00000000003       BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860 #>    2: ENSG00000000003       BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790 #>    3: ENSG00000000003       CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638 #>    4: ENSG00000000003       CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634 #>    5: ENSG00000000003 GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 #>   ---                                                                   #> 8996: ENSG00000068394 GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 #> 8997: ENSG00000068394 GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 #> 8998: ENSG00000068394       NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152 #> 8999: ENSG00000068394       SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474 #> 9000: ENSG00000068394       WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582 #>           exprs se.exprs                                        samplename #>    1:  9.596987       NA       BUNDS_p_NCLE_RNA5_HG-U133_Plus_2_B11_419860 #>    2:  9.924551       NA       BUNDS_p_NCLE_RNA5_HG-U133_Plus_2_F07_419790 #>    3:  4.878338       NA       CASED_p_NCLE_RNA4_HG-U133_Plus_2_G02_383638 #>    4:  4.865308       NA       CASED_p_NCLE_RNA4_HG-U133_Plus_2_G03_383634 #>    5: 11.459240       NA GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_C05_587588 #>   ---                                                                      #> 8996:  8.119580       NA GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_C05_587588 #> 8997:  8.683403       NA GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_G02_587654 #> 8998:  8.507980       NA       NIECE_p_NCLE_RNA3_HG-U133_Plus_2_G10_296152 #> 8999:  8.810289       NA       SILOS_p_NCLE_RNA9_HG-U133_Plus_2_A04_523474 #> 9000:  9.256034       NA       WATCH_p_NCLE_RNA8_HG-U133_Plus_2_B04_474582 #>                                                       filename       chiptype #>    1:       BUNDS_p_NCLE_RNA5_HG-U133_Plus_2_B11_419860.CEL.gz HG-U133_Plus_2 #>    2:       BUNDS_p_NCLE_RNA5_HG-U133_Plus_2_F07_419790.CEL.gz HG-U133_Plus_2 #>    3:       CASED_p_NCLE_RNA4_HG-U133_Plus_2_G02_383638.CEL.gz HG-U133_Plus_2 #>    4:       CASED_p_NCLE_RNA4_HG-U133_Plus_2_G03_383634.CEL.gz HG-U133_Plus_2 #>    5: GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_C05_587588.CEL.gz HG-U133_Plus_2 #>   ---                                                                         #> 8996: GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_C05_587588.CEL.gz HG-U133_Plus_2 #> 8997: GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_G02_587654.CEL.gz HG-U133_Plus_2 #> 8998:       NIECE_p_NCLE_RNA3_HG-U133_Plus_2_G10_296152.CEL.gz HG-U133_Plus_2 #> 8999:       SILOS_p_NCLE_RNA9_HG-U133_Plus_2_A04_523474.CEL.gz HG-U133_Plus_2 #> 9000:       WATCH_p_NCLE_RNA8_HG-U133_Plus_2_B04_474582.CEL.gz HG-U133_Plus_2 #>       hybridization.date hybridization.hour   file.day file.hour batch #>    1:           12/19/08           11:43:19 2009-01-07  13:06:03    NA #>    2:           12/19/08           11:30:25 2009-01-07  13:05:45    NA #>    3:           10/29/08           08:04:03 2008-11-04  14:19:49    NA #>    4:           10/29/08           07:52:47 2008-11-04  14:19:49    NA #>    5:         2010-05-21          17:07:46Z 2010-05-26  16:35:08    NA #>   ---                                                                  #> 8996:         2010-05-21          17:07:46Z 2010-05-26  16:35:08    NA #> 8997:         2010-05-21          16:45:06Z 2010-05-26  16:35:21    NA #> 8998:           07/15/08           12:54:10 2008-07-24  14:23:47    NA #> 8999:         2009-12-08          20:44:59Z 2009-12-11  14:20:50    NA #> 9000:         2009-08-14          17:15:45Z 2009-08-19  16:16:45    NA #>        sampleid                 CCLE.name Cell.line.primary.name #>    1: KP-N-S19s KPNSI9S_AUTONOMIC_GANGLIA              KP-N-SI9s #>    2:   SK-N-SH   SKNSH_AUTONOMIC_GANGLIA                SK-N-SH #>    3:   SK-N-FI   SKNFI_AUTONOMIC_GANGLIA                SK-N-FI #>    4:   SK-N-AS   SKNAS_AUTONOMIC_GANGLIA                SK-N-AS #>    5:   SNU-245      SNU245_BILIARY_TRACT                SNU-245 #>   ---                                                            #> 8996:   SNU-245      SNU245_BILIARY_TRACT                SNU-245 #> 8997:    IMR-32   IMR32_AUTONOMIC_GANGLIA                 IMR-32 #> 8998:   CHP-212  CHP212_AUTONOMIC_GANGLIA                CHP-212 #> 8999: MHH-NB-11 MHHNB11_AUTONOMIC_GANGLIA              MHH-NB-11 #> 9000:       NB1     NB1_AUTONOMIC_GANGLIA                   NB-1 #>       Cell.line.aliases Gender      Site.Primary     Histology Hist.Subtype1 #>    1:         KP-N-S19s      M autonomic_ganglia neuroblastoma            NS #>    2:              <NA>      F autonomic_ganglia neuroblastoma            NS #>    3:           SK-N-F1      M autonomic_ganglia neuroblastoma            NS #>    4:              <NA>      F autonomic_ganglia neuroblastoma            NS #>    5:       NCI-SNU-245   <NA>     biliary_tract     carcinoma            NS #>   ---                                                                        #> 8996:       NCI-SNU-245   <NA>     biliary_tract     carcinoma            NS #> 8997:              <NA>      M autonomic_ganglia neuroblastoma            NS #> 8998:              <NA>   <NA> autonomic_ganglia neuroblastoma            NS #> 8999:              <NA>      M autonomic_ganglia neuroblastoma            NS #> 9000:              <NA>      M autonomic_ganglia neuroblastoma            NS #>                                                                                       Notes #>    1:                                                                                  <NA> #>    2: Identical lines: SH-SY5Y is a subclone derived from SK-N-SH and is identical to LAN-5 #>    3:                                                                                  <NA> #>    4:                                                                                  <NA> #>    5:                                                                                  <NA> #>   ---                                                                                       #> 8996:                                                                                  <NA> #> 8997:                                                                                  <NA> #> 8998:                                                                                  <NA> #> 8999:                                                                                  <NA> #> 9000:                                                                                  <NA> #>       Source                                 Expression.arrays #>    1:  HSRRB       BUNDS_p_NCLE_RNA5_HG-U133_Plus_2_B11_419860 #>    2:   ATCC       BUNDS_p_NCLE_RNA5_HG-U133_Plus_2_F07_419790 #>    3:   ATCC       CASED_p_NCLE_RNA4_HG-U133_Plus_2_G02_383638 #>    4:   ATCC       CASED_p_NCLE_RNA4_HG-U133_Plus_2_G03_383634 #>    5:   KCLB GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_C05_587588 #>   ---                                                          #> 8996:   KCLB GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_C05_587588 #> 8997:   ATCC GILDS_p_NCLE_RNA11_Redo_HG-U133_Plus_2_G02_587654 #> 8998:   ATCC       NIECE_p_NCLE_RNA3_HG-U133_Plus_2_G10_296152 #> 8999:   DSMZ       SILOS_p_NCLE_RNA9_HG-U133_Plus_2_A04_523474 #> 9000:  HSRRB       WATCH_p_NCLE_RNA8_HG-U133_Plus_2_B04_474582 #>                                               SNP.arrays Oncomap #>    1:  FIEFS_p_NCLE_DNA_Affy5_GenomeWideSNP_6_H05_410924     yes #>    2:   BOWER_p_NCLE_DNAAffy8_GenomeWideSNP_6_B02_464602     yes #>    3:  FIEFS_p_NCLE_DNA_Affy5_GenomeWideSNP_6_F10_410970     yes #>    4:  FIEFS_p_NCLE_DNA_Affy5_GenomeWideSNP_6_C08_411042     yes #>    5:  QUAFF_p_NCLE_DNAAffy12_GenomeWideSNP_6_C12_592634     yes #>   ---                                                            #> 8996:  QUAFF_p_NCLE_DNAAffy12_GenomeWideSNP_6_C12_592634     yes #> 8997:   LOBBY_p_NCLE_DNAAffy6_GenomeWideSNP_6_C01_437320     yes #> 8998: FASTS_p_NCLE_DNAAffy4_S_GenomeWideSNP_6_D02_335262     yes #> 8999:  AWASH_p_NCLE_DNAAffy10_GenomeWideSNP_6_H08_542886     yes #> 9000:  AWASH_p_NCLE_DNAAffy10_GenomeWideSNP_6_F10_542910     yes #>       Hybrid.Capture.Sequencing batchid #>    1:                       yes      NA #>    2:                       yes      NA #>    3:                       yes      NA #>    4:                       yes      NA #>    5:                       yes      NA #>   ---                                   #> 8996:                       yes      NA #> 8997:                       yes      NA #> 8998:                       yes      NA #> 8999:                       yes      NA #> 9000:                       yes      NA #>                                              rownames.x              Probe #>    1:       BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_B11_419860 ENSG00000000003_at #>    2:       BUNDS_P_NCLE_RNA5_HG-U133_PLUS_2_F07_419790 ENSG00000000003_at #>    3:       CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G02_383638 ENSG00000000003_at #>    4:       CASED_P_NCLE_RNA4_HG-U133_PLUS_2_G03_383634 ENSG00000000003_at #>    5: GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 ENSG00000000003_at #>   ---                                                                      #> 8996: GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_C05_587588 ENSG00000068394_at #> 8997: GILDS_P_NCLE_RNA11_REDO_HG-U133_PLUS_2_G02_587654 ENSG00000068394_at #> 8998:       NIECE_P_NCLE_RNA3_HG-U133_PLUS_2_G10_296152 ENSG00000068394_at #> 8999:       SILOS_P_NCLE_RNA9_HG-U133_PLUS_2_A04_523474 ENSG00000068394_at #> 9000:       WATCH_P_NCLE_RNA8_HG-U133_PLUS_2_B04_474582 ENSG00000068394_at #>         EnsemblGeneId EntrezGeneId Symbol    GeneBioType BEST      rownames.y #>    1: ENSG00000000003         7105 TSPAN6 protein_coding TRUE ENSG00000000003 #>    2: ENSG00000000003         7105 TSPAN6 protein_coding TRUE ENSG00000000003 #>    3: ENSG00000000003         7105 TSPAN6 protein_coding TRUE ENSG00000000003 #>    4: ENSG00000000003         7105 TSPAN6 protein_coding TRUE ENSG00000000003 #>    5: ENSG00000000003         7105 TSPAN6 protein_coding TRUE ENSG00000000003 #>   ---                                                                         #> 8996: ENSG00000068394        27238  GPKOW protein_coding TRUE ENSG00000068394 #> 8997: ENSG00000068394        27238  GPKOW protein_coding TRUE ENSG00000068394 #> 8998: ENSG00000068394        27238  GPKOW protein_coding TRUE ENSG00000068394 #> 8999: ENSG00000068394        27238  GPKOW protein_coding TRUE ENSG00000068394 #> 9000: ENSG00000068394        27238  GPKOW protein_coding TRUE ENSG00000068394 #>            rownames.1 #>    1: ENSG00000000003 #>    2: ENSG00000000003 #>    3: ENSG00000000003 #>    4: ENSG00000000003 #>    5: ENSG00000000003 #>   ---                 #> 8996: ENSG00000068394 #> 8997: ENSG00000068394 #> 8998: ENSG00000068394 #> 8999: ENSG00000068394 #> 9000: ENSG00000068394  SE <- molecularProfilesSlot(clevelandSmall_cSet)[[1]] as(SE, 'data.frame') #> Warning: Arguments in '...' ignored #> Warning: Arguments in '...' ignored #> Warning: Dropped S4 metadata during coercion to data.table!"},{"path":"/reference/as.long.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce from data.table to LongTable — as.long.table","title":"Coerce from data.table to LongTable — as.long.table","text":"Coerce data.table proper configuration attributes back LongTable","code":""},{"path":"/reference/as.long.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce from data.table to LongTable — as.long.table","text":"","code":"as.long.table(x)"},{"path":"/reference/as.long.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce from data.table to LongTable — as.long.table","text":"x data.frame 'longTableDataMapper' attribute, containing three lists named assayCols, rowDataCols colDataCols. attribute automatically created coercing LongTable data.table.","code":""},{"path":"/reference/as.long.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce from data.table to LongTable — as.long.table","text":"LongTable object configured longTableDataMapper","code":""},{"path":"/reference/as.long.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce from data.table to LongTable — as.long.table","text":"","code":"dataTable <- as(merckLongTable, 'data.table') print(attr(dataTable, 'longTableDataMapper')) # Method doesn't work without this #> <LongTableDataMapper>  #> rawdata: NA  #> rowDataMap: #>   rowIDs: drug1id, drug2id, drug1dose, drug2dose #>   rowMeta: combination_name #> colDataMap: #>   colIDs: sampleid, batchid #>   colMeta:  #> assayMap: #>   sensitivity: #>     keys: drug1id, drug2id, drug1dose, drug2dose, sampleid, batchid #>     values: viability1, viability2, viability3, viability4 #>   profiles: #>     keys: drug1id, drug2id, drug1dose, drug2dose, sampleid, batchid #>     values: mu/muMax_published, X/X0_published #> metadataMap: NA as.long.table(dataTable) #> 2024-01-18 21:36:05 Building assay index... #> 2024-01-18 21:36:05 Joining rowData to assayIndex... #> 2024-01-18 21:36:05 Joining colData to assayIndex... #> 2024-01-18 21:36:06 Joining assays to assayIndex... #> 2024-01-18 21:36:07 Setting assayIndex key... #> 2024-01-18 21:36:07 Building LongTable... #>  #> <LongTable>  #>    dim:  744 12  #>    assays(2): sensitivity profiles  #>    rownames(744): 5-FU:Bortezomib:0.35:0.00045 5-FU:Bortezomib:0.35:0.002 ... geldanamycin:Topotecan:0.0223:0.0223 geldanamycin:Topotecan:0.0223:0.0775  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(12): A2058:1 A2058:3 A2780:1 ... CAOV3:1 CAOV3:2 CAOV3:3  #>    colData(2): sampleid batchid  #>    metadata(0): none"},{"path":"/reference/assay-LongTableDataMapper-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the data for an assay from a LongTableDataMapper — assay,LongTableDataMapper,ANY-method","title":"Extract the data for an assay from a LongTableDataMapper — assay,LongTableDataMapper,ANY-method","text":"Extract data assay LongTableDataMapper","code":""},{"path":"/reference/assay-LongTableDataMapper-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the data for an assay from a LongTableDataMapper — assay,LongTableDataMapper,ANY-method","text":"","code":"# S4 method for LongTableDataMapper,ANY assay(x, i, withDimnames = TRUE)"},{"path":"/reference/assay-LongTableDataMapper-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the data for an assay from a LongTableDataMapper — assay,LongTableDataMapper,ANY-method","text":"x LongTableDataMapper object retrive assay data form according assayMap slot. character(1) Name assay assayMap slot x. withDimnames logical(1) compatibility SummarizedExperiment::assay generic. used.","code":""},{"path":"/reference/assay-LongTableDataMapper-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the data for an assay from a LongTableDataMapper — assay,LongTableDataMapper,ANY-method","text":"data.table Data specified assay extracted rawdata slot x.","code":""},{"path":"/reference/assay-TREDataMapper-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the data for an assay from a TREDataMapper — assay,TREDataMapper,ANY-method","title":"Extract the data for an assay from a TREDataMapper — assay,TREDataMapper,ANY-method","text":"Extract data assay TREDataMapper","code":""},{"path":"/reference/assay-TREDataMapper-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the data for an assay from a TREDataMapper — assay,TREDataMapper,ANY-method","text":"","code":"# S4 method for TREDataMapper,ANY assay(x, i, withDimnames = TRUE)"},{"path":"/reference/assay-TREDataMapper-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the data for an assay from a TREDataMapper — assay,TREDataMapper,ANY-method","text":"x TREDataMapper object retrive assay data form according assayMap slot. character(1) Name assay assayMap slot x. withDimnames logical(1) compatibility SummarizedExperiment::assay generic. used.","code":""},{"path":"/reference/assay-TREDataMapper-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the data for an assay from a TREDataMapper — assay,TREDataMapper,ANY-method","text":"data.table Data specified assay extracted rawdata slot x.","code":""},{"path":"/reference/assayCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic to access the assay columns of a rectangular object. — assayCols","title":"Generic to access the assay columns of a rectangular object. — assayCols","text":"Generic access assay columns rectangular object.","code":""},{"path":"/reference/assayCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic to access the assay columns of a rectangular object. — assayCols","text":"","code":"assayCols(object, ...)"},{"path":"/reference/assayCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic to access the assay columns of a rectangular object. — assayCols","text":"object S4 object get assay ids . ... Allow new arguments generic.","code":""},{"path":"/reference/assayCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic to access the assay columns of a rectangular object. — assayCols","text":"Depends implemented method.","code":""},{"path":"/reference/assayCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic to access the assay columns of a rectangular object. — assayCols","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/assayIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and assayIndex — assayIndex","title":"Retrieve and assayIndex — assayIndex","text":"Retrieve assayIndex","code":""},{"path":"/reference/assayIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and assayIndex — assayIndex","text":"","code":"assayIndex(x, ...)"},{"path":"/reference/assayIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and assayIndex — assayIndex","text":"x S4 object. ... pairlist Allow definition new parameters implementations generic.","code":""},{"path":"/reference/assayIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and assayIndex — assayIndex","text":"object representing \"assayIndex\" S4 object.","code":""},{"path":"/reference/assayIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and assayIndex — assayIndex","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/assayKeys.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a set of assayKeys — assayKeys","title":"Retrieve a set of assayKeys — assayKeys","text":"Retrieve set assayKeys","code":""},{"path":"/reference/assayKeys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a set of assayKeys — assayKeys","text":"","code":"assayKeys(x, ...)"},{"path":"/reference/assayKeys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a set of assayKeys — assayKeys","text":"x S4 object. ... pairlist Allow definition new parameters implementations generic.","code":""},{"path":"/reference/assayKeys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a set of assayKeys — assayKeys","text":"object representing \"assayKeys\" S4 object.","code":""},{"path":"/reference/assayKeys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a set of assayKeys — assayKeys","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/assays-LongTableDataMapper-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the data for all assays from a LongTableDataMapper — assays,LongTableDataMapper-method","title":"Extract the data for all assays from a LongTableDataMapper — assays,LongTableDataMapper-method","text":"Extract data assays LongTableDataMapper","code":""},{"path":"/reference/assays-LongTableDataMapper-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the data for all assays from a LongTableDataMapper — assays,LongTableDataMapper-method","text":"","code":"# S4 method for LongTableDataMapper assays(x, withDimnames = TRUE)"},{"path":"/reference/assays-LongTableDataMapper-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the data for all assays from a LongTableDataMapper — assays,LongTableDataMapper-method","text":"x LongTableDataMapper object retrive assay data form according assayMap slot. withDimNames logical(1) compatibility SummarizedExperiment::assay generic. used.","code":""},{"path":"/reference/assays-LongTableDataMapper-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the data for all assays from a LongTableDataMapper — assays,LongTableDataMapper-method","text":"list Data assays extracted rawdata slot x list data.tables, keys table id_columns.","code":""},{"path":"/reference/assays-TREDataMapper-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the data for all assays from a TREDataMapper — assays,TREDataMapper-method","title":"Extract the data for all assays from a TREDataMapper — assays,TREDataMapper-method","text":"Extract data assays TREDataMapper","code":""},{"path":"/reference/assays-TREDataMapper-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the data for all assays from a TREDataMapper — assays,TREDataMapper-method","text":"","code":"# S4 method for TREDataMapper assays(x, withDimnames = TRUE)"},{"path":"/reference/assays-TREDataMapper-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the data for all assays from a TREDataMapper — assays,TREDataMapper-method","text":"x TREDataMapper object retrive assay data form according assayMap slot. withDimnames logical(1) compatibility SummarizedExperiment::assay generic. used.","code":""},{"path":"/reference/assays-TREDataMapper-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the data for all assays from a TREDataMapper — assays,TREDataMapper-method","text":"list Data assays extracted rawdata slot x list data.tables, keys table id_columns.","code":""},{"path":"/reference/assignment-immutable.html","id":null,"dir":"Reference","previous_headings":"","what":"Intercept assignment operations for ","title":"Intercept assignment operations for ","text":"Prevents modification objects labelled \"immutable\" S3-class intercepting assignment S3-method dispatch returning error.","code":""},{"path":"/reference/assignment-immutable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intercept assignment operations for ","text":"","code":"\\method{subset}{immutable}(object, ...) <- value  # S3 method for immutable [(object, ...) <- value  # S3 method for immutable [[(object, ...) <- value  # S3 method for immutable $(object, ...) <- value  # S3 method for immutable names(x) <- value  # S3 method for immutable dimnames(x) <- value  \\method{colnames}{immutable}(x) <- value  \\method{rownames}{immutable}(x) <- value"},{"path":"/reference/assignment-immutable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intercept assignment operations for ","text":"object, x R object inherting \"immutable\" S3-class. ... Catch subset arguments various dimensions. value used.","code":""},{"path":"/reference/assignment-immutable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intercept assignment operations for ","text":"None, throws error.","code":""},{"path":"/reference/assignment-immutable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intercept assignment operations for ","text":"","code":"immutable_df <- immutable(data.frame(a=1:5, b=letters[1:5])) # return immutable data.frame immutable_df[1:4, ] #> immutable data.frame  #>   a b #> 1 1 a #> 2 2 b #> 3 3 c #> 4 4 d # return immutable vector immutable_df$a #> immutable integer  #> [1] 1 2 3 4 5"},{"path":"/reference/buildComboProfiles-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an assay table with selected assay profiles for drug combinations — buildComboProfiles,LongTable-method","title":"Build an assay table with selected assay profiles for drug combinations — buildComboProfiles,LongTable-method","text":"Build assay table selected assay profiles drug combinations","code":""},{"path":"/reference/buildComboProfiles-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an assay table with selected assay profiles for drug combinations — buildComboProfiles,LongTable-method","text":"","code":"# S4 method for LongTable buildComboProfiles(object, profiles)"},{"path":"/reference/buildComboProfiles-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build an assay table with selected assay profiles for drug combinations — buildComboProfiles,LongTable-method","text":"object LongTable inheriting class containing curated drug combination data. profiles character vector profile names, .e., column names assays.","code":""},{"path":"/reference/buildComboProfiles-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build an assay table with selected assay profiles for drug combinations — buildComboProfiles,LongTable-method","text":"data.table containing fields treatment1id, treatment1dose, treatment2id, treatment2dose, sampleid, used keys keep track profiles, along columns selected profiles assays. *_1 monothearpy profile treatment 1 combination, rule applies treatment 2.","code":""},{"path":"/reference/buildComboProfiles-LongTable-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build an assay table with selected assay profiles for drug combinations — buildComboProfiles,LongTable-method","text":"","code":"if (FALSE) { combo_profile_1 <- buildComboProfiles(tre, c(\"auc\", \"SCORE\")) combo_profile_2 <- buildComboProfiles(tre, c(\"HS\", \"EC50\", \"E_inf\", \"ZIP\")) }"},{"path":"/reference/buildComboProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an assay table with an S4 object. — buildComboProfiles","title":"Build an assay table with an S4 object. — buildComboProfiles","text":"Build assay table S4 object.","code":""},{"path":"/reference/buildComboProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an assay table with an S4 object. — buildComboProfiles","text":"","code":"buildComboProfiles(object, ...)"},{"path":"/reference/buildComboProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build an assay table with an S4 object. — buildComboProfiles","text":"object S4 S4 object list-like slot containing assays object. ... Allow new arguments defined generic.","code":""},{"path":"/reference/buildComboProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build an assay table with an S4 object. — buildComboProfiles","text":"data.table.","code":""},{"path":"/reference/buildComboProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build an assay table with an S4 object. — buildComboProfiles","text":"","code":"\"This is a generic method!\" #> [1] \"This is a generic method!\""},{"path":"/reference/buildLongTable-character-method.html","id":null,"dir":"Reference","previous_headings":"","what":"LongTable build method from character — buildLongTable,character-method","title":"LongTable build method from character — buildLongTable,character-method","text":"LongTable Create LongTable object single .csv file","code":""},{"path":"/reference/buildLongTable-character-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LongTable build method from character — buildLongTable,character-method","text":"","code":"# S4 method for character buildLongTable(from, rowDataCols, colDataCols, assayCols)"},{"path":"/reference/buildLongTable-character-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LongTable build method from character — buildLongTable,character-method","text":"character Path .csv file containing data metadata build LongTable. rowDataCols list List two character vectors, first specifying one columns used cell identifiers (e.g., cell-line name columns) second containing additional metadata columns related cell identifiers. colDataCols list List two character vectors, first specifying one columns used column identifiers (e.g., drug name columns) second containing additional metadata columns related column identifiers. assayCols list named list character vectors specifying parse assay columns list data.tables. list data.table named name corresponding list item contain columns specified character vector column names list item.","code":""},{"path":"/reference/buildLongTable-character-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LongTable build method from character — buildLongTable,character-method","text":"LongTable object containing one assays, indexed rowID colID.","code":""},{"path":"/reference/buildLongTable-data.frame-method.html","id":null,"dir":"Reference","previous_headings":"","what":"LongTable build method — buildLongTable,data.frame-method","title":"LongTable build method — buildLongTable,data.frame-method","text":"Create LongTable object single data.table data.frame object.","code":""},{"path":"/reference/buildLongTable-data.frame-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LongTable build method — buildLongTable,data.frame-method","text":"","code":"# S4 method for data.frame buildLongTable(from, rowDataCols, colDataCols, assayCols)"},{"path":"/reference/buildLongTable-data.frame-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LongTable build method — buildLongTable,data.frame-method","text":"character Path .csv file containing data metadata build LongTable. rowDataCols list List two character vectors, first specifying one columns used cell identifiers (e.g., cell-line name columns) second containing additional metadata columns related cell identifiers. wish rename columns, assign new names respective character vectors. colDataCols list List two character vectors, first specifying one columns used column identifiers (e.g., drug name columns) second containing additional metadata columns related column identifiers. wish rename columns, assign new names respective character vectors. assayCols list named list character vectors specifying parse assay columns list data.tables. list data.table named name corresponding list item contain columns specified character vector column names list item. names assayCols, assays numbered instead.","code":""},{"path":"/reference/buildLongTable-data.frame-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LongTable build method — buildLongTable,data.frame-method","text":"LongTable object containing one assays, indexed rowID colID.","code":""},{"path":"/reference/buildLongTable-list-method.html","id":null,"dir":"Reference","previous_headings":"","what":"LongTable build method from list — buildLongTable,list-method","title":"LongTable build method from list — buildLongTable,list-method","text":"Create LongTable object list containing file paths, data.frames data.tables.","code":""},{"path":"/reference/buildLongTable-list-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LongTable build method from list — buildLongTable,list-method","text":"","code":"# S4 method for list buildLongTable(from, rowDataCols, colDataCols, assayCols)"},{"path":"/reference/buildLongTable-list-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LongTable build method from list — buildLongTable,list-method","text":"list list containing combination character file paths, data.tables data.frames used construct LongTable. rowDataCols list List two character vectors, first specifying one columns used cell identifiers (e.g., cell-line name columns) second containing additional metadata columns related cell identifiers. colDataCols list List two character vectors, first specifying one columns used column identifiers (e.g., drug name columns) second containing additional metadata columns related column identifiers. assayCols list named list character vectors specifying parse assay columns list data.tables. list data.table named name corresponding list item contain columns specified character vector column names list item.","code":""},{"path":"/reference/buildLongTable-list-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LongTable build method from list — buildLongTable,list-method","text":"LongTable object constructed data .","code":""},{"path":"/reference/buildLongTable-list-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LongTable build method from list — buildLongTable,list-method","text":"","code":"if (FALSE) { assayList <- assays(merckLongTable, withDimnames=TRUE) rowDataCols <- list(rowIDs(merckLongTable), rowMeta(merckLongTable)) colDataCols <- list(colIDs(merckLongTable), colMeta(merckLongTable)) assayCols <- assayCols(merckLongTable) longTable <- buildLongTable(from=assayList, rowDataCols, colDataCols, assayCols) }"},{"path":"/reference/buildLongTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a LongTable object — buildLongTable","title":"Build a LongTable object — buildLongTable","text":"Build LongTable object","code":""},{"path":"/reference/buildLongTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a LongTable object — buildLongTable","text":"","code":"buildLongTable(from, ...)"},{"path":"/reference/buildLongTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a LongTable object — buildLongTable","text":"build LongTable ? ... pairlist Allow definition new parameters implementations generic.","code":""},{"path":"/reference/buildLongTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a LongTable object — buildLongTable","text":"Depends implemented method","code":""},{"path":"/reference/buildLongTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a LongTable object — buildLongTable","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/c.immutable.html","id":null,"dir":"Reference","previous_headings":"","what":"Intercept concatenation for ","title":"Intercept concatenation for ","text":"Ensures c append \"immutable\" class object return immutable class object.","code":""},{"path":"/reference/c.immutable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intercept concatenation for ","text":"","code":"# S3 method for immutable c(x, ...)"},{"path":"/reference/c.immutable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intercept concatenation for ","text":"x R object inheriting \"immutable\" S3-clas ... Objects concatenate x.","code":""},{"path":"/reference/c.immutable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intercept concatenation for ","text":"x one values appended .","code":""},{"path":"/reference/callingWaterfall.html","id":null,"dir":"Reference","previous_headings":"","what":"Drug sensitivity calling using waterfall plots — callingWaterfall","title":"Drug sensitivity calling using waterfall plots — callingWaterfall","text":"Sensitivity calls made using one IC50, ActArea Amax","code":""},{"path":"/reference/callingWaterfall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drug sensitivity calling using waterfall plots — callingWaterfall","text":"","code":"callingWaterfall(   x,   type = c(\"IC50\", \"AUC\", \"AMAX\"),   intermediate.fold = c(4, 1.2, 1.2),   cor.min.linear = 0.95,   name = \"Drug\",   plot = FALSE )"},{"path":"/reference/callingWaterfall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drug sensitivity calling using waterfall plots — callingWaterfall","text":"x type object take ? type ic50: IC50 values micro molar (positive values) actarea: Activity Area, area drug activity curve (positive values) amax: Activity max concentration (positive values) intermediate.fold vector fold changes used define intermediate sensitivities ic50, actarea amax respectively cor.min.linear numeric minimum linear correlation require? name character name output use plot plot boolean Whether plot results","code":""},{"path":"/reference/callingWaterfall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drug sensitivity calling using waterfall plots — callingWaterfall","text":"factor Containing drug sensitivity status sample.","code":""},{"path":"/reference/callingWaterfall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drug sensitivity calling using waterfall plots — callingWaterfall","text":"Sort log IC50s (ActArea Amax) samples generate “waterfall distribution” Identify cutoff: 3.1 waterfall distribution non-linear (pearson cc linear fit <=0.95), estimate major inflection point log IC50 curve point curve maximal distance line drawn start end points distribution. 3.2 waterfall distribution appears linear (pearson cc linear fit > 0.95), use median IC50 instead. Samples within 4-fold IC50 (within 1.2-fold ActArea 20% Amax difference) difference centered around inflection point classified “intermediate”,  samples lower IC50s (ActArea/Amax values) range defined sensitive, IC50s (ActArea/Amax) higher range called “insensitive”. Require least x sensitive x insensitive samples applying criteria (x=5 case).","code":""},{"path":"/reference/callingWaterfall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drug sensitivity calling using waterfall plots — callingWaterfall","text":"","code":"# Dummy example 1 + 1 #> [1] 2"},{"path":"/reference/cash-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Select an assay from a LongTable object — $,LongTable-method","title":"Select an assay from a LongTable object — $,LongTable-method","text":"Select assay LongTable object","code":""},{"path":"/reference/cash-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select an assay from a LongTable object — $,LongTable-method","text":"","code":"# S4 method for LongTable $(x, name)"},{"path":"/reference/cash-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select an assay from a LongTable object — $,LongTable-method","text":"x LongTable object retrieve assay name character name assay get.","code":""},{"path":"/reference/cash-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select an assay from a LongTable object — $,LongTable-method","text":"data.frame assay object.","code":""},{"path":"/reference/cash-LongTable-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select an assay from a LongTable object — $,LongTable-method","text":"","code":"merckLongTable$sensitivity #>            drug1id    drug2id drug1dose drug2dose sampleid batchid #>    1:         5-FU Bortezomib    0.3500   0.00045    A2058       1 #>    2:         5-FU Bortezomib    0.3500   0.00045    A2780       1 #>    3:         5-FU Bortezomib    0.3500   0.00045     A375       1 #>    4:         5-FU Bortezomib    0.3500   0.00045     A427       1 #>    5:         5-FU Bortezomib    0.3500   0.00045    CAOV3       1 #>   ---                                                              #> 3796: geldanamycin  Topotecan    0.0223   0.07750    A2058       1 #> 3797: geldanamycin  Topotecan    0.0223   0.07750    A2780       1 #> 3798: geldanamycin  Topotecan    0.0223   0.07750     A375       1 #> 3799: geldanamycin  Topotecan    0.0223   0.07750     A427       1 #> 3800: geldanamycin  Topotecan    0.0223   0.07750    CAOV3       1 #>               combination_name viability1 viability2 viability3 viability4 #>    1:        5-FU & Bortezomib      0.814      0.754      0.765      0.849 #>    2:        5-FU & Bortezomib      0.214      0.195      0.186      0.223 #>    3:        5-FU & Bortezomib      1.064      1.080      1.082      1.009 #>    4:        5-FU & Bortezomib      0.675      0.582      0.482      0.516 #>    5:        5-FU & Bortezomib      0.845      0.799      0.799      0.759 #>   ---                                                                      #> 3796: geldanamycin & Topotecan      0.090      0.043      0.112      0.103 #> 3797: geldanamycin & Topotecan      0.025      0.022      0.029      0.023 #> 3798: geldanamycin & Topotecan      0.151      0.146      0.144      0.171 #> 3799: geldanamycin & Topotecan      0.142      0.166      0.124      0.175 #> 3800: geldanamycin & Topotecan      0.091      0.084      0.134      0.119"},{"path":"/reference/cash-set-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Update an assay from a LongTable object — $<-,LongTable-method","title":"Update an assay from a LongTable object — $<-,LongTable-method","text":"Update assay LongTable object","code":""},{"path":"/reference/cash-set-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update an assay from a LongTable object — $<-,LongTable-method","text":"","code":"# S4 method for LongTable $(x, name) <- value"},{"path":"/reference/cash-set-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update an assay from a LongTable object — $<-,LongTable-method","text":"x LongTable update assay . name character(1) name assay update value data.frame data.table update assay .","code":""},{"path":"/reference/cash-set-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update an assay from a LongTable object — $<-,LongTable-method","text":"Updates assay name x value, returning invisible NULL.","code":""},{"path":"/reference/cash-set-LongTable-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update an assay from a LongTable object — $<-,LongTable-method","text":"","code":"merckLongTable$sensitivity <- merckLongTable$sensitivity"},{"path":"/reference/checkColumnCardinality.html","id":null,"dir":"Reference","previous_headings":"","what":"Search a data.frame for 1:cardinality relationships between a group\nof columns (your identifiers) and all other columns. — checkColumnCardinality","title":"Search a data.frame for 1:cardinality relationships between a group\nof columns (your identifiers) and all other columns. — checkColumnCardinality","text":"Search data.frame 1:cardinality relationships group columns (identifiers) columns.","code":""},{"path":"/reference/checkColumnCardinality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search a data.frame for 1:cardinality relationships between a group\nof columns (your identifiers) and all other columns. — checkColumnCardinality","text":"","code":"checkColumnCardinality(df, group, cardinality = 1, ...)"},{"path":"/reference/checkColumnCardinality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search a data.frame for 1:cardinality relationships between a group\nof columns (your identifiers) and all other columns. — checkColumnCardinality","text":"df data.frame search 1:cardinality mappings columns group. group character vector one column names check cardinality columns . cardinality cardinality search (.e., 1:cardinality) relationships combination columns group. Defaults 1 (.e., 1:1 mappings). ... Fall arguments data.table::[. developer use. One use case setting verbose=TRUE diagnose slow data.table operations.","code":""},{"path":"/reference/checkColumnCardinality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search a data.frame for 1:cardinality relationships between a group\nof columns (your identifiers) and all other columns. — checkColumnCardinality","text":"character vector names columns cardinality 1:cardinality columns listed group.","code":""},{"path":"/reference/checkColumnCardinality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search a data.frame for 1:cardinality relationships between a group\nof columns (your identifiers) and all other columns. — checkColumnCardinality","text":"","code":"df <- rawdata(exampleDataMapper) checkColumnCardinality(df, group='treatmentid') #> [1] \"sampleid\" \"metadata\""},{"path":"/reference/checkCsetStructure.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to verify the structure of a CoreSet — checkCsetStructure","title":"A function to verify the structure of a CoreSet — checkCsetStructure","text":"function checks structure PharamcoSet, ensuring correct annotations place required slots filled matching samples drugs can properly done across different types data studies.","code":""},{"path":"/reference/checkCsetStructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to verify the structure of a CoreSet — checkCsetStructure","text":"","code":"checkCsetStructure(object, plotDist = FALSE, result.dir = tempdir())"},{"path":"/reference/checkCsetStructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to verify the structure of a CoreSet — checkCsetStructure","text":"object CoreSet verified plotDist function also plot distribution molecular data? result.dir path directory saving plots string. Defaults R sessions tempdir().","code":""},{"path":"/reference/checkCsetStructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to verify the structure of a CoreSet — checkCsetStructure","text":"Prints messages whenever describing errors found structure cSet object passed .","code":""},{"path":"/reference/checkCsetStructure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to verify the structure of a CoreSet — checkCsetStructure","text":"","code":"checkCsetStructure(clevelandSmall_cSet) #> [1] \"rna sampleid does not exist in colData (samples)\\nrnaseq sampleid does not exist in colData (samples)\\nunique.sampleid which is curated sample id across data set should be a column of sample curation slot\""},{"path":"/reference/clevelandSmall_cSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleaveland_mut RadioSet subsetted and cast as CoreSet — clevelandSmall_cSet","title":"Cleaveland_mut RadioSet subsetted and cast as CoreSet — clevelandSmall_cSet","text":"dataset just dummy object derived Cleveland_mut RadioSet RadioGx R package. contents interpreted present test functions package provide examples","code":""},{"path":"/reference/clevelandSmall_cSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleaveland_mut RadioSet subsetted and cast as CoreSet — clevelandSmall_cSet","text":"","code":"data(clevelandSmall_cSet)"},{"path":"/reference/clevelandSmall_cSet.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cleaveland_mut RadioSet subsetted and cast as CoreSet — clevelandSmall_cSet","text":"CoreSet object","code":""},{"path":"/reference/clevelandSmall_cSet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cleaveland_mut RadioSet subsetted and cast as CoreSet — clevelandSmall_cSet","text":"Lamb et al. Connectivity Map: using gene-expression signatures connect small molecules, genes, disease. Science, 2006.","code":""},{"path":"/reference/colData-LongTableDataMapper-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,LongTableDataMapper-method","title":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,LongTableDataMapper-method","text":"Convenience method subset colData rawdata slot using assigned colDataMap metadata.","code":""},{"path":"/reference/colData-LongTableDataMapper-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,LongTableDataMapper-method","text":"","code":"# S4 method for LongTableDataMapper colData(x, key = TRUE)"},{"path":"/reference/colData-LongTableDataMapper-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,LongTableDataMapper-method","text":"x LongTableDataMapper object valid data rawdata colDataMap slots. key logical(1) table keyed according id_columns colDataMap slot? sort table memory. Default TRUE.","code":""},{"path":"/reference/colData-LongTableDataMapper-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,LongTableDataMapper-method","text":"data.table colData specified colDataMap slot.","code":""},{"path":"/reference/colData-TREDataMapper-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,TREDataMapper-method","title":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,TREDataMapper-method","text":"Convenience method subset colData rawdata slot using assigned colDataMap metadata.","code":""},{"path":"/reference/colData-TREDataMapper-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,TREDataMapper-method","text":"","code":"# S4 method for TREDataMapper colData(x, key = TRUE)"},{"path":"/reference/colData-TREDataMapper-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,TREDataMapper-method","text":"x TREDataMapper object valid data rawdata colDataMap slots. key logical(1) table keyed according id_columns colDataMap slot? sort table memory. Default TRUE.","code":""},{"path":"/reference/colData-TREDataMapper-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience method to subset the colData out of the rawdata slot using\nthe assigned colDataMap metadata. — colData,TREDataMapper-method","text":"data.table colData specified colDataMap slot.","code":""},{"path":"/reference/colIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic to access the row identifiers for an object. — colIDs","title":"Generic to access the row identifiers for an object. — colIDs","text":"Generic access row identifiers object.","code":""},{"path":"/reference/colIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic to access the row identifiers for an object. — colIDs","text":"","code":"colIDs(object, ...)"},{"path":"/reference/colIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic to access the row identifiers for an object. — colIDs","text":"object S4 object get column id columns . ... ALlow new arguments generic","code":""},{"path":"/reference/colIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic to access the row identifiers for an object. — colIDs","text":"Depends implemented method.","code":""},{"path":"/reference/colIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic to access the row identifiers for an object. — colIDs","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/colMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic to access the column identifiers for a rectangular object. — colMeta","title":"Generic to access the column identifiers for a rectangular object. — colMeta","text":"Generic access column identifiers rectangular object.","code":""},{"path":"/reference/colMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic to access the column identifiers for a rectangular object. — colMeta","text":"","code":"colMeta(object, ...)"},{"path":"/reference/colMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic to access the column identifiers for a rectangular object. — colMeta","text":"object S4 object get column metadata columns . ... ALlow new arguments generic","code":""},{"path":"/reference/colMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic to access the column identifiers for a rectangular object. — colMeta","text":"Depends impemented method.","code":""},{"path":"/reference/colMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic to access the column identifiers for a rectangular object. — colMeta","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/collect_fn_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Collects all function arguments other than the first into a single list\nparameter. — collect_fn_params","title":"Collects all function arguments other than the first into a single list\nparameter. — collect_fn_params","text":"Useful converting regular function function amenable optimization via stats::optim, requires free parameters passed single vector par.","code":""},{"path":"/reference/collect_fn_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collects all function arguments other than the first into a single list\nparameter. — collect_fn_params","text":"","code":"collect_fn_params(fn)"},{"path":"/reference/collect_fn_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collects all function arguments other than the first into a single list\nparameter. — collect_fn_params","text":"fn function non-primitive function refactor first argument becomes second argument parameters must passed vector first argument new function via par parameter.","code":""},{"path":"/reference/collect_fn_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collects all function arguments other than the first into a single list\nparameter. — collect_fn_params","text":"function new non-primitive function first argument par, takes vector parameters optimized, second argument old first argument fn (usually x since independent variable optimize function ).","code":""},{"path":"/reference/collect_fn_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collects all function arguments other than the first into a single list\nparameter. — collect_fn_params","text":"Takes function form f(x, ...), ... number additional function parameters (bot literal ...!) parses function form f(par, x) par vector values ... order arguments appear fn.","code":""},{"path":"/reference/connectivityScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Function computing connectivity scores between two signatures — connectivityScore","title":"Function computing connectivity scores between two signatures — connectivityScore","text":"function finding connectivity two signatures, using either GSEA method based KS statistic, gwc method based weighted spearman statistic. GSEA analysis implemented piano package.","code":""},{"path":"/reference/connectivityScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function computing connectivity scores between two signatures — connectivityScore","text":"","code":"connectivityScore(   x,   y,   method = c(\"fgsea\", \"gwc\"),   nperm = 10000,   nthread = 1,   gwc.method = c(\"spearman\", \"pearson\"),   ... )"},{"path":"/reference/connectivityScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function computing connectivity scores between two signatures — connectivityScore","text":"x matrix first gene signature. case GSEA vector values per gene GSEA looking enrichment. case gwc, matrix, per gene responses first column, significance values second. y matrix second signature. case GSEA, vector regulated genes looking signature, direction determined sign. case gwc, matrix identical size x, per gene responses first column, significance second. method character string identifying method use, 'fgsea' 'gwc' nperm numeric, many permutations done determine significance permutation testing? minimum 100, default 1e4. nthread numeric, many cores run parallel processing . gwc.method character, gwc use weighted spearman pearson statistic? ... Additional arguments passed gsea gwc functions","code":""},{"path":"/reference/connectivityScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function computing connectivity scores between two signatures — connectivityScore","text":"numeric numeric vector score p-value associated ","code":""},{"path":"/reference/connectivityScore.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function computing connectivity scores between two signatures — connectivityScore","text":"F. Pozzi, T. Di Matteo, T. Aste, 'Exponential smoothing weighted correlations', European Physical Journal B, Vol. 85, 6, 2012. DOI: 10.1140/epjb/e2012-20697-x Varemo, L., Nielsen, J. Nookaew, . (2013) Enriching gene set analysis genome-wide data incorporating directionality gene expression combining statistical hypotheses methods. Nucleic Acids Research. 41 (8), 4378-4391. doi: 10.1093/nar/gkt111","code":""},{"path":"/reference/connectivityScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function computing connectivity scores between two signatures — connectivityScore","text":"","code":"xValue <- c(1,5,23,4,8,9,2,19,11,12,13) xSig <- c(0.01, 0.001, .97, 0.01,0.01,0.28,0.7,0.01,0.01,0.01,0.01) yValue <- c(1,5,10,4,8,19,22,19,11,12,13) ySig <- c(0.01, 0.001, .97,0.01, 0.01,0.78,0.9,0.01,0.01,0.01,0.01) xx <- cbind(xValue, xSig) yy <- cbind(yValue, ySig) rownames(xx) <- rownames(yy) <- c('1','2','3','4','5','6','7','8','9','10','11') data.cor <- connectivityScore(xx,yy,method='gwc', gwc.method='spearman', nperm=300)"},{"path":"/reference/cosinePerm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cosine Permutations — cosinePerm","title":"Cosine Permutations — cosinePerm","text":"Computes cosine similarity significance using permutation test. function uses random numbers, ensure reproducibility please call set.seed() running function.","code":""},{"path":"/reference/cosinePerm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cosine Permutations — cosinePerm","text":"","code":"cosinePerm(   x,   y,   nperm = 1000,   alternative = c(\"two.sided\", \"less\", \"greater\"),   include.perm = FALSE,   nthread = 1,   ... )"},{"path":"/reference/cosinePerm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cosine Permutations — cosinePerm","text":"x factor factors first variable y factor factors second variable nperm integer number permutations compute null distribution MCC estimates alternative string indicates alternative hypothesis must one ‘'two.sided'’, ‘'greater'’ ‘'less'’.  can specify just initial letter.  ‘'greater'’ corresponds positive association, ‘'less'’ negative association. Options 'two.sided', 'less', 'greater' include.perm boolean indicates whether estimates null distribution returned. Default set 'FALSE' nthread integer number threads used perform permutations parallel ... list fallthrough parameters","code":""},{"path":"/reference/cosinePerm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cosine Permutations — cosinePerm","text":"list estimate cosine similarity, p-value estimates random permutations (null distribution) include.perm set 'TRUE'","code":""},{"path":"/reference/cosinePerm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cosine Permutations — cosinePerm","text":"","code":"x <- factor(c(1,2,1,2,1)) y <- factor(c(2,2,1,1,1)) cosinePerm(x, y) #> $estimate #> [1] 0.9090909 #>  #> $p.value #> [1] 0.222 #>"},{"path":"/reference/dot-.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function for converting R code to a call — .","title":"Convenience function for converting R code to a call — .","text":"used pass unevaluated R expressions subset [, evaluated correct context.","code":""},{"path":"/reference/dot-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function for converting R code to a call — .","text":"","code":".(...)"},{"path":"/reference/dot-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function for converting R code to a call — .","text":"... pairlist One R expressions convert calls.","code":""},{"path":"/reference/dot-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function for converting R code to a call — .","text":"call R call object containing quoted expression.","code":""},{"path":"/reference/dot-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience function for converting R code to a call — .","text":"","code":".(sample_line1 == 'A2058') #> sample_line1 == \"A2058\""},{"path":"/reference/dot-assayToBumpyMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a LongTable assay into a BumpyMatrix object — .assayToBumpyMatrix","title":"Convert a LongTable assay into a BumpyMatrix object — .assayToBumpyMatrix","text":"Convert LongTable assay BumpyMatrix object","code":""},{"path":"/reference/dot-assayToBumpyMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a LongTable assay into a BumpyMatrix object — .assayToBumpyMatrix","text":"","code":".assayToBumpyMatrix(LT, assay, rows, cols, sparse = TRUE)"},{"path":"/reference/dot-assayToBumpyMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a LongTable assay into a BumpyMatrix object — .assayToBumpyMatrix","text":"LT LongTable assay convert BumpyMatrix assay character(1) valid assay name LT, returned assayNames(LT). rows character() rownames associated assay rowKey cols character() names associated assay colKey sparse logical(1) BumpyMatrix sparse (.e., assay sparse).","code":""},{"path":"/reference/dot-assayToBumpyMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a LongTable assay into a BumpyMatrix object — .assayToBumpyMatrix","text":"BumpyMatrix containing data assay.","code":""},{"path":"/reference/dot-convertCSetMolecularProfilesToSE.html","id":null,"dir":"Reference","previous_headings":"","what":"CSet molecularProfiles from ESets to SEs — .convertCSetMolecularProfilesToSE","title":"CSet molecularProfiles from ESets to SEs — .convertCSetMolecularProfilesToSE","text":"Converts ExpressionSet objects within molecularProfiles slot CoreSet SummarizedExperiments","code":""},{"path":"/reference/dot-convertCSetMolecularProfilesToSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CSet molecularProfiles from ESets to SEs — .convertCSetMolecularProfilesToSE","text":"","code":".convertCSetMolecularProfilesToSE(cSet)"},{"path":"/reference/dot-convertCSetMolecularProfilesToSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CSet molecularProfiles from ESets to SEs — .convertCSetMolecularProfilesToSE","text":"cSet S4 CoreSet containing molecular data ExpressionSets","code":""},{"path":"/reference/dot-convertCSetMolecularProfilesToSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CSet molecularProfiles from ESets to SEs — .convertCSetMolecularProfilesToSE","text":"S4 CoreSet containing molecular data SummarizedExperiments","code":""},{"path":"/reference/dot-distancePointLine.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate shortest distance between point and line — .distancePointLine","title":"Calculate shortest distance between point and line — .distancePointLine","text":"function calculates shortest distance point line 2D space.","code":""},{"path":"/reference/dot-distancePointLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate shortest distance between point and line — .distancePointLine","text":"","code":".distancePointLine(x, y, a = 1, b = 1, c = 0)"},{"path":"/reference/dot-distancePointLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate shortest distance between point and line — .distancePointLine","text":"x x-coordinate point y y-coordinate point numeric(1) coefficient line equation * x + b * y + c = 0. Defaults 1. b numeric(1) coefficient line equation * x + b * y + c = 0. Defaults 1. c numeric(1) intercept line equation * x + b * y + c = 0. Defaults 0.","code":""},{"path":"/reference/dot-distancePointLine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate shortest distance between point and line — .distancePointLine","text":"numeric shortest distance point line.","code":""},{"path":"/reference/dot-distancePointLine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate shortest distance between point and line — .distancePointLine","text":"","code":".distancePointLine(0, 0, 1, -1, 1) #> [1] 0.7071068"},{"path":"/reference/dot-distancePointSegment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate shortest distance between point and line segment — .distancePointSegment","title":"Calculate shortest distance between point and line segment — .distancePointSegment","text":"function calculates shortest distance point line segment 2D space.","code":""},{"path":"/reference/dot-distancePointSegment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate shortest distance between point and line segment — .distancePointSegment","text":"","code":".distancePointSegment(x, y, x1, y1, x2, y2)"},{"path":"/reference/dot-distancePointSegment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate shortest distance between point and line segment — .distancePointSegment","text":"x x-coordinate point y y-coordinate point x1 x-coordinate one endpoint line segment y1 y-coordinate line segment endpoint x-coordinate x1 x2 x-coordinate endpoint line segment y2 y-coordinate line segment endpoint x-coordinate x2","code":""},{"path":"/reference/dot-distancePointSegment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate shortest distance between point and line segment — .distancePointSegment","text":"numeric shortest distance point line segment","code":""},{"path":"/reference/dot-distancePointSegment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate shortest distance between point and line segment — .distancePointSegment","text":"","code":".distancePointSegment(0, 0, -1, 1, 1, -1) #> [1] 0"},{"path":"/reference/dot-fitCurve2.html","id":null,"dir":"Reference","previous_headings":"","what":"Curve fitting via stats::optim L-BFGS-B with fall-back grid/pattern search\nif convergence is not achieved. — .fitCurve2","title":"Curve fitting via stats::optim L-BFGS-B with fall-back grid/pattern search\nif convergence is not achieved. — .fitCurve2","text":"Function fit curve via stats::optim","code":""},{"path":"/reference/dot-fitCurve2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Curve fitting via stats::optim L-BFGS-B with fall-back grid/pattern search\nif convergence is not achieved. — .fitCurve2","text":"","code":".fitCurve2(   par,   x,   y,   fn,   loss,   lower = -Inf,   upper = Inf,   precision = 1e-04,   density = c(2, 10, 5),   step = 0.5/density,   ...,   loss_args = list(),   span = 1,   optim_only = FALSE,   control = list(factr = 1e-08, ndeps = rep(1e-04, times = length(par)), trace = 0) )"},{"path":"/reference/dot-fitCurve2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Curve fitting via stats::optim L-BFGS-B with fall-back grid/pattern search\nif convergence is not achieved. — .fitCurve2","text":"par numeric Vector intial guesses parameters. index par, par[] must within range (lower\\[\\], upper\\[\\]). single upper lower value present, range used parameters par. x numeric Values evaluate fn . y numeric Target output values optimze fn . fn function function optimize. fn arguments passed via ... treated constant removed optimization. assumed first argument x value optimize subsequent arguments free parameters optimized. Transformed optim compatible via make_optim_function first arguement already par. loss character(1) function Either name one bundled loss functions (see details) custom loss function compute output fn x. lower numeric(1) Lower bound parameters. Parallel par. upper numeric(1) Upper bound paramteres. Parallel par. precision numeric smallest step size used pattern search, step size drops value, search terminates. density numeric many points dimension parameter evaluated (density grid) step initial step size pattern search. ... pairlist Fall arguments fn. loss_args list Additional argument loss function. get passed losss via .call analagously using .... span numeric Can safely kept 1, multiplicative ratio initial step size pattern search. Must larger precision. optim_only logical(1) fall back methods optim fails skipped? Default FALSE. control list List control parameters pass optim. See ?optim details.","code":""},{"path":"/reference/dot-fitCurve2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Curve fitting via stats::optim L-BFGS-B with fall-back grid/pattern search\nif convergence is not achieved. — .fitCurve2","text":"numeric Vector optimal parameters fn fit y values x.","code":""},{"path":"/reference/dot-fitCurve2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Curve fitting via stats::optim L-BFGS-B with fall-back grid/pattern search\nif convergence is not achieved. — .fitCurve2","text":"TODO","code":""},{"path":[]},{"path":"/reference/dot-intersectList.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersect A List of More Than Two Vectors — .intersectList","title":"Intersect A List of More Than Two Vectors — .intersectList","text":"Utility find intersection list two vectors lists function extends native intersect function work two arguments.","code":""},{"path":"/reference/dot-intersectList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersect A List of More Than Two Vectors — .intersectList","text":"","code":".intersectList(...)"},{"path":"/reference/dot-intersectList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersect A List of More Than Two Vectors — .intersectList","text":"... list number vector like objects mode, also operated native R set operations","code":""},{"path":"/reference/dot-intersectList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersect A List of More Than Two Vectors — .intersectList","text":"vector like object mode first argument, containing intersection common arguments function","code":""},{"path":"/reference/dot-intersectList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersect A List of More Than Two Vectors — .intersectList","text":"","code":"list1 <- list('a', 'b', 'c') list2 <- list('a', 'c') list3 <- list('a', 'c', 'd') listAll <- .intersectList(list1, list2, list3) listAll #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"c\" #>"},{"path":"/reference/dot-longTableToSummarizedExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert LongTable to gDR Style SummarizedExperiment — .longTableToSummarizedExperiment","title":"Convert LongTable to gDR Style SummarizedExperiment — .longTableToSummarizedExperiment","text":"Convert LongTable gDR Style SummarizedExperiment","code":""},{"path":"/reference/dot-longTableToSummarizedExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert LongTable to gDR Style SummarizedExperiment — .longTableToSummarizedExperiment","text":"","code":".longTableToSummarizedExperiment(LT, assay_names)"},{"path":"/reference/dot-longTableToSummarizedExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert LongTable to gDR Style SummarizedExperiment — .longTableToSummarizedExperiment","text":"LT LongTable convert gDR SummarizedExperiment format. assay_names character() Names rename assays . assumed order assayNames(LT).","code":""},{"path":"/reference/dot-longTableToSummarizedExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert LongTable to gDR Style SummarizedExperiment — .longTableToSummarizedExperiment","text":"SummarizedExperiment object assay LT BumpyMatrixes.","code":""},{"path":"/reference/dot-symSetDiffList.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to find the symmetric set difference of a list of two or more\nvectors or lists — .symSetDiffList","title":"Utility to find the symmetric set difference of a list of two or more\nvectors or lists — .symSetDiffList","text":"function finds symmetric set differnces arguments, defined Union(args)-Intersection(args)","code":""},{"path":"/reference/dot-symSetDiffList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to find the symmetric set difference of a list of two or more\nvectors or lists — .symSetDiffList","text":"","code":".symSetDiffList(...)"},{"path":"/reference/dot-symSetDiffList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to find the symmetric set difference of a list of two or more\nvectors or lists — .symSetDiffList","text":"... list number vector like objects mode, also operated native R set operations","code":""},{"path":"/reference/dot-symSetDiffList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility to find the symmetric set difference of a list of two or more\nvectors or lists — .symSetDiffList","text":"vector like object mode first argument, containing symmetric set difference","code":""},{"path":"/reference/dot-symSetDiffList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility to find the symmetric set difference of a list of two or more\nvectors or lists — .symSetDiffList","text":"","code":"list1 <- list('a', 'b', 'c') list2 <- list('a', 'c') list3 <- list('a', 'c', 'd') listAll <- .symSetDiffList(list1, list2, list3) listAll #> [1] \"b\" \"d\""},{"path":"/reference/dot-unionList.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to find the union between a list of more than two vectors or\nlists — .unionList","title":"Utility to find the union between a list of more than two vectors or\nlists — .unionList","text":"function extends native union function work two arguments.","code":""},{"path":"/reference/dot-unionList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to find the union between a list of more than two vectors or\nlists — .unionList","text":"","code":".unionList(...)"},{"path":"/reference/dot-unionList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to find the union between a list of more than two vectors or\nlists — .unionList","text":"... list number vector like objects mode, also operated native R set operations","code":""},{"path":"/reference/dot-unionList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility to find the union between a list of more than two vectors or\nlists — .unionList","text":"vector like object mode first argument, containing elements arguments passed function","code":""},{"path":"/reference/dot-unionList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility to find the union between a list of more than two vectors or\nlists — .unionList","text":"","code":"list1 <- list('a', 'b') list2 <- list('a', 'c') list3 <- list('c', 'd') listAll <- .unionList(list1, list2, list3) listAll #> [1] \"a\" \"b\" \"c\" \"d\""},{"path":"/reference/drop_fn_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop parameters from a function and replace them with constants\ninside the function body. — drop_fn_params","title":"Drop parameters from a function and replace them with constants\ninside the function body. — drop_fn_params","text":"Drop parameters function replace constants inside function body.","code":""},{"path":"/reference/drop_fn_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop parameters from a function and replace them with constants\ninside the function body. — drop_fn_params","text":"","code":"drop_fn_params(fn, args)"},{"path":"/reference/drop_fn_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop parameters from a function and replace them with constants\ninside the function body. — drop_fn_params","text":"fn function non-primitive function remove parameters (via base::formals(fn)). args list list names function arguments (parameters) remove values appopriate value replace parameter function body.","code":""},{"path":"/reference/drop_fn_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop parameters from a function and replace them with constants\ninside the function body. — drop_fn_params","text":"function new non-primitize function parameters named args deleted values fixed values args function body.","code":""},{"path":"/reference/drugSensitivitySig.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the correlation between a molecular feature and treatment response — drugSensitivitySig","title":"Compute the correlation between a molecular feature and treatment response — drugSensitivitySig","text":"Compute correlation molecular feature treatment response","code":""},{"path":"/reference/drugSensitivitySig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the correlation between a molecular feature and treatment response — drugSensitivitySig","text":"","code":"drugSensitivitySig(object, ...)"},{"path":"/reference/drugSensitivitySig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the correlation between a molecular feature and treatment response — drugSensitivitySig","text":"object object inheriting form CoreGx::CoreSet class ... Allow definition new arguments generic","code":""},{"path":"/reference/drugSensitivitySig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the correlation between a molecular feature and treatment response — drugSensitivitySig","text":"3D array genes x drugs x metric","code":""},{"path":"/reference/endoaggregate-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional API for endomorphic aggregation over a LongTable or\ninheriting class — endoaggregate,LongTable-method","title":"Functional API for endomorphic aggregation over a LongTable or\ninheriting class — endoaggregate,LongTable-method","text":"Compute group-operation LongTable object inhering classes.","code":""},{"path":"/reference/endoaggregate-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional API for endomorphic aggregation over a LongTable or\ninheriting class — endoaggregate,LongTable-method","text":"","code":"# S4 method for LongTable endoaggregate(   x,   ...,   assay,   target = assay,   by,   subset = TRUE,   nthread = 1,   progress = TRUE,   BPPARAM = NULL,   enlist = TRUE,   moreArgs = list() )"},{"path":"/reference/endoaggregate-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional API for endomorphic aggregation over a LongTable or\ninheriting class — endoaggregate,LongTable-method","text":"x LongTable inheriting class compute aggregation . ... call One aggregations compute group x. name aggregation calls, column name value resulting data.table otherwise default name parsed function name first argument, assumed name column aggregated . assay character(1) assay aggregate . target character(1) assay assign results . Defaults assay. character One valid column names x compute groups using. subset call R call evaluate perfoming aggregate. allows aggregate subset columns assay assigned parent object. Default TRUE, includes rows. Passed argument [.data.table. nthread numeric(1) Number threads use split-apply-combine parallelization. Uses BiocParllel::bplapply nthread > 1 pass BPPARAM. modify data.table threads, sure use setDTthreads reasonable nested parallelism. See details performance considerations. progress logical(1) Display progress bar parallelized computations? works bpprogressbar<- defined current BiocParallel back-end. BPPARAM BiocParallelParam object. Use customized parallization back-end bplapply. Note, nthread -rides settings BPPARAM long bpworkers<- defined class. enlist logical(1) Default TRUE. Set FALSE evaluate first call ... within data.table groups. See details information. moreArgs list() named list item argument one calls ... column table aggregated. Use parameterize calls. Please note added aggregate calls unless specify names call.","code":""},{"path":"/reference/endoaggregate-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional API for endomorphic aggregation over a LongTable or\ninheriting class — endoaggregate,LongTable-method","text":"Object class x, aggregation results assigned target, using strategy target existing assay x.","code":""},{"path":[]},{"path":"/reference/endoaggregate-LongTable-method.html","id":"use-of-non-standard-evaluation","dir":"Reference","previous_headings":"","what":"Use of Non-Standard Evaluation","title":"Functional API for endomorphic aggregation over a LongTable or\ninheriting class — endoaggregate,LongTable-method","text":"Arguments ... substituted wrapped list, passed j argument [.data.table internally. function currently tries build informative column names unnamed arguments ... appending name function call name first argument, assumed column name aggregated . argument ... named, column name value resulting data.table.","code":""},{"path":"/reference/endoaggregate-LongTable-method.html","id":"enlisting","dir":"Reference","previous_headings":"","what":"Enlisting","title":"Functional API for endomorphic aggregation over a LongTable or\ninheriting class — endoaggregate,LongTable-method","text":"primary use case enlist=FALSE allow computation dependent aggregations, output previous aggregation required subsequent one. case, wrap call { assign intermediate results variables, returning final results list list item become column final table corresponding name. Name inference disabled case, since assumed name returned list items appropriately. major advantage multiple calls aggregate overhead parallelization paid even complex multi-step computations like fitting model, capturing paramters, making predictions using . also allows capturing arbitrarily complex calls can recomputed later using update,TreatmentResponseExperiment-method potential disadvantage increased RAM usage per thread due storing intermediate values variables, well memory allocation overhead associate therewith.","code":""},{"path":[]},{"path":"/reference/endoaggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform aggregation over an S4 object, but return an object of the same\nclass. — endoaggregate","title":"Perform aggregation over an S4 object, but return an object of the same\nclass. — endoaggregate","text":"Perform aggregation S4 object, return object class.","code":""},{"path":"/reference/endoaggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform aggregation over an S4 object, but return an object of the same\nclass. — endoaggregate","text":"","code":"endoaggregate(x, ...)"},{"path":"/reference/endoaggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform aggregation over an S4 object, but return an object of the same\nclass. — endoaggregate","text":"x S4 object endomorphically aggregate . ... pairlist Allow definition new parameters implementations generic.","code":""},{"path":"/reference/endoaggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform aggregation over an S4 object, but return an object of the same\nclass. — endoaggregate","text":"object class x.","code":""},{"path":"/reference/endoaggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform aggregation over an S4 object, but return an object of the same\nclass. — endoaggregate","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/exampleDataMapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Example LongTableDataMapper — exampleDataMapper","title":"Example LongTableDataMapper — exampleDataMapper","text":"dummy LongTableDataMapper object used package examples.","code":""},{"path":"/reference/exampleDataMapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example LongTableDataMapper — exampleDataMapper","text":"","code":"data(exampleDataMapper)"},{"path":"/reference/exampleDataMapper.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example LongTableDataMapper — exampleDataMapper","text":"LongTableDataMapper object","code":""},{"path":"/reference/getIntern-set-LongTable-immutable_list-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the .intern slot of a LongTable — getIntern<-,LongTable,immutable_list-method","title":"Set the .intern slot of a LongTable — getIntern<-,LongTable,immutable_list-method","text":"Set .intern slot LongTable","code":""},{"path":"/reference/getIntern-set-LongTable-immutable_list-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the .intern slot of a LongTable — getIntern<-,LongTable,immutable_list-method","text":"","code":"# S4 method for LongTable,immutable_list getIntern(object) <- value"},{"path":"/reference/getIntern-set-LongTable-immutable_list-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the .intern slot of a LongTable — getIntern<-,LongTable,immutable_list-method","text":"object LongTable value immutable_list object, class union list immutable S3 classes.","code":""},{"path":"/reference/getIntern-set-LongTable-immutable_list-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the .intern slot of a LongTable — getIntern<-,LongTable,immutable_list-method","text":"Updates object returns invisibly.","code":""},{"path":"/reference/getIntern-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the internal structural metadata for an S4 class — getIntern<-","title":"Set the internal structural metadata for an S4 class — getIntern<-","text":"Set internal structural metadata S4 class","code":""},{"path":"/reference/getIntern-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the internal structural metadata for an S4 class — getIntern<-","text":"","code":"getIntern(object, ...) <- value"},{"path":"/reference/getIntern-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the internal structural metadata for an S4 class — getIntern<-","text":"object R object update internal structural metadata . value immutable_list object, class union list immutable S3 classes.","code":""},{"path":"/reference/getIntern-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the internal structural metadata for an S4 class — getIntern<-","text":"Updates object returns invisibly.","code":""},{"path":"/reference/getIntern-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the internal structural metadata for an S4 class — getIntern<-","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/getIntern.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the specified item from object internal metadata. — getIntern","title":"Retrieve the specified item from object internal metadata. — getIntern","text":"Internal slot storing metadata relevant internal operation S4 object.","code":""},{"path":"/reference/getIntern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the specified item from object internal metadata. — getIntern","text":"","code":"getIntern(object, x, ...)"},{"path":"/reference/getIntern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the specified item from object internal metadata. — getIntern","text":"object S4 object @.itern slot containing environment. x character One symbol names retrieve object@.intern environment. ... Allow new parmeters defined generic.","code":""},{"path":"/reference/getIntern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the specified item from object internal metadata. — getIntern","text":"Depends implemented method","code":""},{"path":"/reference/getIntern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the specified item from object internal metadata. — getIntern","text":"Warning: method intended developer use can ignored users.","code":""},{"path":"/reference/getIntern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the specified item from object internal metadata. — getIntern","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/guessMapping-LongTableDataMapper-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess which columns in raw experiment data map to which dimensions. — guessMapping,LongTableDataMapper-method","title":"Guess which columns in raw experiment data map to which dimensions. — guessMapping,LongTableDataMapper-method","text":"Checks columns uniquely identified group identifiers. used help identify columns required uniquely identify rows, columns, assays metadata DataMapper class object.","code":""},{"path":"/reference/guessMapping-LongTableDataMapper-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess which columns in raw experiment data map to which dimensions. — guessMapping,LongTableDataMapper-method","text":"","code":"# S4 method for LongTableDataMapper guessMapping(object, groups, subset, data = FALSE)"},{"path":"/reference/guessMapping-LongTableDataMapper-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess which columns in raw experiment data map to which dimensions. — guessMapping,LongTableDataMapper-method","text":"object LongTableDataMapper object. groups list containing one vector column names group-. function uses determine 1:1 mappings combination columns vector unique values raw data columns. subset logical vector indicating whether subset mapped columns grouping. Must single TRUE FALSE length groups, indicating whether subset mapped columns grouping. prevent mapping column two different groups. data logical vector indicating whether like data mapped columns returned instead column names. Defaults FALSE easy use assigning mapped columns DataMapper object.","code":""},{"path":"/reference/guessMapping-LongTableDataMapper-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess which columns in raw experiment data map to which dimensions. — guessMapping,LongTableDataMapper-method","text":"list, item named associated groups item guess . character vector item columns uniquely identified identifiers group.","code":""},{"path":"/reference/guessMapping-LongTableDataMapper-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Guess which columns in raw experiment data map to which dimensions. — guessMapping,LongTableDataMapper-method","text":"unmapped columns added end returned list item called unmapped. function automatically guesses metadata checking columns single value. returned additional item list.","code":""},{"path":"/reference/guessMapping-LongTableDataMapper-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess which columns in raw experiment data map to which dimensions. — guessMapping,LongTableDataMapper-method","text":"","code":"guessMapping(exampleDataMapper, groups=list(rows='treatmentid', cols='sampleid'), subset=FALSE) #> [CoreGx::guessMapping,LongTableDataMapper-method] #> \tMapping for group rows: treatmentid #> [CoreGx::guessMapping,LongTableDataMapper-method] #> \tMapping for group cols: sampleid #> $metadata #> $metadata$id_columns #> [1] NA #>  #> $metadata$mapped_columns #> [1] \"metadata\" #>  #>  #> $rows #> $rows$id_columns #> [1] \"treatmentid\" #>  #> $rows$mapped_columns #> character(0) #>  #>  #> $cols #> $cols$id_columns #> [1] \"sampleid\" #>  #> $cols$mapped_columns #> character(0) #>  #>  #> $unmapped #> [1] \"viability\" #>"},{"path":"/reference/guessMapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for Guessing the Mapping Between Some Raw Data and an S4 Object — guessMapping","title":"Generic for Guessing the Mapping Between Some Raw Data and an S4 Object — guessMapping","text":"Generic Guessing Mapping Raw Data S4 Object","code":""},{"path":"/reference/guessMapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for Guessing the Mapping Between Some Raw Data and an S4 Object — guessMapping","text":"","code":"guessMapping(object, ...)"},{"path":"/reference/guessMapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for Guessing the Mapping Between Some Raw Data and an S4 Object — guessMapping","text":"object S4 object containing raw data guess data object slot mappings . ... Allow new arguments defined generic.","code":""},{"path":"/reference/guessMapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic for Guessing the Mapping Between Some Raw Data and an S4 Object — guessMapping","text":"list mapping guesses items.","code":""},{"path":"/reference/guessMapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic for Guessing the Mapping Between Some Raw Data and an S4 Object — guessMapping","text":"","code":"\"Generics shouldn't need examples!\" #> [1] \"Generics shouldn't need examples!\""},{"path":"/reference/gwc.html","id":null,"dir":"Reference","previous_headings":"","what":"GWC Score — gwc","title":"GWC Score — gwc","text":"Calculate gwc score two vectors, using either weighted spearman pearson correlation","code":""},{"path":"/reference/gwc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GWC Score — gwc","text":"","code":"gwc(   x1,   p1,   x2,   p2,   method.cor = c(\"pearson\", \"spearman\"),   nperm = 10000,   truncate.p = 1e-16,   ... )"},{"path":"/reference/gwc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GWC Score — gwc","text":"x1 numeric vector effect sizes (e.g., fold change t statitsics) first experiment p1 numeric vector p-values corresponding effect size first experiment x2 numeric effect size (e.g., fold change t statitsics) second experiment p2 numeric vector p-values corresponding effect size second experiment method.cor character string identifying pearson spearman correlation used nperm numeric many permutations done determine truncate.p numeric Truncation value extremely low p-values ... passed internal functions","code":""},{"path":"/reference/gwc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GWC Score — gwc","text":"numeric vector two values, correlation associated p-value.","code":""},{"path":"/reference/gwc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GWC Score — gwc","text":"","code":"data(clevelandSmall_cSet) x <- molecularProfiles(clevelandSmall_cSet,'rna')[,1] y <- molecularProfiles(clevelandSmall_cSet,'rna')[,2] x_p <- rep(0.05, times=length(x)) y_p <- rep(0.05, times=length(y)) names(x_p) <- names(x) names(y_p) <- names(y) gwc(x,x_p,y,y_p, nperm=100) #>        rho          p  #> 0.87717962 0.01980198"},{"path":"/reference/idCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic to access the unique id columns in an S4 object used to — idCols","title":"Generic to access the unique id columns in an S4 object used to — idCols","text":"Generic access unique id columns S4 object used ","code":""},{"path":"/reference/idCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic to access the unique id columns in an S4 object used to — idCols","text":"","code":"idCols(object, ...)"},{"path":"/reference/idCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic to access the unique id columns in an S4 object used to — idCols","text":"object S4 object get id columns . ... Allow new arguments generic.","code":""},{"path":"/reference/idCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic to access the unique id columns in an S4 object used to — idCols","text":"Depends implemented method","code":""},{"path":"/reference/idCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic to access the unique id columns in an S4 object used to — idCols","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/immutable.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for ","title":"Constructor for ","text":"method allow S3 object R become immutable intercepting [<-, [[<-, $<- c S3-method dispatch returning error. Reverse call mutable function.","code":""},{"path":"/reference/immutable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for ","text":"","code":"immutable(object)  is.immutable(object)  # S3 method for immutable print(x, ...)  show.immutable(x)"},{"path":"/reference/immutable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for ","text":"object, x R object uses S3 method dispatch ... Fallthrough arguments print.default.","code":""},{"path":"/reference/immutable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for ","text":"object \"immutable\" prepended class attribute. logical(1) object inherit \"immutable\" S3-class? None, invisible(NULL)","code":""},{"path":"/reference/immutable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for ","text":"motivation class create pseudo-private slots R S4 object preventing mutation slots outside accessors written class. behave expected R object operate 'copy--modify' semantics, including base R functions S3 objects. environment suitable case due 'copy--reference' semantics, normal R assignment, users assume makes copy object, actually references environment original copy object. WARNING: implementation unable intercept modifications data.table via set* group methods. methods S3 generics therefore mechanism exists hooking extend functionality. general, helper class work objects S3 interface.","code":""},{"path":[]},{"path":"/reference/immutable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for ","text":"","code":"immutable_list <- immutable(as.list(1:5)) class(immutable_list) #> [1] \"immutable\" # errors during assignment operations tryCatch({ immutable_list$new <- 1 }, error=print) #> <simpleError: Object is immutable! Use `mutable(object)` to return a mutable copy.>  immutable_list <- immutable(as.list(1:5)) is.immutable(immutable_list) #> [1] TRUE"},{"path":"/reference/is.items.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the types of all items in a list — is.items","title":"Get the types of all items in a list — is.items","text":"Get types items list","code":""},{"path":"/reference/is.items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the types of all items in a list — is.items","text":"","code":"is.items(list, ..., FUN = is)"},{"path":"/reference/is.items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the types of all items in a list — is.items","text":"list list get types ... pairlist Additional arguments FUN FUN function character Either function, name function returns single logical value. default function uses , specify desired type .... can also use type checking functions .character, .numeric, .data.frame.","code":""},{"path":"/reference/is.items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the types of all items in a list — is.items","text":"logical vector indicating list item specified type.","code":""},{"path":"/reference/is.items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the types of all items in a list — is.items","text":"","code":"list <- list(c(1,2,3), c('a','b','c')) is.items(list, 'character') #> [1] FALSE  TRUE"},{"path":"/reference/is_optim_compatible.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a function signature is amenable to optimization via stats::optim. — is_optim_compatible","title":"Check whether a function signature is amenable to optimization via stats::optim. — is_optim_compatible","text":"Functions compatible optim parameter named par first formal argument value respective free parameter optimized.","code":""},{"path":"/reference/is_optim_compatible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a function signature is amenable to optimization via stats::optim. — is_optim_compatible","text":"","code":"is_optim_compatible(fn)"},{"path":"/reference/is_optim_compatible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a function signature is amenable to optimization via stats::optim. — is_optim_compatible","text":"fn function non-primitive function.","code":""},{"path":"/reference/is_optim_compatible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a function signature is amenable to optimization via stats::optim. — is_optim_compatible","text":"logical(1)  TRUE first value formalArg(fn) \"par\", otherwise FALSE.","code":""},{"path":"/reference/lapply-MultiAssayExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"lapply\nlapply method for MultiAssayExperiment — lapply,MultiAssayExperiment-method","title":"lapply\nlapply method for MultiAssayExperiment — lapply,MultiAssayExperiment-method","text":"lapply lapply method MultiAssayExperiment","code":""},{"path":"/reference/lapply-MultiAssayExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lapply\nlapply method for MultiAssayExperiment — lapply,MultiAssayExperiment-method","text":"","code":"# S4 method for MultiAssayExperiment lapply(X, FUN, ...)"},{"path":"/reference/lapply-MultiAssayExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lapply\nlapply method for MultiAssayExperiment — lapply,MultiAssayExperiment-method","text":"X MultiAssayExperiment object. FUN function applied SummarizedExperiment X. ... Fall parameters FUN","code":""},{"path":"/reference/lapply-MultiAssayExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lapply\nlapply method for MultiAssayExperiment — lapply,MultiAssayExperiment-method","text":"MultiAssayExperiment object, modifed experiments(X) <- endoapply(experiments(X), FUN, ...).s","code":""},{"path":"/reference/list_OR_LongTable-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A class union to allow multiple types in a CoreSet slot — list_OR_LongTable-class","title":"A class union to allow multiple types in a CoreSet slot — list_OR_LongTable-class","text":"class union allow multiple types CoreSet slot","code":""},{"path":"/reference/make_optim_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a non-primitive R function and refactors it to be compatible with\noptimization via stats::optim. — make_optim_function","title":"Takes a non-primitive R function and refactors it to be compatible with\noptimization via stats::optim. — make_optim_function","text":"Takes non-primitive R function refactors compatible optimization via stats::optim.","code":""},{"path":"/reference/make_optim_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a non-primitive R function and refactors it to be compatible with\noptimization via stats::optim. — make_optim_function","text":"","code":"make_optim_function(fn, ...)"},{"path":"/reference/make_optim_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a non-primitive R function and refactors it to be compatible with\noptimization via stats::optim. — make_optim_function","text":"fn function non-primitive function ... Arguments fn fix building function optimized. Useful reducing number free parameters optimization insufficient degrees freedom.","code":""},{"path":[]},{"path":"/reference/mcc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Mathews Correlation Coefficient — mcc","title":"Compute a Mathews Correlation Coefficient — mcc","text":"function computes Matthews correlation coefficient two factors provided function. assumes factor factor class labels, enteries paired order vectors.","code":""},{"path":"/reference/mcc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Mathews Correlation Coefficient — mcc","text":"","code":"mcc(   x,   y,   nperm = 1000,   nthread = 1,   alternative = c(\"two.sided\", \"less\", \"greater\"),   ... )"},{"path":"/reference/mcc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Mathews Correlation Coefficient — mcc","text":"x, y factor length number levels nperm numeric number permutations significance estimation. 0, permutation testing done nthread numeric can parallelize permutation texting using BiocParallels bplapply alternative indicates alternative hypothesis must one ‘\"two.sided\"’, ‘\"greater\"’ ‘\"less\"’.  can specify just initial letter.  ‘\"greater\"’ corresponds positive association, ‘\"less\"’ negative association. ... list Additional arguments","code":""},{"path":"/reference/mcc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Mathews Correlation Coefficient — mcc","text":"list MCC $estimate, p value $p.value","code":""},{"path":"/reference/mcc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a Mathews Correlation Coefficient — mcc","text":"Please note: recommend call set.seed() using function ensure reproducibility results. Write seed number save script intend use results publication.","code":""},{"path":"/reference/mcc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a Mathews Correlation Coefficient — mcc","text":"","code":"x <- factor(c(1,2,1,2,3,1)) y <- factor(c(2,1,1,1,2,2)) mcc(x,y) #> Warning: The number of levels x and y was different. Taking the union of all class labels. #> $estimate #> [1] -0.452267 #>  #> $p.value #> [1] 0.408 #>"},{"path":"/reference/merckLongTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Merck Drug Combination Data LongTable — merckLongTable","title":"Merck Drug Combination Data LongTable — merckLongTable","text":"LongTable object created drug combination data provided lab Merck.","code":""},{"path":"/reference/merckLongTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merck Drug Combination Data LongTable — merckLongTable","text":"","code":"data(merckLongTable)"},{"path":"/reference/merckLongTable.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Merck Drug Combination Data LongTable — merckLongTable","text":"LongTable object","code":""},{"path":"/reference/merckLongTable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Merck Drug Combination Data LongTable — merckLongTable","text":"TODO:: Include reference","code":""},{"path":"/reference/mergeAssays-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Endomorphically merge assays within a LongTable or inheriting class — mergeAssays,LongTable-method","title":"Endomorphically merge assays within a LongTable or inheriting class — mergeAssays,LongTable-method","text":"Endomorphically merge assays within LongTable inheriting class","code":""},{"path":"/reference/mergeAssays-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endomorphically merge assays within a LongTable or inheriting class — mergeAssays,LongTable-method","text":"","code":"# S4 method for LongTable mergeAssays(object, x, y, target = x, ..., metadata = FALSE)"},{"path":"/reference/mergeAssays-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endomorphically merge assays within a LongTable or inheriting class — mergeAssays,LongTable-method","text":"object LongTable inheriting class. x character(1) valid assay name object. y character(1) valid assay name object. target character(1) Name assay assign result . Can new existing assay. Defaults x. ... Fallthrough arguments merge.data.table specify join type. Use specify columns merge . excluded, defaults =assayKeys(objecty, y). metadata logical logical vector indicating whether attach metadata either assay merge occurs. one value passed value used assays. Defaults FALSE.","code":""},{"path":"/reference/mergeAssays-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endomorphically merge assays within a LongTable or inheriting class — mergeAssays,LongTable-method","text":"copy object assays x y merged assigned target.","code":""},{"path":[]},{"path":"/reference/mergeAssays-LongTable-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Endomorphically merge assays within a LongTable or inheriting class — mergeAssays,LongTable-method","text":"Christopher Eeles","code":""},{"path":"/reference/mergeAssays.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge assays with an S4 object. — mergeAssays","title":"Merge assays with an S4 object. — mergeAssays","text":"Merge assays S4 object.","code":""},{"path":"/reference/mergeAssays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge assays with an S4 object. — mergeAssays","text":"","code":"mergeAssays(object, ...)"},{"path":"/reference/mergeAssays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge assays with an S4 object. — mergeAssays","text":"object S4 S4 object list-like slot containing assays object. ... Allow new arguments defined generic.","code":""},{"path":"/reference/mergeAssays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge assays with an S4 object. — mergeAssays","text":"modified version object.","code":""},{"path":"/reference/mergeAssays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge assays with an S4 object. — mergeAssays","text":"","code":"\"This is a generic method!\" #> [1] \"This is a generic method!\""},{"path":"/reference/metaConstruct.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for preprocessing complex data before being used in the constructor\nof an S4 container object. — metaConstruct","title":"Generic for preprocessing complex data before being used in the constructor\nof an S4 container object. — metaConstruct","text":"method intended abstract away complex constructor arguments data preprocessing steps needed transform raw data, produced treatment-response next-gen sequencing experiment, automate building appropriate S4 container object. intended allow mapping different experimental designs, form S4 configuration object, various S4 class containers Bioconductor community beyond.","code":""},{"path":"/reference/metaConstruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for preprocessing complex data before being used in the constructor\nof an S4 container object. — metaConstruct","text":"","code":"metaConstruct(mapper, ...)  # S4 method for LongTableDataMapper metaConstruct(mapper)  # S4 method for TREDataMapper metaConstruct(mapper)"},{"path":"/reference/metaConstruct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for preprocessing complex data before being used in the constructor\nof an S4 container object. — metaConstruct","text":"mapper TREDataMapper object abstracting arguments TreatmentResponseExperiment constructor. ... Allow new arguments defined generic.","code":""},{"path":"/reference/metaConstruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic for preprocessing complex data before being used in the constructor\nof an S4 container object. — metaConstruct","text":"S4 object class corresponds type build configuration object passed method. LongTable object, specified mapper. TreatmentResponseExperiment object, specified mapper.","code":""},{"path":"/reference/metaConstruct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic for preprocessing complex data before being used in the constructor\nof an S4 container object. — metaConstruct","text":"","code":"data(exampleDataMapper) rowDataMap(exampleDataMapper) <- list(c('treatmentid'), c()) colDataMap(exampleDataMapper) <- list(c('sampleid'), c()) assayMap(exampleDataMapper) <- list(sensitivity=list(c(\"treatmentid\", \"sampleid\"), c('viability'))) metadataMap(exampleDataMapper) <- list(experiment_metadata=c('metadata')) longTable <- metaConstruct(exampleDataMapper) #> 2024-01-18 21:36:16 Building assay index... #> 2024-01-18 21:36:16 Joining rowData to assayIndex... #> 2024-01-18 21:36:17 Joining colData to assayIndex... #> 2024-01-18 21:36:18 Joining assays to assayIndex... #> 2024-01-18 21:36:19 Setting assayIndex key... #> 2024-01-18 21:36:19 Building LongTable... #>  longTable #> <LongTable>  #>    dim:  1 1  #>    assays(1): sensitivity  #>    rownames(1): drug1  #>    rowData(1): treatmentid  #>    colnames(1): cell1  #>    colData(1): sampleid  #>    metadata(1): experiment_metadata   data(exampleDataMapper) exampleDataMapper <- as(exampleDataMapper, \"TREDataMapper\") rowDataMap(exampleDataMapper) <- list(c('treatmentid'), c()) colDataMap(exampleDataMapper) <- list(c('sampleid'), c()) assayMap(exampleDataMapper) <- list(sensitivity=list(c(\"treatmentid\", \"sampleid\"), c('viability'))) metadataMap(exampleDataMapper) <- list(experiment_metadata=c('metadata')) tre <- metaConstruct(exampleDataMapper) #> 2024-01-18 21:36:19 Building assay index... #> 2024-01-18 21:36:19 Joining rowData to assayIndex... #> 2024-01-18 21:36:20 Joining colData to assayIndex... #> 2024-01-18 21:36:20 Joining assays to assayIndex... #> 2024-01-18 21:36:21 Setting assayIndex key... #> 2024-01-18 21:36:22 Building LongTable... #>  tre #> <TreatmentResponseExperiment>  #>    dim:  1 1  #>    assays(1): sensitivity  #>    rownames(1): drug1  #>    rowData(1): treatmentid  #>    colnames(1): cell1  #>    colData(1): sampleid  #>    metadata(1): experiment_metadata"},{"path":"/reference/metadata-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter method for the metadata slot of a LongTable object — metadata,LongTable-method","title":"Getter method for the metadata slot of a LongTable object — metadata,LongTable-method","text":"Getter method metadata slot LongTable object","code":""},{"path":"/reference/metadata-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter method for the metadata slot of a LongTable object — metadata,LongTable-method","text":"","code":"# S4 method for LongTable metadata(x)"},{"path":"/reference/metadata-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter method for the metadata slot of a LongTable object — metadata,LongTable-method","text":"x LongTable object retrieve metadata list.","code":""},{"path":"/reference/metadata-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter method for the metadata slot of a LongTable object — metadata,LongTable-method","text":"list contents metadata slot LongTable object.","code":""},{"path":"/reference/metadata-set-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for the metadata slot of a LongTable object — metadata<-,LongTable-method","title":"Setter method for the metadata slot of a LongTable object — metadata<-,LongTable-method","text":"Setter method metadata slot LongTable object","code":""},{"path":"/reference/metadata-set-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for the metadata slot of a LongTable object — metadata<-,LongTable-method","text":"","code":"# S4 method for LongTable metadata(x) <- value"},{"path":"/reference/metadata-set-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for the metadata slot of a LongTable object — metadata<-,LongTable-method","text":"x LongTable LongTable update value list list new metadata associated LongTable object.","code":""},{"path":"/reference/metadata-set-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for the metadata slot of a LongTable object — metadata<-,LongTable-method","text":"LongTable copy LongTable object value metadata slot.","code":""},{"path":"/reference/mutable.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the ","title":"Remove the ","text":"Remove \"immutable\" S3-class R object, allowing modified normally .","code":""},{"path":"/reference/mutable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the ","text":"","code":"mutable(object)"},{"path":"/reference/mutable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the ","text":"object R object inheriting \"immutable\" class.","code":""},{"path":"/reference/mutable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the ","text":"object \"immutable\" class stripped .","code":""},{"path":"/reference/mutable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the ","text":"","code":"immut_list <- immutable(list()) mutable(immut_list) #> list()"},{"path":"/reference/nci_TRE_small.html","id":null,"dir":"Reference","previous_headings":"","what":"NCI-ALMANAC Drug Combination Data TreatmentResponseExperiment Subset — nci_TRE_small","title":"NCI-ALMANAC Drug Combination Data TreatmentResponseExperiment Subset — nci_TRE_small","text":"TreatmentResponseExperiment object containing subset NCI-ALMANAC drug combination screening data, 2347 unique treatment combinations 10 cancer cell lines selected.","code":""},{"path":"/reference/nci_TRE_small.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NCI-ALMANAC Drug Combination Data TreatmentResponseExperiment Subset — nci_TRE_small","text":"","code":"data(nci_TRE_small)"},{"path":"/reference/nci_TRE_small.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NCI-ALMANAC Drug Combination Data TreatmentResponseExperiment Subset — nci_TRE_small","text":"TreatmentResponseExperiment object","code":""},{"path":"/reference/nci_TRE_small.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"NCI-ALMANAC Drug Combination Data TreatmentResponseExperiment Subset — nci_TRE_small","text":"Susan L. Holbeck, Richard Camalier, James . Crowell, Jeevan Prasaad Govindharajulu, Melinda Hollingshead, Lawrence W. Anderson, Eric Polley, Larry Rubinstein, Apurva Srivastava, Deborah Wilsker, Jerry M. Collins, James H. Doroshow; National Cancer Institute ALMANAC: Comprehensive Screening Resource Detection Anticancer Drug Pairs Enhanced Therapeutic Activity. Cancer Res 1 July 2017; 77 (13): 3564–3576. https://doi.org/10.1158/0008-5472.CAN-17-0489","code":""},{"path":"/reference/optimizeCoreGx.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper method to find the best multithreading configuration for your\ncomputer — optimizeCoreGx","title":"A helper method to find the best multithreading configuration for your\ncomputer — optimizeCoreGx","text":"helper method find best multithreading configuration computer","code":""},{"path":"/reference/optimizeCoreGx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper method to find the best multithreading configuration for your\ncomputer — optimizeCoreGx","text":"","code":"optimizeCoreGx(sample_data, set = FALSE, report = !set)"},{"path":"/reference/optimizeCoreGx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper method to find the best multithreading configuration for your\ncomputer — optimizeCoreGx","text":"sample_data TreatmentResponseExperiment set logical(1) function modify R environment predicted optimal settings? changes global state R session! report logical(1) data.frame results returned number threads operation returned? Defaults !set.","code":""},{"path":"/reference/optimizeCoreGx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper method to find the best multithreading configuration for your\ncomputer — optimizeCoreGx","text":"set=TRUE, modifies data.table threads via setDTthreads(), otherwise displays message indicating optimal number threads. report=TRUE, also returns data.frame benchmark results.","code":""},{"path":"/reference/optimizeCoreGx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A helper method to find the best multithreading configuration for your\ncomputer — optimizeCoreGx","text":"","code":"# \\donttest{   data(merckLongTable)   optimizeCoreGx(merckLongTable) #> Benchmarking assay(sample_data, withDimnames=TRUE)... #> Running with: #>   nthread #> 1       1 #> 2       2 #> Benchmarking assays(sample_data)... #> Running with: #>   nthread #> 1       1 #> 2       2 #> Benchmarking reindex(sample_data)... #> Running with: #>   nthread #> 1       1 #> 2       2 #> Optimal cores for your machine are: 2 #>                                          expression nthread     min_sec #> 1 { assay(sample_data, 1, withDimnames = TRUE) NA }       1 0.005104951 #> 2 { assay(sample_data, 1, withDimnames = TRUE) NA }       2 0.005042283 #> 3                        { assays(sample_data) NA }       1 0.007018572 #> 4                        { assays(sample_data) NA }       2 0.006845848 #> 5                       { reindex(sample_data) NA }       1 0.007139209 #> 6                       { reindex(sample_data) NA }       2 0.007102278 #>    median_sec total_sec mem_alloc_mb  itr/sec   gc/sec #> 1 0.005189464 0.4744101     3.219008 189.7093 4.215762 #> 2 0.005103046 0.4764525     2.081880 190.9949 4.197690 #> 3 0.007069959 0.4747060     2.606320 141.1400 4.213134 #> 4 0.006929215 0.4717723     2.606320 142.0177 4.239333 #> 5 0.007221093 0.4855250     1.826312 137.9949 2.059626 #> 6 0.007150394 0.4876836     1.537576 139.4347 2.050510 # }"},{"path":"/reference/printSlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to print slot information — printSlot","title":"Helper function to print slot information — printSlot","text":"Helper function print slot information","code":""},{"path":"/reference/printSlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to print slot information — printSlot","text":"","code":"printSlot(slotName, slotData)"},{"path":"/reference/printSlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to print slot information — printSlot","text":"slotName character name slot print. slotData data.table data print.","code":""},{"path":"/reference/reindex-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Redo indexing for a LongTable object to remove any gaps in integer indexes — reindex,LongTable-method","title":"Redo indexing for a LongTable object to remove any gaps in integer indexes — reindex,LongTable-method","text":"subsetting LongTable, possible values rowKey colKey longer present object. result indexes longer contiguous integers. method calcualte new set rowKey colKey values integer indexes smallest set contiguous integers possible data.","code":""},{"path":"/reference/reindex-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redo indexing for a LongTable object to remove any gaps in integer indexes — reindex,LongTable-method","text":"","code":"# S4 method for LongTable reindex(object)"},{"path":"/reference/reindex-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redo indexing for a LongTable object to remove any gaps in integer indexes — reindex,LongTable-method","text":"object LongTable object recalcualte indexes (rowKey colKey values) .","code":""},{"path":"/reference/reindex-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redo indexing for a LongTable object to remove any gaps in integer indexes — reindex,LongTable-method","text":"copy LongTable keys smallest set contiguous integers possible given current data.","code":""},{"path":"/reference/reindex.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for resetting indexing in an S4 object — reindex","title":"Generic method for resetting indexing in an S4 object — reindex","text":"method allows integer indexes used maintain referential integrity internal S4 object reset. useful particularly subsetting object, certain indexes may longer present object data. Reindexing removes gaps integer indexes ensures smallest contiguous integer values used objects indexes.","code":""},{"path":"/reference/reindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for resetting indexing in an S4 object — reindex","text":"","code":"reindex(object, ...)"},{"path":"/reference/reindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for resetting indexing in an S4 object — reindex","text":"object S4 object redo indexing ... pairlist Allow definition new parameters generic.","code":""},{"path":"/reference/reindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for resetting indexing in an S4 object — reindex","text":"Depends implemented method","code":""},{"path":"/reference/reindex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic method for resetting indexing in an S4 object — reindex","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/rowData-LongTableDataMapper-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,LongTableDataMapper-method","title":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,LongTableDataMapper-method","text":"Convenience method subset rowData rawdata slot using assigned rowDataMap metadata.","code":""},{"path":"/reference/rowData-LongTableDataMapper-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,LongTableDataMapper-method","text":"","code":"# S4 method for LongTableDataMapper rowData(x, key = TRUE)"},{"path":"/reference/rowData-LongTableDataMapper-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,LongTableDataMapper-method","text":"x LongTableDataMapper object valid data rawdata colDataMap slots. key logical(1) table keyed according id_columns rowDataMap slot? sort table memory. Default TRUE.","code":""},{"path":"/reference/rowData-LongTableDataMapper-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,LongTableDataMapper-method","text":"data.table rowData specified rowDataMap slot.","code":""},{"path":"/reference/rowData-TREDataMapper-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,TREDataMapper-method","title":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,TREDataMapper-method","text":"Convenience method subset rowData rawdata slot using assigned rowDataMap metadata.","code":""},{"path":"/reference/rowData-TREDataMapper-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,TREDataMapper-method","text":"","code":"# S4 method for TREDataMapper rowData(x, key = TRUE)"},{"path":"/reference/rowData-TREDataMapper-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,TREDataMapper-method","text":"x TREDataMapper object valid data rawdata colDataMap slots. key logical(1) table keyed according id_columns rowDataMap slot? sort table memory. Default TRUE.","code":""},{"path":"/reference/rowData-TREDataMapper-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience method to subset the rowData out of the rawdata slot using\nthe assigned rowDataMap metadata. — rowData,TREDataMapper-method","text":"data.table rowData specified rowDataMap slot.","code":""},{"path":"/reference/rowIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic to access the row identifiers from — rowIDs","title":"Generic to access the row identifiers from — rowIDs","text":"Generic access row identifiers ","code":""},{"path":"/reference/rowIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic to access the row identifiers from — rowIDs","text":"","code":"rowIDs(object, ...)"},{"path":"/reference/rowIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic to access the row identifiers from — rowIDs","text":"object S4 object get row id columns . ... Allow new arguments generic.","code":""},{"path":"/reference/rowIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic to access the row identifiers from — rowIDs","text":"Depends implemented method.","code":""},{"path":"/reference/rowIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic to access the row identifiers from — rowIDs","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/rowMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic to access the row identifiers from — rowMeta","title":"Generic to access the row identifiers from — rowMeta","text":"Generic access row identifiers ","code":""},{"path":"/reference/rowMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic to access the row identifiers from — rowMeta","text":"","code":"rowMeta(object, ...)"},{"path":"/reference/rowMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic to access the row identifiers from — rowMeta","text":"object S4 object get row metadata columns . ... Allow new arguments generic.","code":""},{"path":"/reference/rowMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic to access the row identifiers from — rowMeta","text":"Depends implemented method.","code":""},{"path":"/reference/rowMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic to access the row identifiers from — rowMeta","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/sensitivityInfo-set.html","id":null,"dir":"Reference","previous_headings":"","what":"sensitivityInfo<- Generic Method — sensitivityInfo<-","title":"sensitivityInfo<- Generic Method — sensitivityInfo<-","text":"Generic function get annotations treatment response experiment S4 class.","code":""},{"path":"/reference/sensitivityInfo-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sensitivityInfo<- Generic Method — sensitivityInfo<-","text":"","code":"sensitivityInfo(object, ...) <- value"},{"path":"/reference/sensitivityInfo-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sensitivityInfo<- Generic Method — sensitivityInfo<-","text":"object S4 object set treatment response experiment annotations . ... Allow new arguments defined generic. value new treatment response experiment annotations.","code":""},{"path":"/reference/sensitivityInfo-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sensitivityInfo<- Generic Method — sensitivityInfo<-","text":"Depends implemented method","code":""},{"path":"/reference/sensitivityInfo-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sensitivityInfo<- Generic Method — sensitivityInfo<-","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/sensitivityInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to get the annotations for a treatment response experiment\nfrom an S4 class — sensitivityInfo","title":"Generic function to get the annotations for a treatment response experiment\nfrom an S4 class — sensitivityInfo","text":"Generic function get annotations treatment response experiment S4 class","code":""},{"path":"/reference/sensitivityInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to get the annotations for a treatment response experiment\nfrom an S4 class — sensitivityInfo","text":"","code":"sensitivityInfo(object, ...)"},{"path":"/reference/sensitivityInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to get the annotations for a treatment response experiment\nfrom an S4 class — sensitivityInfo","text":"object S4 object get treatment response experiment annotations . ... Allow new arguments defined generic.","code":""},{"path":"/reference/sensitivityInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to get the annotations for a treatment response experiment\nfrom an S4 class — sensitivityInfo","text":"Depends implemented method","code":""},{"path":"/reference/sensitivityInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to get the annotations for a treatment response experiment\nfrom an S4 class — sensitivityInfo","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/sensitivityMeasures-set.html","id":null,"dir":"Reference","previous_headings":"","what":"sensitivityMeasures<- Generic — sensitivityMeasures<-","title":"sensitivityMeasures<- Generic — sensitivityMeasures<-","text":"Set names sensitivity summary metrics available S4 object.","code":""},{"path":"/reference/sensitivityMeasures-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sensitivityMeasures<- Generic — sensitivityMeasures<-","text":"","code":"sensitivityMeasures(object, ...) <- value"},{"path":"/reference/sensitivityMeasures-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sensitivityMeasures<- Generic — sensitivityMeasures<-","text":"object S4 object update. ... Allow new methods defined generic. value set names sensitivity measures use update object .","code":""},{"path":"/reference/sensitivityMeasures-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sensitivityMeasures<- Generic — sensitivityMeasures<-","text":"Depends implemented method","code":""},{"path":"/reference/sensitivityMeasures-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sensitivityMeasures<- Generic — sensitivityMeasures<-","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/sensitivityMeasures.html","id":null,"dir":"Reference","previous_headings":"","what":"sensitivityMeasures Generic — sensitivityMeasures","title":"sensitivityMeasures Generic — sensitivityMeasures","text":"Get names sensitivity summary metrics available S4 object.","code":""},{"path":"/reference/sensitivityMeasures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sensitivityMeasures Generic — sensitivityMeasures","text":"","code":"sensitivityMeasures(object, ...)"},{"path":"/reference/sensitivityMeasures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sensitivityMeasures Generic — sensitivityMeasures","text":"object S4 object retrieve names sensitivty summary measurements . ... Fallthrough arguements defining new methods","code":""},{"path":"/reference/sensitivityMeasures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sensitivityMeasures Generic — sensitivityMeasures","text":"Depends implemented method","code":""},{"path":"/reference/sensitivityMeasures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sensitivityMeasures Generic — sensitivityMeasures","text":"","code":"sensitivityMeasures(clevelandSmall_cSet) #> [1] \"exp_id\"         \"AUC_published\"  \"AUC_recomputed\" \"alpha\"          #> [5] \"beta\"           \"SF2\""},{"path":"/reference/sensitivityProfiles-set.html","id":null,"dir":"Reference","previous_headings":"","what":"sensitivityProfiles<- Generic — sensitivityProfiles<-","title":"sensitivityProfiles<- Generic — sensitivityProfiles<-","text":"generic sensitivityProfiles replacement method","code":""},{"path":"/reference/sensitivityProfiles-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sensitivityProfiles<- Generic — sensitivityProfiles<-","text":"","code":"sensitivityProfiles(object, ...) <- value"},{"path":"/reference/sensitivityProfiles-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sensitivityProfiles<- Generic — sensitivityProfiles<-","text":"object S4 object update sensitivity profile summaries . ... Fallthrough arguments defining new methods value object new sensitivity profiles. matrix object passed , converted data.frame assignment","code":""},{"path":"/reference/sensitivityProfiles-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sensitivityProfiles<- Generic — sensitivityProfiles<-","text":"Updated CoreSet","code":""},{"path":"/reference/sensitivityProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"sensitivityProfiles Generic — sensitivityProfiles","title":"sensitivityProfiles Generic — sensitivityProfiles","text":"generic sensitivityProfiles getter method","code":""},{"path":"/reference/sensitivityProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sensitivityProfiles Generic — sensitivityProfiles","text":"","code":"sensitivityProfiles(object, ...)"},{"path":"/reference/sensitivityProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sensitivityProfiles Generic — sensitivityProfiles","text":"object S4 object retrieve sensitivity profile summaries . ... pairlist Allow defining new arguments generic.","code":""},{"path":"/reference/sensitivityProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sensitivityProfiles Generic — sensitivityProfiles","text":"Depends implemented method","code":""},{"path":"/reference/sensitivityProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sensitivityProfiles Generic — sensitivityProfiles","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/sensitivityRaw-set.html","id":null,"dir":"Reference","previous_headings":"","what":"sensitivityRaw<- Generic — sensitivityRaw<-","title":"sensitivityRaw<- Generic — sensitivityRaw<-","text":"Generic function set raw data array treatment response experiment S4 class.","code":""},{"path":"/reference/sensitivityRaw-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sensitivityRaw<- Generic — sensitivityRaw<-","text":"","code":"sensitivityRaw(object, ...) <- value"},{"path":"/reference/sensitivityRaw-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sensitivityRaw<- Generic — sensitivityRaw<-","text":"object S4 object extract raw sensitivity data . ... pairlist Allow new parameters defined generic. value object containing dose viability metrics update object .","code":""},{"path":"/reference/sensitivityRaw-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sensitivityRaw<- Generic — sensitivityRaw<-","text":"Depends implemented method","code":""},{"path":"/reference/sensitivityRaw.html","id":null,"dir":"Reference","previous_headings":"","what":"sensitivityRaw Generic Method — sensitivityRaw","title":"sensitivityRaw Generic Method — sensitivityRaw","text":"Generic function get raw data array treatment response experiment S4 class.","code":""},{"path":"/reference/sensitivityRaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sensitivityRaw Generic Method — sensitivityRaw","text":"","code":"sensitivityRaw(object, ...)"},{"path":"/reference/sensitivityRaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sensitivityRaw Generic Method — sensitivityRaw","text":"object S4 object extract raw sensitivity experiment data . ... pairlist  Allow new parameters defined generic.","code":""},{"path":"/reference/sensitivityRaw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sensitivityRaw Generic Method — sensitivityRaw","text":"Depends implemented method","code":""},{"path":"/reference/sensitivityRaw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sensitivityRaw Generic Method — sensitivityRaw","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/sensitivitySlotToLongTable.html","id":null,"dir":"Reference","previous_headings":"","what":"sensitivitySlotToLongTable Generic — sensitivitySlotToLongTable","title":"sensitivitySlotToLongTable Generic — sensitivitySlotToLongTable","text":"Convert sensitivity slot object inheriting CoreSet list LongTable.","code":""},{"path":"/reference/sensitivitySlotToLongTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sensitivitySlotToLongTable Generic — sensitivitySlotToLongTable","text":"","code":"sensitivitySlotToLongTable(object, ...)"},{"path":"/reference/sensitivitySlotToLongTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sensitivitySlotToLongTable Generic — sensitivitySlotToLongTable","text":"object CoreSet Object inheriting CoreSet. ... Allow new arguments defined generic.","code":""},{"path":"/reference/sensitivitySlotToLongTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sensitivitySlotToLongTable Generic — sensitivitySlotToLongTable","text":"LongTable object containing data sensitivity slot.","code":""},{"path":"/reference/sensitivitySlotToLongTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sensitivitySlotToLongTable Generic — sensitivitySlotToLongTable","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/setOps-immutable.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset an immutable object, returning another immutable object. — setOps-immutable","title":"Subset an immutable object, returning another immutable object. — setOps-immutable","text":"Subset immutable object, returning another immutable object.","code":""},{"path":"/reference/setOps-immutable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset an immutable object, returning another immutable object. — setOps-immutable","text":"","code":"subset.immutable(x, ...)  # S3 method for immutable [(x, ...)  # S3 method for immutable [[(x, ...)  # S3 method for immutable $(x, ...)"},{"path":"/reference/setOps-immutable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset an immutable object, returning another immutable object. — setOps-immutable","text":"x R object inheriting \"immutable\" S3-class. ... Catch additional parameters. Lets objects arbitrary dimensions made immutable.","code":""},{"path":"/reference/setOps-immutable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset an immutable object, returning another immutable object. — setOps-immutable","text":"immutable subset x.","code":""},{"path":"/reference/setOps-immutable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset an immutable object, returning another immutable object. — setOps-immutable","text":"","code":"immut_mat <- immutable(matrix(1:100, 10, 10)) immut_mat[1:5, 1:5] #> immutable matrix array  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1   11   21   31   41 #> [2,]    2   12   22   32   42 #> [3,]    3   13   23   33   43 #> [4,]    4   14   24   34   44 #> [5,]    5   15   25   35   45"},{"path":"/reference/show-CoreSet-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a CoreSet — show,CoreSet-method","title":"Show a CoreSet — show,CoreSet-method","text":"Show CoreSet","code":""},{"path":"/reference/show-CoreSet-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a CoreSet — show,CoreSet-method","text":"","code":"# S4 method for CoreSet show(object)"},{"path":"/reference/show-CoreSet-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a CoreSet — show,CoreSet-method","text":"object CoreSet object show via cat.","code":""},{"path":"/reference/show-CoreSet-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a CoreSet — show,CoreSet-method","text":"Prints CoreSet object output stream, returns invisible NULL.","code":""},{"path":[]},{"path":"/reference/show-CoreSet-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a CoreSet — show,CoreSet-method","text":"","code":"show(clevelandSmall_cSet) #> <CoreSet> #> Name: Cleveland  #> Date Created: Sat Feb 18 15:10:56 2023  #> Number of samples:  10  #> Molecular profiles: <MultiAssayExperiment>  #>    ExperimentList class object of length 2:  #>     [1] rna : SummarizedExperiment with 1000 rows and 9 columns  #>     [2] rnaseq : SummarizedExperiment with 1000 rows and 9 columns  #> Treatment response: <TreatmentResponseExperiment>  #>    dim:  9 10  #>    assays(2): sensitivity profiles  #>    rownames(9): radiation:1:1 radiation:1:2 ... radiation:8:1 radiation:10:1  #>    rowData(3): treatment1id treatment1dose replicate_id  #>    colnames(10): CHP-212 IMR-32 KP-N-S19s ... SK-N-SH SNU-245 SNU-869  #>    colData(2): sampleid rn  #>    metadata(1): experiment_metadata"},{"path":"/reference/show-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for the LongTable class — show,LongTable-method","title":"Show method for the LongTable class — show,LongTable-method","text":"Show method LongTable class","code":""},{"path":"/reference/show-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for the LongTable class — show,LongTable-method","text":"","code":"# S4 method for LongTable show(object)"},{"path":"/reference/show-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for the LongTable class — show,LongTable-method","text":"object LongTable object print results .","code":""},{"path":"/reference/show-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show method for the LongTable class — show,LongTable-method","text":"invisible Prints console.","code":""},{"path":"/reference/show-LongTable-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show method for the LongTable class — show,LongTable-method","text":"","code":"show(merckLongTable) #> <LongTable>  #>    dim:  744 12  #>    assays(2): sensitivity profiles  #>    rownames(744): 5-FU:Bortezomib:0.35:0.00045 5-FU:Bortezomib:0.35:0.002 ... geldanamycin:Topotecan:0.0223:0.0223 geldanamycin:Topotecan:0.0223:0.0775  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(12): A2058:1 A2058:3 A2780:1 ... CAOV3:1 CAOV3:2 CAOV3:3  #>    colData(2): sampleid batchid  #>    metadata(0): none"},{"path":"/reference/showSigAnnot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the annotations for a Signature class object, as returned by\ndrugSensitivitysig or radSensitivtySig functions available in\nPharmacoGx and RadioGx, respectively. — showSigAnnot","title":"Get the annotations for a Signature class object, as returned by\ndrugSensitivitysig or radSensitivtySig functions available in\nPharmacoGx and RadioGx, respectively. — showSigAnnot","text":"Get annotations Signature class object, returned drugSensitivitysig radSensitivtySig functions available PharmacoGx RadioGx, respectively.","code":""},{"path":"/reference/showSigAnnot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the annotations for a Signature class object, as returned by\ndrugSensitivitysig or radSensitivtySig functions available in\nPharmacoGx and RadioGx, respectively. — showSigAnnot","text":"","code":"showSigAnnot(object, ...)"},{"path":"/reference/showSigAnnot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the annotations for a Signature class object, as returned by\ndrugSensitivitysig or radSensitivtySig functions available in\nPharmacoGx and RadioGx, respectively. — showSigAnnot","text":"object Signature class object ... Allow definition new arguments generic","code":""},{"path":"/reference/showSigAnnot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the annotations for a Signature class object, as returned by\ndrugSensitivitysig or radSensitivtySig functions available in\nPharmacoGx and RadioGx, respectively. — showSigAnnot","text":"NULL Prints signature annotations console","code":""},{"path":"/reference/showSigAnnot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the annotations for a Signature class object, as returned by\ndrugSensitivitysig or radSensitivtySig functions available in\nPharmacoGx and RadioGx, respectively. — showSigAnnot","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/sub-LongTable-ANY-ANY-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"[ LongTable Method — [,LongTable,ANY,ANY,ANY-method","title":"[ LongTable Method — [,LongTable,ANY,ANY,ANY-method","text":"Single bracket subsetting LongTable object. See subset details.","code":""},{"path":"/reference/sub-LongTable-ANY-ANY-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[ LongTable Method — [,LongTable,ANY,ANY,ANY-method","text":"","code":"# S4 method for LongTable,ANY,ANY,ANY [(x, i, j, assays = assayNames(x), ..., drop = FALSE)"},{"path":"/reference/sub-LongTable-ANY-ANY-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[ LongTable Method — [,LongTable,ANY,ANY,ANY-method","text":"x LongTable object subset. character, numeric, logical call Character: pass character vector drug names, subset object row id columns matching vector. parameter also supports valid R regex query strings match colnames x. convenience, * converted .* automatically. Colon can denote specific part colnames string query. Numeric Logical: select based rowKey rowData method LongTable. Call: Accepts valid query statements data.table parameter call object. provided function .() conveniently convert raw R statements call use function. j character, numeric, logical call Character: pass character vector drug names, subset object drug id columns matching vector. parameter also supports regex queries. Colon can denote specific part colnames string query. Numeric Logical: select based rowID rowData method LongTable. Call: Accepts valid query statements data.table parameter call object. provided function .() conveniently convert raw R statements call use function. assays character Names assays kept LongTable subsetting. ... Included ensure drop can set name. drop logical Included compatibility '[' primitive, defaults FALSE changing nothing.","code":""},{"path":"/reference/sub-LongTable-ANY-ANY-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[ LongTable Method — [,LongTable,ANY,ANY,ANY-method","text":"LongTable containing data specified function parameters.","code":""},{"path":"/reference/sub-LongTable-ANY-ANY-ANY-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"[ LongTable Method — [,LongTable,ANY,ANY,ANY-method","text":"function endomorphic, always returns LongTable object.","code":""},{"path":"/reference/sub-LongTable-ANY-ANY-ANY-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[ LongTable Method — [,LongTable,ANY,ANY,ANY-method","text":"","code":"# Character merckLongTable['ABT-888', 'CAOV3'] #> <LongTable>  #>    dim:  42 2  #>    assays(2): sensitivity profiles  #>    rownames(42): ABT-888:MK-8776:0.35:0.0925 ABT-888:MK-8776:0.35:0.325 ... Zolinza:ABT-888:0.0925:0.35 Zolinza:ABT-888:0.0925:1.08  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(2): CAOV3:1 CAOV3:3  #>    colData(2): sampleid batchid  #>    metadata(0): none  # Numeric merckLongTable[1, c(1, 2)] #> <LongTable>  #>    dim:  1 1  #>    assays(2): sensitivity profiles  #>    rownames(1): 5-FU:Bortezomib:0.35:0.00045  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(1): A2058:1  #>    colData(2): sampleid batchid  #>    metadata(0): none  # Logical merckLongTable[, colData(merckLongTable)$sampleid == 'A2058'] #> <LongTable>  #>    dim:  744 2  #>    assays(2): sensitivity profiles  #>    rownames(744): 5-FU:Bortezomib:0.35:0.00045 5-FU:Bortezomib:0.35:0.002 ... geldanamycin:Topotecan:0.0223:0.0223 geldanamycin:Topotecan:0.0223:0.0775  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(2): A2058:1 A2058:3  #>    colData(2): sampleid batchid  #>    metadata(0): none  # Call merckLongTable[      .(drug1id == 'Dasatinib' & drug2id != '5-FU'),      .(sampleid == 'A2058'),  ] #> <LongTable>  #>    dim:  8 1  #>    assays(2): sensitivity profiles  #>    rownames(8): Dasatinib:Dinaciclib:0.024:0.000925 Dasatinib:Dinaciclib:0.024:0.00325 ... Dasatinib:Sorafenib:0.024:10 Dasatinib:Sorafenib:0.024:20  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(1): A2058:1  #>    colData(2): sampleid batchid  #>    metadata(0): none"},{"path":"/reference/sub-subset-LongTable-ANY-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"[[<- Method for LongTable Class — [[<-,LongTable,ANY,ANY-method","title":"[[<- Method for LongTable Class — [[<-,LongTable,ANY,ANY-method","text":"Just wrapper around assay<- convenience. See ?'assay<-,LongTable,character-method'.","code":""},{"path":"/reference/sub-subset-LongTable-ANY-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[[<- Method for LongTable Class — [[<-,LongTable,ANY,ANY-method","text":"","code":"# S4 method for LongTable,ANY,ANY [[(x, i) <- value"},{"path":"/reference/sub-subset-LongTable-ANY-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[[<- Method for LongTable Class — [[<-,LongTable,ANY,ANY-method","text":"x LongTable update. name assay update, must assayNames(object). value data.frame","code":""},{"path":"/reference/sub-subset-LongTable-ANY-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[[<- Method for LongTable Class — [[<-,LongTable,ANY,ANY-method","text":"LongTable object assay updated using value.","code":""},{"path":"/reference/sub-subset-LongTable-ANY-ANY-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[[<- Method for LongTable Class — [[<-,LongTable,ANY,ANY-method","text":"","code":"merckLongTable[['sensitivity']] <- merckLongTable[['sensitivity']]"},{"path":"/reference/subset-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset method for a LongTable object. — subset,LongTable-method","title":"Subset method for a LongTable object. — subset,LongTable-method","text":"Allows use colData rowData data.table objects query based rowID colID, used subset assay data.tables stored assays slot. function endomorphic, always returns LongTable object.","code":""},{"path":"/reference/subset-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset method for a LongTable object. — subset,LongTable-method","text":"","code":"# S4 method for LongTable subset(x, i, j, assays = assayNames(x), reindex = TRUE)"},{"path":"/reference/subset-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset method for a LongTable object. — subset,LongTable-method","text":"x LongTable object subset. character, numeric, logical call Character: pass character vector rownames LongTable object valid regex query evaluated rownames. Numeric Logical: vector indices logical vector subset rows LongTable. Call: Accepts valid query statements data.table parameter, can used make complex queries using data.table API rowData data.table. j character, numeric, logical call Character: pass character vector colnames LongTable object valid regex query evaluated colnames. Numeric Logical: vector indices logical vector subset columns LongTable. Call: Accepts valid query statements data.table parameter, can used make complex queries using data.table API colData data.table. assays character, numeric logical Optional list assay names subset. Can used subset assays list , returning selected items new LongTable. reindex logical(1) index values reset smallest possible set consecutive integers. Modifies \"rowKey\", \"colKey\", assayKey columns. Initial benchmarks indicate reindex=FALSE saves ~20% execution time memory allocation. cost reindexing decreases smaller subset gets.","code":""},{"path":"/reference/subset-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset method for a LongTable object. — subset,LongTable-method","text":"LongTable new LongTable object subset based specified parameters.","code":""},{"path":"/reference/subset-LongTable-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset method for a LongTable object. — subset,LongTable-method","text":"","code":"# Character subset(merckLongTable, 'ABT-888', 'CAOV3') #> <LongTable>  #>    dim:  42 2  #>    assays(2): sensitivity profiles  #>    rownames(42): ABT-888:MK-8776:0.35:0.0925 ABT-888:MK-8776:0.35:0.325 ... Zolinza:ABT-888:0.0925:0.35 Zolinza:ABT-888:0.0925:1.08  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(2): CAOV3:1 CAOV3:3  #>    colData(2): sampleid batchid  #>    metadata(0): none  # Numeric subset(merckLongTable, 1, c(1, 2)) #> <LongTable>  #>    dim:  1 1  #>    assays(2): sensitivity profiles  #>    rownames(1): 5-FU:Bortezomib:0.35:0.00045  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(1): A2058:1  #>    colData(2): sampleid batchid  #>    metadata(0): none  # Logical subset(merckLongTable, , colData(merckLongTable)$sampleid == 'A2058') #> <LongTable>  #>    dim:  744 2  #>    assays(2): sensitivity profiles  #>    rownames(744): 5-FU:Bortezomib:0.35:0.00045 5-FU:Bortezomib:0.35:0.002 ... geldanamycin:Topotecan:0.0223:0.0223 geldanamycin:Topotecan:0.0223:0.0775  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(2): A2058:1 A2058:3  #>    colData(2): sampleid batchid  #>    metadata(0): none  # Call subset(merckLongTable, drug1id == 'Dasatinib' & drug2id != '5-FU',     sampleid == 'A2058') #> <LongTable>  #>    dim:  8 1  #>    assays(2): sensitivity profiles  #>    rownames(8): Dasatinib:Dinaciclib:0.024:0.000925 Dasatinib:Dinaciclib:0.024:0.00325 ... Dasatinib:Sorafenib:0.024:10 Dasatinib:Sorafenib:0.024:20  #>    rowData(5): drug1id drug2id drug1dose drug2dose combination_name  #>    colnames(1): A2058:1  #>    colData(2): sampleid batchid  #>    metadata(0): none"},{"path":"/reference/subsetTo.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a CoreSet object based on various parameters, such as cell lines, molecular features — subsetTo","title":"Subset a CoreSet object based on various parameters, such as cell lines, molecular features — subsetTo","text":"Subset CoreSet object based various parameters, cell lines, molecular features","code":""},{"path":"/reference/subsetTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a CoreSet object based on various parameters, such as cell lines, molecular features — subsetTo","text":"","code":"subsetTo(object, ...)"},{"path":"/reference/subsetTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a CoreSet object based on various parameters, such as cell lines, molecular features — subsetTo","text":"object object inheriting CoreGx::CoreSet class ... Allow definition new arguments generic","code":""},{"path":"/reference/subsetTo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a CoreSet object based on various parameters, such as cell lines, molecular features — subsetTo","text":"subsetted version original object","code":""},{"path":"/reference/subsetTo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a CoreSet object based on various parameters, such as cell lines, molecular features — subsetTo","text":"","code":"\"Generics shouldn't need examples!\" #> [1] \"Generics shouldn't need examples!\""},{"path":"/reference/summarizeMolecularProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize molecular profile data such that there is a single entry for each\nsample line/treatment combination — summarizeMolecularProfiles","title":"Summarize molecular profile data such that there is a single entry for each\nsample line/treatment combination — summarizeMolecularProfiles","text":"Summarize molecular profile data single entry sample line/treatment combination","code":""},{"path":"/reference/summarizeMolecularProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize molecular profile data such that there is a single entry for each\nsample line/treatment combination — summarizeMolecularProfiles","text":"","code":"summarizeMolecularProfiles(object, ...)"},{"path":"/reference/summarizeMolecularProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize molecular profile data such that there is a single entry for each\nsample line/treatment combination — summarizeMolecularProfiles","text":"object S4 object summarize molecular profiles . ... Allow definition new arguments generic","code":""},{"path":"/reference/summarizeMolecularProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize molecular profile data such that there is a single entry for each\nsample line/treatment combination — summarizeMolecularProfiles","text":"Depends implemented method","code":""},{"path":"/reference/summarizeMolecularProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize molecular profile data such that there is a single entry for each\nsample line/treatment combination — summarizeMolecularProfiles","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/summarizeSensitivityProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize across replicates for a sensitivity dose-response experiment — summarizeSensitivityProfiles","title":"Summarize across replicates for a sensitivity dose-response experiment — summarizeSensitivityProfiles","text":"Summarize across replicates sensitivity dose-response experiment","code":""},{"path":"/reference/summarizeSensitivityProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize across replicates for a sensitivity dose-response experiment — summarizeSensitivityProfiles","text":"","code":"summarizeSensitivityProfiles(object, ...)"},{"path":"/reference/summarizeSensitivityProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize across replicates for a sensitivity dose-response experiment — summarizeSensitivityProfiles","text":"object S4 object summarize sensitivity profiles . ... Allow definition new arguments generic","code":""},{"path":"/reference/summarizeSensitivityProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize across replicates for a sensitivity dose-response experiment — summarizeSensitivityProfiles","text":"Depends implemented method","code":""},{"path":"/reference/summarizeSensitivityProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize across replicates for a sensitivity dose-response experiment — summarizeSensitivityProfiles","text":"","code":"print(\"Generics shouldn't need examples?\") #> [1] \"Generics shouldn't need examples?\""},{"path":"/reference/updateObject-CoreSet-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the CoreSet class after changes in it struture or API — updateObject,CoreSet-method","title":"Update the CoreSet class after changes in it struture or API — updateObject,CoreSet-method","text":"Update CoreSet class changes struture API","code":""},{"path":"/reference/updateObject-CoreSet-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the CoreSet class after changes in it struture or API — updateObject,CoreSet-method","text":"","code":"# S4 method for CoreSet updateObject(object, verify = FALSE, verbose = FALSE)"},{"path":"/reference/updateObject-CoreSet-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the CoreSet class after changes in it struture or API — updateObject,CoreSet-method","text":"object CoreSet object update class structure . verify logical(1) indicating validObject called updating object. Defaults TRUE, set FALSE debugging. verbose TRUE FALSE, indicating whether information update reported","code":""},{"path":"/reference/updateObject-CoreSet-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the CoreSet class after changes in it struture or API — updateObject,CoreSet-method","text":"CoreSet update class structure.","code":""},{"path":"/reference/updateObject-LongTable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the LongTable class after changes in it struture or API — updateObject,LongTable-method","title":"Update the LongTable class after changes in it struture or API — updateObject,LongTable-method","text":"Update LongTable class changes struture API","code":""},{"path":"/reference/updateObject-LongTable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the LongTable class after changes in it struture or API — updateObject,LongTable-method","text":"","code":"# S4 method for LongTable updateObject(object, verify = FALSE, verbose = FALSE)"},{"path":"/reference/updateObject-LongTable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the LongTable class after changes in it struture or API — updateObject,LongTable-method","text":"object LongTable object update class structure . verify logical(1) indicating validObject called updating object. Defaults TRUE, set FALSE debugging. verbose TRUE FALSE, indicating whether information update reported","code":""},{"path":"/reference/updateObject-LongTable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the LongTable class after changes in it struture or API — updateObject,LongTable-method","text":"LongTable update class structure.","code":""},{"path":"/reference/updateSampleId.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the sample ids in a cSet object — updateSampleId","title":"Update the sample ids in a cSet object — updateSampleId","text":"Update sample ids cSet object","code":""},{"path":"/reference/updateSampleId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the sample ids in a cSet object — updateSampleId","text":"","code":"updateSampleId(object, new.ids = vector(\"character\"))"},{"path":"/reference/updateSampleId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the sample ids in a cSet object — updateSampleId","text":"object object sample ids updated new.ids new ids assign object","code":""},{"path":"/reference/updateSampleId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the sample ids in a cSet object — updateSampleId","text":"CoreSet modified CoreSet object","code":""},{"path":"/reference/updateSampleId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the sample ids in a cSet object — updateSampleId","text":"","code":"updateSampleId(clevelandSmall_cSet, sampleNames(clevelandSmall_cSet)) #> Warning:  #> [CoreGx::assay] Cannot use key=TRUE when summarize=TRUE. Ignoring the key argument. #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #> <CoreSet> #> Name: Cleveland  #> Date Created: Sat Feb 18 15:10:56 2023  #> Number of samples:  10  #> Molecular profiles: <MultiAssayExperiment>  #>    ExperimentList class object of length 2:  #>     [1] rna : SummarizedExperiment with 1000 rows and 9 columns  #>     [2] rnaseq : SummarizedExperiment with 1000 rows and 9 columns  #> Treatment response: <TreatmentResponseExperiment>  #>  #> Warning: column(s) not removed because not found: [.colnames] #>    dim:  9 10  #>    assays(2): sensitivity profiles  #>    rownames(9): radiation:1:1 radiation:1:2 ... radiation:8:1 radiation:10:1  #>    rowData(3): treatment1id treatment1dose replicate_id  #> Warning: column(s) not removed because not found: [.colnames] #> Warning: column(s) not removed because not found: [.colnames] #>    colnames(10):   #> Warning: column(s) not removed because not found: [.colnames] #>    colData(4): sampleid rn col Key .rownames  #>    metadata(1): experiment_metadata"},{"path":"/reference/updateTreatmentId.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the treatment ids in a cSet object — updateTreatmentId","title":"Update the treatment ids in a cSet object — updateTreatmentId","text":"Update treatment ids cSet object","code":""},{"path":"/reference/updateTreatmentId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the treatment ids in a cSet object — updateTreatmentId","text":"","code":"updateTreatmentId(object, new.ids = vector(\"character\"))"},{"path":"/reference/updateTreatmentId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the treatment ids in a cSet object — updateTreatmentId","text":"object object treatment ids updated new.ids new ids assign object","code":""},{"path":"/reference/updateTreatmentId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the treatment ids in a cSet object — updateTreatmentId","text":"CoreSet modified CoreSet object","code":""},{"path":"/reference/updateTreatmentId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the treatment ids in a cSet object — updateTreatmentId","text":"","code":"updateTreatmentId(clevelandSmall_cSet, treatmentNames(clevelandSmall_cSet)) #> No treatments in this object! Returning without modification. #> <CoreSet> #> Name: Cleveland  #> Date Created: Sat Feb 18 15:10:56 2023  #> Number of samples:  10  #> Molecular profiles: <MultiAssayExperiment>  #>    ExperimentList class object of length 2:  #>     [1] rna : SummarizedExperiment with 1000 rows and 9 columns  #>     [2] rnaseq : SummarizedExperiment with 1000 rows and 9 columns  #> Treatment response: <TreatmentResponseExperiment>  #>    dim:  9 10  #>    assays(2): sensitivity profiles  #>    rownames(9): radiation:1:1 radiation:1:2 ... radiation:8:1 radiation:10:1  #>    rowData(3): treatment1id treatment1dose replicate_id  #>    colnames(10): CHP-212 IMR-32 KP-N-S19s ... SK-N-SH SNU-245 SNU-869  #>    colData(2): sampleid rn  #>    metadata(1): experiment_metadata"}]
